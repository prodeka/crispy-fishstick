#!/usr/bin/env python3
"""
Script de test pour l'API Nanostruct Web Avanc√©e
"""

import requests
import json
import time
import os

# Configuration
API_BASE_URL = "http://localhost:5001"

def test_health():
    """Test de la sant√© de l'API avanc√©e"""
    print("üè• Test de sant√© de l'API avanc√©e...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API avanc√©e en ligne: {data['message']}")
            print(f"üìã Version: {data['version']}")
            return True
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter √† l'API avanc√©e")
        return False

def test_assainissement_avance():
    """Test du calcul d'assainissement avanc√©"""
    print("\nüíß Test du calcul d'assainissement avanc√©...")
    
    data = {
        "surface": 1000.0,
        "coefficient_ruissellement": 0.9,
        "intensite_pluie": 50.0,
        "pente": 0.02,
        "rugosite": 0.013
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/assainissement/calcul_avance",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Calcul assainissement avanc√© r√©ussi")
                print(f"   D√©bit: {result['resultat']['debit_ls']} L/s")
                print(f"   Diam√®tre: {result['resultat']['diametre_mm']} mm")
                print(f"   Vitesse: {result['resultat']['vitesse_ms']} m/s")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_poteau_ba_avance():
    """Test du calcul de poteau BA avanc√©"""
    print("\nüèóÔ∏è Test du calcul de poteau BA avanc√©...")
    
    data = {
        "Nu": 500000,  # 500 kN
        "Mu": 50000,    # 50 kN.m
        "b": 0.3,       # 30 cm
        "h": 0.3,       # 30 cm
        "L": 3.0,       # 3 m
        "k": 1.0,       # coefficient de flambement
        "fc28": 25.0,
        "fe": 500.0
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/beton_arme/poteau_avance",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Calcul poteau BA avanc√© r√©ussi")
                print(f"   Section acier: {result['resultat']['section_acier_requise_cm2']} cm¬≤")
                print(f"   V√©rification: {result['resultat']['verification']}")
                print(f"   √âlancement: {result['resultat']['elancement']}")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_compression_centree():
    """Test du calcul de compression centr√©e"""
    print("\nüèóÔ∏è Test du calcul de compression centr√©e...")
    
    data = {
        "Nu": 800000,  # 800 kN
        "b": 0.4,      # 40 cm
        "h": 0.4,      # 40 cm
        "L": 3.5,      # 3.5 m
        "k": 1.0,      # coefficient de flambement
        "fc28": 30.0,
        "fe": 500.0
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/beton_arme/compression_centree",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Calcul compression centr√©e r√©ussi")
                print(f"   Section acier: {result['resultat']['section_acier_requise_cm2']} cm¬≤")
                print(f"   V√©rification: {result['resultat']['verification']}")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_moment_poutre():
    """Test du calcul de moment d'encastrement"""
    print("\nüèóÔ∏è Test du calcul de moment d'encastrement...")
    
    data = {
        "q": 25.0,        # 25 kN/m
        "L": 5.0,         # 5 m
        "is_end_span": True
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/beton_arme/moment_poutre",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Calcul moment d'encastrement r√©ussi")
                print(f"   Moment: {result['resultat']['moment_encastrement_knm']} kN.m")
                print(f"   Type: {result['resultat']['type_poutre']}")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_flexion_bois_avance():
    """Test de la v√©rification de flexion bois avanc√©e"""
    print("\nüå≥ Test de la v√©rification de flexion bois avanc√©e...")
    
    data = {
        "longueur": 4.0,      # 4 m
        "b": 150,             # 150 mm
        "h": 200,             # 200 mm
        "classe_bois": "C24",
        "classe_service": 2,
        "duree_charge": "moyen terme",
        "charge_g": 2.5,      # 2.5 kN/m
        "charge_q": 3.0,      # 3.0 kN/m
        "charge_w": 0.0,
        "charge_s": 0.0
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/bois/flexion_avance",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ V√©rification flexion bois avanc√©e r√©ussi")
                print(f"   Moment max: {result['resultat']['moment_maximal_knm']} kN.m")
                print(f"   Section ad√©quate: {result['resultat']['section_adequate']}")
                print(f"   Message: {result['resultat']['message']}")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_traction_bois_avance():
    """Test de la v√©rification de traction bois avanc√©e"""
    print("\nüå≥ Test de la v√©rification de traction bois avanc√©e...")
    
    data = {
        "N": 5000,            # 5000 daN
        "b": 100,             # 100 mm
        "h": 100,             # 100 mm
        "classe_bois": "C24",
        "classe_service": 2,
        "duree_charge": "moyen terme"
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/bois/traction_avance",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ V√©rification traction bois avanc√©e r√©ussi")
                print(f"   Effort traction: {result['resultat']['effort_traction_kn']} kN")
                print(f"   Section ad√©quate: {result['resultat']['section_adequate']}")
                print(f"   Message: {result['resultat']['message']}")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_traitement_lot_assainissement():
    """Test du traitement par lot pour l'assainissement"""
    print("\nüìä Test du traitement par lot assainissement...")
    
    # Cr√©er un fichier CSV temporaire pour le test
    import tempfile
    import csv
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        writer = csv.writer(f)
        writer.writerow(['id', 'surface', 'coefficient_ruissellement', 'intensite_pluie', 'pente', 'rugosite'])
        writer.writerow([1, 1000.0, 0.9, 50.0, 0.02, 0.013])
        writer.writerow([2, 2000.0, 0.8, 60.0, 0.03, 0.015])
        temp_file = f.name
    
    try:
        with open(temp_file, 'rb') as f:
            files = {'file': f}
            response = requests.post(
                f"{API_BASE_URL}/api/assainissement/batch",
                files=files
            )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Traitement par lot assainissement r√©ussi")
                print(f"   √âl√©ments trait√©s: {result['total_traites']}")
                return True
            else:
                print(f"‚ùå Erreur traitement: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    finally:
        os.unlink(temp_file)

def test_traitement_lot_beton_arme():
    """Test du traitement par lot pour le b√©ton arm√©"""
    print("\nüìä Test du traitement par lot b√©ton arm√©...")
    
    import tempfile
    import csv
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        writer = csv.writer(f)
        writer.writerow(['id', 'Nu', 'Mu', 'b', 'h', 'L', 'k', 'fc28', 'fe'])
        writer.writerow([1, 500000, 50000, 0.3, 0.3, 3.0, 1.0, 25.0, 500.0])
        writer.writerow([2, 800000, 80000, 0.4, 0.4, 3.5, 1.0, 30.0, 500.0])
        temp_file = f.name
    
    try:
        with open(temp_file, 'rb') as f:
            files = {'file': f}
            response = requests.post(
                f"{API_BASE_URL}/api/beton_arme/batch",
                files=files
            )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Traitement par lot b√©ton arm√© r√©ussi")
                print(f"   Poteaux trait√©s: {result['total_traites']}")
                return True
            else:
                print(f"‚ùå Erreur traitement: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    finally:
        os.unlink(temp_file)

def test_traitement_lot_bois():
    """Test du traitement par lot pour le bois"""
    print("\nüìä Test du traitement par lot bois...")
    
    import tempfile
    import csv
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
        writer = csv.writer(f)
        writer.writerow(['id', 'longueur', 'b', 'h', 'classe_bois', 'charge_g', 'charge_q', 'classe_service'])
        writer.writerow([1, 4.0, 150, 200, 'C24', 2.5, 3.0, 2])
        writer.writerow([2, 5.0, 200, 250, 'C30', 3.0, 4.0, 2])
        temp_file = f.name
    
    try:
        with open(temp_file, 'rb') as f:
            files = {'file': f}
            response = requests.post(
                f"{API_BASE_URL}/api/bois/batch",
                files=files
            )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Traitement par lot bois r√©ussi")
                print(f"   √âl√©ments trait√©s: {result['total_traites']}")
                return True
            else:
                print(f"‚ùå Erreur traitement: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    finally:
        os.unlink(temp_file)

def test_radier_beton_arme():
    """Test du dimensionnement de radier"""
    print("\nüèóÔ∏è Test du dimensionnement de radier...")
    
    data = {
        "poteaux": [
            {"P_ser_kN": 500.0, "P_u_kN": 700.0},
            {"P_ser_kN": 600.0, "P_u_kN": 800.0},
            {"P_ser_kN": 400.0, "P_u_kN": 600.0}
        ],
        "dimensions_plan": {"A": 10.0, "B": 8.0},
        "sigma_sol_adm": 150.0,
        "fc28": 25.0,
        "fe": 500.0
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/beton_arme/radier",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Dimensionnement radier r√©ussi")
                print(f"   Surface: {result['resultat']['dimensions']['surface_m2']} m¬≤")
                print(f"   √âpaisseur: {result['resultat']['dimensions']['epaisseur_estimee_m']} m")
                print(f"   V√©rification sol: {result['resultat']['verification_sol']['verification_ok']}")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_etude_comparative_assainissement():
    """Test de l'√©tude comparative assainissement"""
    print("\nüíß Test de l'√©tude comparative assainissement...")
    
    data = {
        "surface": 1000.0,
        "coefficient_ruissellement": 0.9,
        "scenarios": [
            {"nom": "Sc√©nario 1", "intensite_pluie": 50.0, "pente": 0.02, "rugosite": 0.013},
            {"nom": "Sc√©nario 2", "intensite_pluie": 60.0, "pente": 0.03, "rugosite": 0.015},
            {"nom": "Sc√©nario 3", "intensite_pluie": 40.0, "pente": 0.01, "rugosite": 0.012}
        ]
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/assainissement/comparaison",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ √âtude comparative assainissement r√©ussi")
                print(f"   Sc√©narios analys√©s: {result['total_scenarios']}")
                print(f"   Sc√©narios r√©ussis: {result['scenarios_reussis']}")
                if result['analyse_comparative']:
                    print(f"   Variation d√©bit: {result['analyse_comparative']['variation_debit_pourcent']}%")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_calcul_idf():
    """Test du calcul IDF"""
    print("\nüåßÔ∏è Test du calcul IDF...")
    
    data = {
        "formule": "montana",
        "periode_retour": 10,
        "parametres": {"a": 100.0, "b": -0.5}
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/assainissement/calcul_idf",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ Calcul IDF r√©ussi")
                print(f"   Formule: {result['resultat']['formule']}")
                print(f"   Intensit√©: {result['resultat']['intensite_mmh']} mm/h")
                return True
            else:
                print(f"‚ùå Erreur calcul: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_generation_rapport_pdf():
    """Test de la g√©n√©ration de rapport PDF"""
    print("\nüìÑ Test de la g√©n√©ration de rapport PDF...")
    
    data = {
        "module": "assainissement",
        "donnees": {
            "surface": 1000.0,
            "coefficient_ruissellement": 0.9,
            "intensite_pluie": 50.0,
            "pente": 0.02,
            "rugosite": 0.013
        },
        "resultats": {
            "debit_ls": 12.5,
            "diametre_mm": 160,
            "vitesse_ms": 0.62
        }
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/rapports/generer_pdf",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result['success']:
                print("‚úÖ G√©n√©ration rapport PDF r√©ussi")
                print(f"   Fichier: {result['fichier']}")
                return True
            else:
                print(f"‚ùå Erreur g√©n√©ration: {result.get('error', 'Erreur inconnue')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_endpoints_avances_completes():
    """Test des endpoints avanc√©s complets"""
    print("\nüìä Test des endpoints avanc√©s complets...")
    
    endpoints = [
        "/api/assainissement/formules_idf",
        "/api/assainissement/formules_tc",
        "/api/beton_arme/materiaux",
        "/api/bois/classes_avancees",
        "/api/rapports/liste"
    ]
    
    success_count = 0
    for endpoint in endpoints:
        try:
            response = requests.get(f"{API_BASE_URL}{endpoint}")
            if response.status_code == 200:
                data = response.json()
                if endpoint == "/api/assainissement/formules_idf":
                    print(f"‚úÖ {endpoint}: {len(data)} formules IDF")
                elif endpoint == "/api/assainissement/formules_tc":
                    print(f"‚úÖ {endpoint}: {len(data)} formules Tc")
                elif endpoint == "/api/beton_arme/materiaux":
                    print(f"‚úÖ {endpoint}: {len(data['betons'])} b√©tons, {len(data['aciers'])} aciers")
                elif endpoint == "/api/bois/classes_avancees":
                    print(f"‚úÖ {endpoint}: {len(data)} classes de bois")
                elif endpoint == "/api/rapports/liste":
                    print(f"‚úÖ {endpoint}: {data['total']} rapport(s)")
                success_count += 1
            else:
                print(f"‚ùå {endpoint}: Erreur {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint}: Erreur {e}")
    
    return success_count == len(endpoints)

def main():
    """Fonction principale de test"""
    print("üß™ Tests de l'API Nanostruct Web Avanc√©e - Version Compl√®te")
    print("=" * 70)
    
    # Attendre que l'API soit pr√™te
    print("‚è≥ Attente du d√©marrage de l'API avanc√©e...")
    time.sleep(3)
    
    tests = [
        test_health,
        test_assainissement_avance,
        test_poteau_ba_avance,
        test_compression_centree,
        test_moment_poutre,
        test_flexion_bois_avance,
        test_traction_bois_avance,
        test_traitement_lot_assainissement,
        test_traitement_lot_beton_arme,
        test_traitement_lot_bois,
        test_radier_beton_arme,
        test_etude_comparative_assainissement,
        test_calcul_idf,
        test_generation_rapport_pdf,
        test_endpoints_avances_completes
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result if result is not None else False)
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}")
            results.append(False)
    
    # R√©sum√©
    print("\n" + "=" * 70)
    print("üìã R√âSUM√â DES TESTS AVANC√âS COMPLETS")
    print("=" * 70)
    
    test_names = [
        "Sant√© API Avanc√©e",
        "Calcul Assainissement Avanc√©",
        "Calcul Poteau BA Avanc√©",
        "Compression Centr√©e",
        "Moment Poutre",
        "Flexion Bois Avanc√©e",
        "Traction Bois Avanc√©e",
        "Traitement Lot Assainissement",
        "Traitement Lot B√©ton Arm√©",
        "Traitement Lot Bois",
        "Dimensionnement Radier",
        "√âtude Comparative Assainissement",
        "Calcul IDF",
        "G√©n√©ration Rapport PDF",
        "Endpoints Avanc√©s Complets"
    ]
    
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"{i+1:2d}. {name}: {status}")
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüìä R√©sultat global: {success_count}/{total_count} tests r√©ussis")
    
    if success_count == total_count:
        print("üéâ Tous les tests avanc√©s sont pass√©s ! La migration CLI‚ÜíWeb est COMPL√àTE !")
    elif success_count >= total_count * 0.8:
        print("‚úÖ La plupart des tests sont pass√©s. Migration quasi-compl√®te.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")

if __name__ == "__main__":
    main() 