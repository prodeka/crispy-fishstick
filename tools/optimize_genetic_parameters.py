#!/usr/bin/env python3
"""
Script d'optimisation des param√®tres de l'algorithme g√©n√©tique LCPI.

Ce script teste diff√©rentes combinaisons de param√®tres pour optimiser
le compromis entre temps de calcul et qualit√© de la solution.
"""

import os
import sys
import json
import subprocess
import time
from pathlib import Path
from typing import Dict, Any, List, Tuple, Optional
from datetime import datetime
import itertools

# Forcer l'encodage UTF-8 pour le terminal
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    
    # Forcer l'encodage de la console Windows
    try:
        import subprocess
        subprocess.run(['chcp', '65001'], shell=True, check=True, capture_output=True)
    except:
        pass

# Ajouter le r√©pertoire src au path
ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(ROOT / "src"))

def load_harmonized_configs() -> Dict[str, Any]:
    """Charge les configurations harmonis√©es."""
    configs = {}
    
    # Charger la configuration des param√®tres de simulation
    sim_config_path = "harmonized_simulation_config.json"
    if Path(sim_config_path).exists():
        with open(sim_config_path, 'r', encoding='utf-8') as f:
            configs["simulation"] = json.load(f)
        print(f"‚úÖ Configuration simulation charg√©e: {sim_config_path}")
    else:
        print(f"‚ö†Ô∏è Configuration simulation non trouv√©e: {sim_config_path}")
    
    # Charger la configuration des contraintes hydrauliques
    constraints_config_path = "harmonized_hydraulic_constraints.json"
    if Path(constraints_config_path).exists():
        with open(constraints_config_path, 'r', encoding='utf-8') as f:
            configs["constraints"] = json.load(f)
        print(f"‚úÖ Configuration contraintes charg√©e: {constraints_config_path}")
    else:
        print(f"‚ö†Ô∏è Configuration contraintes non trouv√©e: {constraints_config_path}")
    
    return configs

def find_test_network() -> Path:
    """Trouve un r√©seau de test appropri√©."""
    candidates = [
        Path("test_validation/hardy_cross_test.yml"),
        Path("examples/hardy_cross_test.yml"),
        Path("examples/bismark-Administrator.inp"),
        Path("bismark_inp.inp")
    ]
    
    for candidate in candidates:
        if candidate.exists():
            print(f"‚úÖ R√©seau de test trouv√©: {candidate}")
            return candidate
    
    # Cr√©er un r√©seau de test simple si aucun n'existe
    print("‚ö†Ô∏è Aucun r√©seau de test trouv√©, cr√©ation d'un r√©seau simple...")
    return create_simple_test_network()

def create_simple_test_network() -> Path:
    """Cr√©e un r√©seau de test simple pour l'optimisation des param√®tres."""
    
    simple_network = {
        "nodes": {
            "source": {"type": "tank", "elevation": 100.0, "demand": 0.0},
            "n1": {"type": "junction", "elevation": 90.0, "demand": 0.05},
            "n2": {"type": "junction", "elevation": 85.0, "demand": 0.03},
            "n3": {"type": "junction", "elevation": 80.0, "demand": 0.02}
        },
        "links": {
            "l1": {"from": "source", "to": "n1", "length": 500.0, "diameter": 0.2},
            "l2": {"from": "n1", "to": "n2", "length": 300.0, "diameter": 0.15},
            "l3": {"from": "n2", "to": "n3", "length": 400.0, "diameter": 0.1}
        },
        "tanks": {
            "source": {"elevation": 100.0, "initial_level": 95.0, "min_level": 90.0, "max_level": 100.0}
        }
    }
    
    output_path = Path("simple_test_network.yml")
    try:
        import yaml
        with open(output_path, 'w', encoding='utf-8') as f:
            yaml.dump(simple_network, f, default_flow_style=False, indent=2)
        print(f"‚úÖ R√©seau de test simple cr√©√©: {output_path}")
        return output_path
    except ImportError:
        # Fallback JSON si YAML n'est pas disponible
        with open(output_path.with_suffix('.json'), 'w', encoding='utf-8') as f:
            json.dump(simple_network, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ R√©seau de test simple cr√©√©: {output_path.with_suffix('.json')}")
        return output_path.with_suffix('.json')

def define_parameter_combinations() -> List[Dict[str, Any]]:
    """D√©finit les combinaisons de param√®tres √† tester."""
    
    # Param√®tres de base de l'algorithme g√©n√©tique (respectant les contraintes Pydantic)
    base_params = {
        "generations": [10, 15, 20, 25, 30, 40],  # Minimum 10
        "population": [20, 30, 40, 50, 60, 80],   # Minimum 20
        "mutation_rate": [0.1, 0.15, 0.2],
        "crossover_rate": [0.7, 0.8, 0.9],
        "elite_size": [2, 3, 4]
    }
    
    # Combinaisons √† tester (limit√©es pour √©viter une explosion combinatoire)
    combinations = []
    
    # Combinaisons prioritaires (petites populations, peu de g√©n√©rations)
    fast_combinations = [
        {"generations": 10, "population": 20, "mutation_rate": 0.15, "crossover_rate": 0.8, "elite_size": 2},
        {"generations": 15, "population": 25, "mutation_rate": 0.15, "crossover_rate": 0.8, "elite_size": 3},
        {"generations": 20, "population": 30, "mutation_rate": 0.2, "crossover_rate": 0.8, "elite_size": 3},
    ]
    
    # Combinaisons √©quilibr√©es
    balanced_combinations = [
        {"generations": 20, "population": 40, "mutation_rate": 0.15, "crossover_rate": 0.8, "elite_size": 4},
        {"generations": 25, "population": 50, "mutation_rate": 0.1, "crossover_rate": 0.9, "elite_size": 4},
    ]
    
    # Combinaisons de qualit√© (plus de temps, meilleure qualit√©)
    quality_combinations = [
        {"generations": 30, "population": 60, "mutation_rate": 0.1, "crossover_rate": 0.9, "elite_size": 5},
        {"generations": 40, "population": 80, "mutation_rate": 0.08, "crossover_rate": 0.9, "elite_size": 6},
    ]
    
    combinations.extend(fast_combinations)
    combinations.extend(balanced_combinations)
    combinations.extend(quality_combinations)
    
    print(f"‚úÖ {len(combinations)} combinaisons de param√®tres d√©finies:")
    for i, combo in enumerate(combinations):
        print(f"   {i+1}. G:{combo['generations']}, P:{combo['population']}, M:{combo['mutation_rate']}, C:{combo['crossover_rate']}, E:{combo['elite_size']}")
    
    return combinations

def run_optimization_with_params(input_path: Path, params: Dict[str, Any], 
                                configs: Dict[str, Any], output_prefix: str) -> Dict[str, Any]:
    """Ex√©cute l'optimisation avec des param√®tres sp√©cifiques."""
    
    print(f"\nüîÑ Test avec param√®tres:")
    print(f"   ‚Ä¢ G√©n√©rations: {params['generations']}")
    print(f"   ‚Ä¢ Population: {params['population']}")
    print(f"   ‚Ä¢ Taux mutation: {params['mutation_rate']}")
    print(f"   ‚Ä¢ Taux croisement: {params['crossover_rate']}")
    print(f"   ‚Ä¢ Taille √©lite: {params['elite_size']}")
    
    # Param√®tres de simulation harmonis√©s
    tolerance = configs.get("simulation", {}).get("convergence", {}).get("tolerance", 1e-6)
    max_iterations = configs.get("simulation", {}).get("convergence", {}).get("max_iterations", 200)
    
    # Contraintes harmonis√©es
    constraints = configs.get("constraints", {})
    pressure_min = constraints.get("pressure", {}).get("min_mce", 10.0)
    velocity_max = constraints.get("velocity", {}).get("max_ms", 3.0)
    velocity_min = constraints.get("velocity", {}).get("min_ms", 0.3)
    
    # Commande d'optimisation
    cmd = [
        sys.executable, "-m", "lcpi.aep.cli", "network-optimize-unified",
        str(input_path),
        "--method", "genetic",
        "--generations", str(params['generations']),
        "--population", str(params['population']),
        "--tolerance", str(tolerance),
        "--max-iterations", str(max_iterations),
        "--solver", "lcpi",
        "--pression-min", str(pressure_min),
        "--vitesse-max", str(velocity_max),
        "--vitesse-min", str(velocity_min),
        "--show-stats",
        "--output", f"{output_prefix}_G{params['generations']}_P{params['population']}",
        "--no-log"
    ]
    
    # Ex√©cuter la commande
    start_time = time.time()
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=300)
        execution_time = time.time() - start_time
        
        print(f"   ‚úÖ Ex√©cution r√©ussie en {execution_time:.1f}s")
        
        return {
            "success": True,
            "execution_time": execution_time,
            "params": params,
            "output_file": f"{output_prefix}_G{params['generations']}_P{params['population']}",
            "stdout": result.stdout,
            "stderr": result.stderr
        }
        
    except subprocess.TimeoutExpired:
        print(f"   ‚è±Ô∏è Timeout apr√®s 300s")
        return {"success": False, "error": "timeout", "params": params}
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Erreur d'ex√©cution: {e}")
        return {"success": False, "error": str(e), "params": params, "returncode": e.returncode}
    except Exception as e:
        print(f"   ‚ùå Exception: {e}")
        return {"success": False, "error": str(e), "params": params}

def load_and_analyze_results(output_file: str) -> Optional[Dict[str, Any]]:
    """Charge et analyse les r√©sultats d'optimisation."""
    
    result_paths = [
        Path(f"{output_file}.json"),
        Path("results") / f"{output_file}.json"
    ]
    
    for result_path in result_paths:
        if result_path.exists():
            try:
                with open(result_path, 'r', encoding='utf-8') as f:
                    results = json.load(f)
                
                # Analyser les r√©sultats
                proposals = results.get("proposals", [])
                if proposals:
                    best = proposals[0]
                    
                    analysis = {
                        "output_file": str(result_path),
                        "proposals_count": len(proposals),
                        "best_solution": {
                            "CAPEX": best.get("CAPEX", 0),
                            "constraints_ok": best.get("constraints_ok", False),
                            "feasibility_score": best.get("feasibility_score", 0),
                            "diameter_distribution": best.get("diameter_distribution", {})
                        },
                        "statistics": {}
                    }
                    
                    # Statistiques sur toutes les solutions
                    costs = [p.get("CAPEX", 0) for p in proposals if p.get("CAPEX", 0) > 0]
                    feasible_count = sum(1 for p in proposals if p.get("constraints_ok", False))
                    
                    if costs:
                        analysis["statistics"] = {
                            "cost_min": min(costs),
                            "cost_max": max(costs),
                            "cost_avg": sum(costs) / len(costs),
                            "feasible_count": feasible_count,
                            "feasible_ratio": feasible_count / len(proposals)
                        }
                    
                    return analysis
                    
            except Exception as e:
                print(f"   ‚ùå Erreur lecture {result_path}: {e}")
    
    return None

def evaluate_parameter_combination(results: Dict[str, Any], 
                                 execution_time: float) -> Dict[str, Any]:
    """√âvalue la qualit√© d'une combinaison de param√®tres."""
    
    evaluation = {
        "params": results["params"],
        "execution_time": execution_time,
        "solution_quality": 0.0,
        "efficiency_score": 0.0,
        "overall_score": 0.0
    }
    
    # Score de qualit√© de la solution (0-100)
    best_solution = results.get("best_solution", {})
    constraints_ok = best_solution.get("constraints_ok", False)
    feasibility_score = best_solution.get("feasibility_score", 0)
    
    if constraints_ok:
        evaluation["solution_quality"] = 80 + (feasibility_score * 20)  # 80-100 si faisable
    else:
        evaluation["solution_quality"] = feasibility_score * 40  # 0-40 si non faisable
    
    # Score d'efficacit√© (0-100) - bas√© sur le temps et la population
    population = results["params"]["population"]
    generations = results["params"]["generations"]
    
    # Facteur de complexit√© (plus la population et les g√©n√©rations sont √©lev√©es, plus c'est complexe)
    complexity_factor = (population * generations) / 1000.0
    
    # Score d'efficacit√© inversement proportionnel √† la complexit√© et au temps
    if execution_time > 0:
        efficiency_score = 100 / (1 + complexity_factor + (execution_time / 60.0))
        evaluation["efficiency_score"] = min(100, efficiency_score)
    
    # Score global (moyenne pond√©r√©e)
    evaluation["overall_score"] = (
        evaluation["solution_quality"] * 0.6 + 
        evaluation["efficiency_score"] * 0.4
    )
    
    return evaluation

def rank_parameter_combinations(evaluations: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """Classe les combinaisons de param√®tres par score global."""
    
    # Filtrer les √©valuations r√©ussies
    successful_evaluations = [e for e in evaluations if "overall_score" in e]
    
    if not successful_evaluations:
        return []
    
    # Trier par score global d√©croissant
    ranked = sorted(successful_evaluations, key=lambda x: x["overall_score"], reverse=True)
    
    print(f"\nüèÜ CLASSEMENT DES COMBINAISONS DE PARAM√àTRES")
    print("=" * 80)
    
    for i, eval_result in enumerate(ranked[:10]):  # Top 10
        params = eval_result["params"]
        print(f"{i+1:2d}. Score: {eval_result['overall_score']:5.1f} | "
              f"Qualit√©: {eval_result['solution_quality']:5.1f} | "
              f"Efficacit√©: {eval_result['efficiency_score']:5.1f} | "
              f"Temps: {eval_result['execution_time']:5.1f}s | "
              f"G:{params['generations']:2d}, P:{params['population']:2d}, "
              f"M:{params['mutation_rate']:4.2f}, C:{params['crossover_rate']:4.2f}, "
              f"E:{params['elite_size']:1d}")
    
    return ranked

def generate_recommendations(ranked_evaluations: List[Dict[str, Any]]) -> None:
    """G√©n√®re des recommandations bas√©es sur les meilleures combinaisons."""
    
    if not ranked_evaluations:
        print("‚ùå Aucune √©valuation r√©ussie pour g√©n√©rer des recommandations")
        return
    
    print(f"\nüí° RECOMMANDATIONS D'OPTIMISATION")
    print("=" * 60)
    
    best = ranked_evaluations[0]
    best_params = best["params"]
    
    print(f"ü•á Meilleure combinaison:")
    print(f"   ‚Ä¢ G√©n√©rations: {best_params['generations']}")
    print(f"   ‚Ä¢ Population: {best_params['population']}")
    print(f"   ‚Ä¢ Taux mutation: {best_params['mutation_rate']}")
    print(f"   ‚Ä¢ Taux croisement: {best_params['crossover_rate']}")
    print(f"   ‚Ä¢ Taille √©lite: {best_params['elite_size']}")
    print(f"   ‚Ä¢ Score global: {best['overall_score']:.1f}")
    print(f"   ‚Ä¢ Temps d'ex√©cution: {best['execution_time']:.1f}s")
    
    # Analyser les tendances
    print(f"\nüìä Tendances observ√©es:")
    
    # Analyser la taille de population
    populations = [e["params"]["population"] for e in ranked_evaluations[:5]]
    avg_population = sum(populations) / len(populations)
    print(f"   ‚Ä¢ Population moyenne (top 5): {avg_population:.0f}")
    
    # Analyser le nombre de g√©n√©rations
    generations = [e["params"]["generations"] for e in ranked_evaluations[:5]]
    avg_generations = sum(generations) / len(generations)
    print(f"   ‚Ä¢ G√©n√©rations moyennes (top 5): {avg_generations:.0f}")
    
    # Recommandations sp√©cifiques
    print(f"\nüîß Recommandations d'impl√©mentation:")
    
    if best_params["population"] <= 30:
        print(f"   ‚Ä¢ Utiliser une population mod√©r√©e ({best_params['population']}) pour un bon compromis")
    else:
        print(f"   ‚Ä¢ Population √©lev√©e ({best_params['population']}) - privil√©gier la qualit√©")
    
    if best_params["generations"] <= 20:
        print(f"   ‚Ä¢ Nombre de g√©n√©rations limit√© ({best_params['generations']}) - optimisation rapide")
    else:
        print(f"   ‚Ä¢ Nombre de g√©n√©rations √©lev√© ({best_params['generations']}) - convergence lente")
    
    if best_params["mutation_rate"] <= 0.15:
        print(f"   ‚Ä¢ Taux de mutation conservateur ({best_params['mutation_rate']}) - stabilit√©")
    else:
        print(f"   ‚Ä¢ Taux de mutation √©lev√© ({best_params['mutation_rate']}) - exploration")
    
    print(f"\nüìù Actions recommand√©es:")
    print(f"   1. Impl√©menter la meilleure combinaison dans genetic_algorithm.py")
    print(f"   2. Tester sur des r√©seaux plus complexes")
    print(f"   3. Ajuster selon les contraintes de temps du projet")
    print(f"   4. Documenter les param√®tres optimaux")

def save_optimization_report(evaluations: List[Dict[str, Any]], 
                            ranked_evaluations: List[Dict[str, Any]],
                            output_path: str = "genetic_parameters_optimization_report.json") -> bool:
    """Sauvegarde le rapport d'optimisation des param√®tres."""
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "total_combinations_tested": len(evaluations),
        "successful_evaluations": len(ranked_evaluations),
        "evaluations": evaluations,
        "ranked_evaluations": ranked_evaluations,
        "best_combination": ranked_evaluations[0] if ranked_evaluations else None,
        "metadata": {
            "version": "1.0",
            "description": "Rapport d'optimisation des param√®tres de l'algorithme g√©n√©tique LCPI"
        }
    }
    
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Rapport d'optimisation sauvegard√©: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")
        return False

def main():
    """Fonction principale."""
    print("üöÄ OPTIMISATION DES PARAM√àTRES DE L'ALGORITHME G√âN√âTIQUE LCPI")
    print("=" * 80)
    
    try:
        # Charger les configurations harmonis√©es
        configs = load_harmonized_configs()
        
        # Trouver le r√©seau de test
        test_network = find_test_network()
        
        # D√©finir les combinaisons de param√®tres √† tester
        parameter_combinations = define_parameter_combinations()
        
        # Pr√©fixe de sortie avec timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_prefix = f"param_optimization_{timestamp}"
        
        print(f"\nüéØ Configuration de test:")
        print(f"   ‚Ä¢ R√©seau: {test_network}")
        print(f"   ‚Ä¢ Pr√©fixe sortie: {output_prefix}")
        print(f"   ‚Ä¢ Combinaisons √† tester: {len(parameter_combinations)}")
        
        # Tester chaque combinaison de param√®tres
        evaluations = []
        
        for i, params in enumerate(parameter_combinations):
            print(f"\n{'='*60}")
            print(f"üß™ Test {i+1}/{len(parameter_combinations)}")
            print(f"{'='*60}")
            
            # Ex√©cuter l'optimisation
            result = run_optimization_with_params(test_network, params, configs, output_prefix)
            
            if result.get("success", False):
                # Charger et analyser les r√©sultats
                analysis = load_and_analyze_results(result["output_file"])
                
                if analysis:
                    # √âvaluer la combinaison de param√®tres
                    evaluation = evaluate_parameter_combination(analysis, result["execution_time"])
                    evaluations.append(evaluation)
                    
                    print(f"   üìä √âvaluation:")
                    print(f"      ‚Ä¢ Qualit√© solution: {evaluation['solution_quality']:.1f}")
                    print(f"      ‚Ä¢ Score efficacit√©: {evaluation['efficiency_score']:.1f}")
                    print(f"      ‚Ä¢ Score global: {evaluation['overall_score']:.1f}")
                else:
                    print(f"   ‚ùå Impossible d'analyser les r√©sultats")
            else:
                print(f"   ‚ùå √âchec de l'optimisation: {result.get('error', 'unknown')}")
        
        # Classer les combinaisons de param√®tres
        ranked_evaluations = rank_parameter_combinations(evaluations)
        
        # G√©n√©rer les recommandations
        generate_recommendations(ranked_evaluations)
        
        # Sauvegarder le rapport
        save_optimization_report(evaluations, ranked_evaluations)
        
        print(f"\n‚úÖ Optimisation des param√®tres termin√©e avec succ√®s!")
        print(f"   ‚Ä¢ Combinaisons test√©es: {len(parameter_combinations)}")
        print(f"   ‚Ä¢ √âvaluations r√©ussies: {len(ranked_evaluations)}")
        
        if ranked_evaluations:
            best = ranked_evaluations[0]
            print(f"   ‚Ä¢ Meilleur score: {best['overall_score']:.1f}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'optimisation des param√®tres: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
