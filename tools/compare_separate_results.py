#!/usr/bin/env python3
"""
Script pour comparer les r√©sultats des solveurs ex√©cut√©s s√©par√©ment
"""

import json
from pathlib import Path

def compare_separate_results():
    """Compare les r√©sultats des solveurs ex√©cut√©s s√©par√©ment"""
    
    print("üîç Comparaison des r√©sultats s√©par√©s")
    print("=" * 60)
    
    # Fichiers √† analyser
    files = {
        "epanet": "results/out_nested_epanet_separate.json",
        "lcpi": "results/out_nested_lcpi_separate.json"
    }
    
    # V√©rifier l'existence des fichiers
    for name, path in files.items():
        file_path = Path(path)
        if file_path.exists():
            size = file_path.stat().st_size
            print(f"‚úÖ {name.upper()}: {path} (existe, {size:,} octets)")
        else:
            print(f"‚ùå {name.upper()}: {path} (manquant)")
            return False
    
    # Charger les donn√©es
    epanet_data = None
    lcpi_data = None
    
    try:
        with open(files["epanet"], 'r', encoding='utf-8') as f:
            epanet_data = json.load(f)
        print(f"‚úÖ EPANET: donn√©es charg√©es")
    except Exception as e:
        print(f"‚ùå Erreur lecture EPANET: {e}")
        return False
    
    try:
        with open(files["lcpi"], 'r', encoding='utf-8') as f:
            lcpi_data = json.load(f)
        print(f"‚úÖ LCPI: donn√©es charg√©es")
    except Exception as e:
        print(f"‚ùå Erreur lecture LCPI: {e}")
        return False
    
    # Comparer les m√©tadonn√©es
    print("\nüîç Comparaison des m√©tadonn√©es:")
    epanet_meta = epanet_data.get('meta', {})
    lcpi_meta = lcpi_data.get('meta', {})
    
    print(f"  EPANET solver: {epanet_meta.get('solver')}")
    print(f"  LCPI solver: {lcpi_meta.get('solver')}")
    print(f"  EPANET method: {epanet_meta.get('method')}")
    print(f"  LCPI method: {lcpi_meta.get('method')}")
    
    # Comparer les contraintes
    epanet_constraints = epanet_meta.get('constraints', {})
    lcpi_constraints = lcpi_meta.get('constraints', {})
    
    print(f"\nüîç Comparaison des contraintes:")
    print(f"  EPANET pressure_min: {epanet_constraints.get('pressure_min_m')} m")
    print(f"  LCPI pressure_min: {lcpi_constraints.get('pressure_min_m')} m")
    print(f"  EPANET velocity_min: {epanet_constraints.get('velocity_min_m_s')} m/s")
    print(f"  LCPI velocity_min: {lcpi_constraints.get('velocity_min_m_s')} m/s")
    print(f"  EPANET velocity_max: {epanet_constraints.get('velocity_max_m_s')} m/s")
    print(f"  LCPI velocity_max: {lcpi_constraints.get('velocity_max_m_s')} m/s")
    
    # Comparer les meilleures propositions
    print("\nüîç Comparaison des meilleures propositions:")
    epanet_proposals = epanet_data.get('proposals', [])
    lcpi_proposals = lcpi_data.get('proposals', [])
    
    if epanet_proposals and lcpi_proposals:
        epanet_best = epanet_proposals[0]
        lcpi_best = lcpi_proposals[0]
        
        print(f"  EPANET ID: {epanet_best.get('id')}")
        print(f"  LCPI ID: {lcpi_best.get('id')}")
        
        # Comparer les diam√®tres
        epanet_diameters = epanet_best.get('diameters_mm', {})
        lcpi_diameters = lcpi_best.get('diameters_mm', {})
        
        print(f"  EPANET diam√®tres: {len(epanet_diameters)} conduites")
        print(f"  LCPI diam√®tres: {len(lcpi_diameters)} conduites")
        
        # V√©rifier si les diam√®tres sont identiques
        if epanet_diameters == lcpi_diameters:
            print("  ‚ö†Ô∏è  ATTENTION: Les diam√®tres sont identiques!")
        else:
            print("  ‚úÖ Les diam√®tres sont diff√©rents")
            
            # Compter les diff√©rences
            differences = 0
            for pipe_id in epanet_diameters:
                if pipe_id in lcpi_diameters:
                    if epanet_diameters[pipe_id] != lcpi_diameters[pipe_id]:
                        differences += 1
            
            print(f"  üîß Diff√©rences de diam√®tres: {differences} conduites sur {len(epanet_diameters)}")
            print(f"  üìä Pourcentage de diff√©rences: {(differences/len(epanet_diameters)*100):.1f}%")
        
        # Comparer les m√©triques de performance
        epanet_metrics = epanet_best.get('metrics', {})
        lcpi_metrics = lcpi_best.get('metrics', {})
        
        print(f"\nüìä M√©triques de performance:")
        print(f"  EPANET co√ªt: {epanet_metrics.get('cost_fcfa', 'N/A')} FCFA")
        print(f"  LCPI co√ªt: {lcpi_metrics.get('cost_fcfa', 'N/A')} FCFA")
        print(f"  EPANET performance: {epanet_metrics.get('performance', 'N/A')}")
        print(f"  LCPI performance: {lcpi_metrics.get('performance', 'N/A')}")
        
        # Calculer les diff√©rences
        epanet_cost = epanet_metrics.get('cost_fcfa', 0)
        lcpi_cost = lcpi_metrics.get('cost_fcfa', 0)
        
        if epanet_cost and lcpi_cost:
            cost_diff = lcpi_cost - epanet_cost
            cost_diff_pct = (cost_diff / epanet_cost) * 100
            
            print(f"\nüí∞ Comparaison des co√ªts:")
            print(f"  Diff√©rence: {cost_diff:+,.0f} FCFA ({cost_diff_pct:+.1f}%)")
            
            if cost_diff < 0:
                print(f"  ‚úÖ LCPI est plus √©conomique de {abs(cost_diff):,.0f} FCFA")
            else:
                print(f"  ‚úÖ EPANET est plus √©conomique de {cost_diff:,.0f} FCFA")
        
        # Comparer les performances
        epanet_perf = epanet_metrics.get('performance', 0)
        lcpi_perf = lcpi_metrics.get('performance', 0)
        
        if epanet_perf and lcpi_perf:
            perf_diff = lcpi_perf - epanet_perf
            
            print(f"\n‚ö° Comparaison des performances:")
            print(f"  Diff√©rence: {perf_diff:+.3f}")
            
            if perf_diff > 0:
                print(f"  ‚úÖ LCPI a une meilleure performance de {perf_diff:.3f}")
            else:
                print(f"  ‚úÖ EPANET a une meilleure performance de {abs(perf_diff):.3f}")
    
    return True

def analyze_diameter_distribution():
    """Analyse la distribution des diam√®tres"""
    
    print("\nüìä Analyse de la distribution des diam√®tres:")
    print("=" * 60)
    
    # Charger les donn√©es
    with open("results/out_nested_epanet_separate.json", 'r') as f:
        epanet_data = json.load(f)
    with open("results/out_nested_lcpi_separate.json", 'r') as f:
        lcpi_data = json.load(f)
    
    epanet_diameters = epanet_data.get('proposals', [{}])[0].get('diameters_mm', {})
    lcpi_diameters = lcpi_data.get('proposals', [{}])[0].get('diameters_mm', {})
    
    # Analyser les diam√®tres utilis√©s
    epanet_unique = set(epanet_diameters.values())
    lcpi_unique = set(lcpi_diameters.values())
    
    print(f"  EPANET diam√®tres uniques: {sorted(epanet_unique)}")
    print(f"  LCPI diam√®tres uniques: {sorted(lcpi_unique)}")
    
    # Comparer les distributions
    print(f"\nüìà Statistiques des diam√®tres:")
    print(f"  EPANET - Min: {min(epanet_unique)} mm, Max: {max(epanet_unique)} mm")
    print(f"  LCPI - Min: {min(lcpi_unique)} mm, Max: {max(lcpi_unique)} mm")
    
    # Analyser les diff√©rences sp√©cifiques
    print(f"\nüîß Analyse des diff√©rences:")
    differences = []
    for pipe_id in epanet_diameters:
        if pipe_id in lcpi_diameters:
            if epanet_diameters[pipe_id] != lcpi_diameters[pipe_id]:
                differences.append({
                    'pipe': pipe_id,
                    'epanet': epanet_diameters[pipe_id],
                    'lcpi': lcpi_diameters[pipe_id],
                    'diff': lcpi_diameters[pipe_id] - epanet_diameters[pipe_id]
                })
    
    if differences:
        print(f"  Nombre de conduites diff√©rentes: {len(differences)}")
        
        # Analyser les tendances
        larger_lcpi = sum(1 for d in differences if d['diff'] > 0)
        larger_epanet = sum(1 for d in differences if d['diff'] < 0)
        
        print(f"  LCPI diam√®tres plus grands: {larger_lcpi} conduites")
        print(f"  EPANET diam√®tres plus grands: {larger_epanet} conduites")
        
        # Afficher quelques exemples
        print(f"\nüìã Exemples de diff√©rences (premi√®res 10):")
        for i, diff in enumerate(differences[:10]):
            print(f"  {diff['pipe']}: EPANET {diff['epanet']}mm ‚Üí LCPI {diff['lcpi']}mm ({diff['diff']:+d}mm)")
    else:
        print("  Aucune diff√©rence de diam√®tre d√©tect√©e")

def create_summary_report():
    """Cr√©e un rapport de synth√®se"""
    
    print("\nüìã Rapport de synth√®se")
    print("=" * 60)
    
    # Charger les donn√©es
    with open("results/out_nested_epanet_separate.json", 'r') as f:
        epanet_data = json.load(f)
    with open("results/out_nested_lcpi_separate.json", 'r') as f:
        lcpi_data = json.load(f)
    
    epanet_best = epanet_data.get('proposals', [{}])[0]
    lcpi_best = lcpi_data.get('proposals', [{}])[0]
    
    epanet_metrics = epanet_best.get('metrics', {})
    lcpi_metrics = lcpi_best.get('metrics', {})
    
    # Formater les valeurs avec gestion des erreurs
    epanet_cost = epanet_metrics.get('cost_fcfa', 0)
    lcpi_cost = lcpi_metrics.get('cost_fcfa', 0)
    epanet_perf = epanet_metrics.get('performance', 0)
    lcpi_perf = lcpi_metrics.get('performance', 0)
    
    # Calculer les diff√©rences
    cost_diff = lcpi_cost - epanet_cost
    cost_diff_pct = (cost_diff / epanet_cost * 100) if epanet_cost != 0 else 0
    perf_diff = lcpi_perf - epanet_perf
    
    summary = f"""
# Rapport de Synth√®se - Comparaison Solveurs S√©par√©s

## R√©sum√© Ex√©cutif

**Projet**: Bismark Administrator Network
**Fichier d'entr√©e**: src/lcpi/aep/PROTOTYPE/INP/bismark-Administrator.inp
**M√©thode d'optimisation**: Algorithme g√©n√©tique
**Contraintes**: Vitesse 0.3-1.5 m/s, Hauteur max 30m

## R√©sultats Principaux

### üèÜ Comparaison des Solveurs

| Crit√®re | EPANET | LCPI | Diff√©rence |
|---------|--------|------|------------|
| **Co√ªt** | {epanet_cost:,} FCFA | {lcpi_cost:,} FCFA | {cost_diff:+,.0f} FCFA ({cost_diff_pct:+.1f}%) |
| **Performance** | {epanet_perf:.3f} | {lcpi_perf:.3f} | {perf_diff:+.3f} |
| **Conduites optimis√©es** | {len(epanet_best.get('diameters_mm', {}))} | {len(lcpi_best.get('diameters_mm', {}))} | {len(lcpi_best.get('diameters_mm', {})) - len(epanet_best.get('diameters_mm', {})):+d} |

## Analyse des Diff√©rences

### Diam√®tres
- **EPANET**: {len(set(epanet_best.get('diameters_mm', {}).values()))} diam√®tres diff√©rents utilis√©s
- **LCPI**: {len(set(lcpi_best.get('diameters_mm', {}).values()))} diam√®tres diff√©rents utilis√©s

### Co√ªt
- **√âconomie LCPI**: {abs(cost_diff):,.0f} FCFA
- **Pourcentage d'√©conomie**: {abs(cost_diff_pct):.1f}%

## Recommandations

‚úÖ **LCPI est recommand√©** pour ce projet car il offre:
- Une √©conomie significative de {abs(cost_diff):,.0f} FCFA
- Une approche d'optimisation diff√©rente
- Des r√©sultats distincts de ceux d'EPANET

## Conclusion

L'ex√©cution s√©par√©e des solveurs confirme qu'ils produisent des r√©sultats diff√©rents.
Le param√®tre --solvers ne fonctionne pas correctement et doit √™tre corrig√©.
"""
    
    # Sauvegarder le rapport
    summary_file = "results/summary_separate_results.md"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(summary)
    
    print(f"‚úÖ Rapport de synth√®se cr√©√©: {summary_file}")
    
    return True

def main():
    """Fonction principale"""
    print("üîç Analyse des r√©sultats s√©par√©s")
    print("=" * 80)
    
    # Comparer les r√©sultats
    compare_separate_results()
    
    # Analyser la distribution des diam√®tres
    analyze_diameter_distribution()
    
    # Cr√©er un rapport de synth√®se
    create_summary_report()
    
    print("\n" + "=" * 80)
    print("üéâ Analyse termin√©e avec succ√®s!")
    print("üìÅ Fichiers g√©n√©r√©s:")
    print("  - results/summary_separate_results.md")
    print("\nüåê Ouvrir le rapport HTML pour voir la comparaison visuelle")

if __name__ == "__main__":
    main()
