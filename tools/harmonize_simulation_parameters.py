#!/usr/bin/env python3
"""
Script d'harmonisation des param√®tres de simulation entre EPANET et LCPI Hardy-Cross.

Ce script v√©rifie et harmonise les param√®tres de convergence, tol√©rance et it√©rations
entre les deux solveurs pour assurer une comparaison √©quitable.
"""

import os
import sys
import json
from pathlib import Path
from typing import Dict, Any, Tuple

# Forcer l'encodage UTF-8 pour le terminal
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    
    # Forcer l'encodage de la console Windows
    try:
        import subprocess
        subprocess.run(['chcp', '65001'], shell=True, check=True, capture_output=True)
    except:
        pass

# Ajouter le r√©pertoire src au path
ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(ROOT / "src"))

def get_lcpi_defaults() -> Dict[str, Any]:
    """R√©cup√®re les param√®tres par d√©faut de LCPI Hardy-Cross."""
    try:
        from lcpi.aep.core.models import ConfigurationOptimisation
        from lcpi.aep.core.pydantic_models import HardyCrossConfig
        
        # Param√®tres par d√©faut de LCPI
        lcpi_defaults = {
            "tolerance": 1e-6,
            "max_iterations": 200,
            "formula": "hazen_williams",
            "convergence_criteria": "relative_error"
        }
        
        print(f"‚úÖ Param√®tres LCPI Hardy-Cross par d√©faut:")
        for key, value in lcpi_defaults.items():
            print(f"   ‚Ä¢ {key}: {value}")
            
        return lcpi_defaults
        
    except ImportError as e:
        print(f"‚ö†Ô∏è Impossible d'importer les mod√®les LCPI: {e}")
        return {
            "tolerance": 1e-6,
            "max_iterations": 200,
            "formula": "hazen_williams"
        }

def get_epanet_defaults() -> Dict[str, Any]:
    """R√©cup√®re les param√®tres par d√©faut d'EPANET."""
    try:
        # Constantes EPANET standard
        epanet_defaults = {
            "tolerance": 1e-6,  # Tol√©rance de convergence par d√©faut
            "max_iterations": 100,  # Nombre maximum d'it√©rations
            "formula": "hazen_williams",  # Formule de perte de charge
            "convergence_criteria": "relative_error"  # Crit√®re de convergence
        }
        
        print(f"‚úÖ Param√®tres EPANET par d√©faut:")
        for key, value in epanet_defaults.items():
            print(f"   ‚Ä¢ {key}: {value}")
            
        return epanet_defaults
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des param√®tres EPANET: {e}")
        return {}

def check_epanet_wrapper_config() -> Dict[str, Any]:
    """V√©rifie la configuration du wrapper EPANET."""
    try:
        from lcpi.aep.core.epanet_wrapper import EpanetWrapper
        
        wrapper = EpanetWrapper()
        available = wrapper.is_available()
        version = wrapper.get_version()
        
        print(f"‚úÖ Wrapper EPANET:")
        print(f"   ‚Ä¢ Disponible: {available}")
        print(f"   ‚Ä¢ Version: {version}")
        
        return {
            "available": available,
            "version": version
        }
        
    except ImportError as e:
        print(f"‚ö†Ô∏è Impossible d'importer le wrapper EPANET: {e}")
        return {"available": False, "version": "unknown"}

def check_constraints_handler() -> Dict[str, Any]:
    """V√©rifie la configuration du gestionnaire de contraintes."""
    try:
        from lcpi.aep.optimizer.constraints_handler import ConstraintManager, ConstraintPenaltyCalculator
        
        # V√©rifier les seuils de contraintes
        constraints_config = {
            "pressure_min": 10.0,  # Pression minimale en mCE
            "velocity_max": 3.0,   # Vitesse maximale en m/s
            "velocity_min": 0.3    # Vitesse minimale en m/s
        }
        
        print(f"‚úÖ Gestionnaire de contraintes:")
        for key, value in constraints_config.items():
            print(f"   ‚Ä¢ {key}: {value}")
            
        return constraints_config
        
    except ImportError as e:
        print(f"‚ö†Ô∏è Impossible d'importer le gestionnaire de contraintes: {e}")
        return {}

def create_harmonized_config() -> Dict[str, Any]:
    """Cr√©e une configuration harmonis√©e pour les deux solveurs."""
    
    print("\nüîß HARMONISATION DES PARAM√àTRES DE SIMULATION")
    print("=" * 60)
    
    # R√©cup√©rer les param√®tres par d√©faut
    lcpi_params = get_lcpi_defaults()
    epanet_params = get_epanet_defaults()
    
    # V√©rifier la disponibilit√© des composants
    epanet_wrapper = check_epanet_wrapper_config()
    constraints = check_constraints_handler()
    
    # Cr√©er la configuration harmonis√©e
    harmonized_config = {
        "convergence": {
            "tolerance": max(lcpi_params.get("tolerance", 1e-6), 
                           epanet_params.get("tolerance", 1e-6)),
            "max_iterations": max(lcpi_params.get("max_iterations", 200), 
                                epanet_params.get("max_iterations", 100)),
            "formula": "hazen_williams",
            "criteria": "relative_error"
        },
        "constraints": {
            "pressure_min_mce": constraints.get("pressure_min", 10.0),
            "velocity_max_ms": constraints.get("velocity_max", 3.0),
            "velocity_min_ms": constraints.get("velocity_min", 0.3)
        },
        "solver_specific": {
            "lcpi": {
                "tolerance": lcpi_params.get("tolerance", 1e-6),
                "max_iterations": lcpi_params.get("max_iterations", 200)
            },
            "epanet": {
                "tolerance": epanet_params.get("tolerance", 1e-6),
                "max_iterations": epanet_params.get("max_iterations", 100)
            }
        },
        "epanet_wrapper": epanet_wrapper
    }
    
    print(f"\n‚úÖ Configuration harmonis√©e cr√©√©e:")
    print(f"   ‚Ä¢ Tol√©rance de convergence: {harmonized_config['convergence']['tolerance']}")
    print(f"   ‚Ä¢ It√©rations maximales: {harmonized_config['convergence']['max_iterations']}")
    print(f"   ‚Ä¢ Formule de perte de charge: {harmonized_config['convergence']['formula']}")
    
    return harmonized_config

def save_harmonized_config(config: Dict[str, Any], output_path: str = "harmonized_simulation_config.json"):
    """Sauvegarde la configuration harmonis√©e."""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Configuration sauvegard√©e dans: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")
        return False

def generate_recommendations(config: Dict[str, Any]) -> None:
    """G√©n√®re des recommandations d'harmonisation."""
    
    print(f"\nüìã RECOMMANDATIONS D'HARMONISATION")
    print("=" * 60)
    
    # V√©rifier la coh√©rence des param√®tres
    lcpi_tol = config["solver_specific"]["lcpi"]["tolerance"]
    epanet_tol = config["solver_specific"]["epanet"]["tolerance"]
    lcpi_iter = config["solver_specific"]["lcpi"]["max_iterations"]
    epanet_iter = config["solver_specific"]["epanet"]["max_iterations"]
    
    recommendations = []
    
    # V√©rifier la tol√©rance
    if abs(lcpi_tol - epanet_tol) > 1e-8:
        recommendations.append(
            f"üîß Harmoniser la tol√©rance: LCPI ({lcpi_tol}) vs EPANET ({epanet_tol})"
        )
    
    # V√©rifier les it√©rations
    if lcpi_iter != epanet_iter:
        recommendations.append(
            f"üîß Harmoniser les it√©rations: LCPI ({lcpi_iter}) vs EPANET ({epanet_iter})"
        )
    
    # V√©rifier la disponibilit√© d'EPANET
    if not config["epanet_wrapper"]["available"]:
        recommendations.append(
            "‚ö†Ô∏è EPANET n'est pas disponible. V√©rifier l'installation et la configuration."
        )
    
    if recommendations:
        print("Recommandations identifi√©es:")
        for rec in recommendations:
            print(f"   {rec}")
    else:
        print("‚úÖ Aucune harmonisation n√©cessaire - param√®tres d√©j√† coh√©rents")
    
    # Recommandations g√©n√©rales
    print(f"\nüí° Recommandations g√©n√©rales:")
    print(f"   ‚Ä¢ Utiliser la m√™me tol√©rance pour les deux solveurs")
    print(f"   ‚Ä¢ Aligner le nombre d'it√©rations maximal")
    print(f"   ‚Ä¢ V√©rifier que les formules de perte de charge sont identiques")
    print(f"   ‚Ä¢ S'assurer que les contraintes hydrauliques sont coh√©rentes")

def main():
    """Fonction principale."""
    print("üöÄ HARMONISATION DES PARAM√àTRES DE SIMULATION")
    print("=" * 60)
    
    try:
        # Cr√©er la configuration harmonis√©e
        config = create_harmonized_config()
        
        # Sauvegarder la configuration
        save_harmonized_config(config)
        
        # G√©n√©rer les recommandations
        generate_recommendations(config)
        
        print(f"\n‚úÖ Harmonisation termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'harmonisation: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
