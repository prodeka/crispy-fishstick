#!/usr/bin/env python3
"""
Test de l'adaptateur de prix pour la base de donn√©es existante.
"""

import sys
from pathlib import Path

# Ajouter le r√©pertoire src au path Python
sys.path.insert(0, str(Path(__file__).parent / "src"))

from lcpi.aep.core.solvers.price_adapter import ExistingPriceAdapter

def test_existing_price_adapter():
    """Test principal de l'adaptateur de prix."""
    
    print("üîç TEST DE L'ADAPTATEUR DE PRIX EXISTANT")
    print("=" * 50)
    
    try:
        # Cr√©er l'adaptateur
        adapter = ExistingPriceAdapter()
        print("‚úÖ Adaptateur cr√©√© avec succ√®s")
        
        # Test 1: R√©cup√©rer les mat√©riaux disponibles
        print(f"\nüìã Test 1: Mat√©riaux disponibles")
        materials = adapter.get_available_materials()
        print(f"   Mat√©riaux: {materials}")
        
        # Test 2: R√©cup√©rer les diam√®tres disponibles pour l'acier
        print(f"\nüìè Test 2: Diam√®tres disponibles pour Acier_galv")
        diameters = adapter.get_available_diameters("Acier_galv")
        print(f"   Diam√®tres: {diameters[:10]}... (total: {len(diameters)})")
        
        # Test 3: R√©cup√©rer des prix sp√©cifiques
        print(f"\nüí∞ Test 3: Prix sp√©cifiques")
        test_diameters = [110, 200, 315, 500]
        for diameter in test_diameters:
            price = adapter.get_pipe_price(diameter, "Acier_galv")
            if price:
                print(f"   {diameter}mm Acier_galv: {price:,.0f} FCFA/m")
            else:
                print(f"   {diameter}mm Acier_galv: Prix non trouv√©")
        
        # Test 4: Calculer le co√ªt d'un r√©seau simple
        print(f"\nüèóÔ∏è Test 4: Calcul du co√ªt d'un r√©seau")
        test_network = {
            "C1": 110,   # 110 mm
            "C2": 200,   # 200 mm
            "C3": 315,   # 315 mm
        }
        
        cost_result = adapter.calculate_network_cost(
            diameters_mm=test_network,
            material="Acier_galv",
            conduit_length_m=100.0
        )
        
        print(f"   Co√ªt total: {cost_result['total_cost_fcfa']:,.0f} FCFA")
        print(f"   Mat√©riau utilis√©: {cost_result['material_used']}")
        print(f"   Longueur estim√©e par conduite: {cost_result['estimated_length_per_conduit_m']} m")
        
        if cost_result['missing_prices']:
            print(f"   ‚ö†Ô∏è Prix manquants: {cost_result['missing_prices']}")
        
        # Test 5: R√©sum√© des prix
        print(f"\nüìä Test 5: R√©sum√© des prix")
        price_summary = adapter.get_price_summary()
        print(f"   Nombre de mat√©riaux: {len(price_summary)}")
        
        # Afficher quelques exemples de prix
        for material in list(price_summary.keys())[:3]:  # Limiter √† 3 mat√©riaux
            material_prices = price_summary[material]
            print(f"   {material}: {len(material_prices)} diam√®tres")
            # Afficher quelques prix pour ce mat√©riau
            for diameter in list(material_prices.keys())[:3]:
                price = material_prices[diameter]
                print(f"     {diameter}mm: {price:,.0f} FCFA/m")
        
        # Test 6: Comparaison avec l'ancien co√ªt
        print(f"\nüîç Test 6: Comparaison avec l'ancien co√ªt")
        old_cost = 4_296_431  # Ancien co√ªt du fichier de r√©sultats
        new_cost = cost_result['total_cost_fcfa']
        
        if new_cost > 0:
            ratio = new_cost / old_cost
            print(f"   Ancien co√ªt: {old_cost:,.0f} FCFA")
            print(f"   Nouveau co√ªt: {new_cost:,.0f} FCFA")
            print(f"   Ratio: {ratio:.1f}x")
            
            if ratio > 10:
                print(f"   ‚úÖ Co√ªt {ratio:.1f}x plus r√©aliste!")
            elif ratio > 5:
                print(f"   ‚úÖ Co√ªt {ratio:.1f}x plus r√©aliste")
            else:
                print(f"   ‚ö†Ô∏è Co√ªt encore trop faible")
        
        print(f"\nüéâ TEST TERMIN√â AVEC SUCC√àS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_existing_price_adapter()
    if not success:
        print("\n‚ùå TEST √âCHOU√â")
        sys.exit(1)
