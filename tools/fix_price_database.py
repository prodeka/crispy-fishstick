#!/usr/bin/env python3
"""
Script de correction de la base de donn√©es des prix AEP.
Cr√©e la table 'prices' manquante avec des prix r√©alistes.
"""

import sqlite3
import os
from pathlib import Path

def create_prices_table():
    """Cr√©e la table 'prices' manquante avec des prix r√©alistes."""
    
    db_path = Path("src/lcpi/db/aep_prices.db")
    
    if not db_path.exists():
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return False
    
    print(f"üîß Correction de la base de donn√©es: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier si la table prices existe d√©j√†
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='prices'")
        if cursor.fetchone():
            print("‚úÖ Table 'prices' existe d√©j√†")
            return True
        
        # Cr√©er la table prices
        print("üìã Cr√©ation de la table 'prices'...")
        cursor.execute("""
            CREATE TABLE prices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                diameter_mm INTEGER NOT NULL,
                material TEXT DEFAULT 'acier',
                price_fcfa_per_m REAL NOT NULL,
                source TEXT DEFAULT 'LCPI',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Cr√©er un index sur le diam√®tre pour les performances
        cursor.execute("CREATE INDEX idx_prices_diameter ON prices(diameter_mm)")
        
        # Ins√©rer des prix r√©alistes bas√©s sur les diam√®tres disponibles
        print("üí∞ Insertion des prix r√©alistes...")
        
        # Prix de r√©f√©rence pour l'acier (FCFA/m)
        # Bas√©s sur des prix de march√© typiques en Afrique de l'Ouest
        price_data = [
            (110, 8000),   # 110 mm: 8,000 FCFA/m
            (125, 9500),   # 125 mm: 9,500 FCFA/m
            (140, 11000),  # 140 mm: 11,000 FCFA/m
            (160, 13000),  # 160 mm: 13,000 FCFA/m
            (180, 15000),  # 180 mm: 15,000 FCFA/m
            (200, 18000),  # 200 mm: 18,000 FCFA/m
            (225, 22000),  # 225 mm: 22,000 FCFA/m
            (250, 26000),  # 250 mm: 26,000 FCFA/m
            (280, 32000),  # 280 mm: 32,000 FCFA/m
            (315, 38000),  # 315 mm: 38,000 FCFA/m
            (350, 45000),  # 350 mm: 45,000 FCFA/m
            (400, 52000),  # 400 mm: 52,000 FCFA/m
            (450, 60000),  # 450 mm: 60,000 FCFA/m
            (500, 70000),  # 500 mm: 70,000 FCFA/m
        ]
        
        for diameter, price in price_data:
            cursor.execute("""
                INSERT INTO prices (diameter_mm, material, price_fcfa_per_m, source)
                VALUES (?, ?, ?, ?)
            """, (diameter, 'acier', price, 'LCPI_Reference'))
        
        # Valider les changements
        conn.commit()
        
        # V√©rifier la cr√©ation
        cursor.execute("SELECT COUNT(*) FROM prices")
        count = cursor.fetchone()[0]
        print(f"‚úÖ Table 'prices' cr√©√©e avec {count} entr√©es")
        
        # Afficher quelques exemples
        cursor.execute("SELECT diameter_mm, price_fcfa_per_m FROM prices ORDER BY diameter_mm LIMIT 5")
        samples = cursor.fetchall()
        print(f"üí∞ Exemples de prix:")
        for diameter, price in samples:
            print(f"   {diameter} mm: {price:,.0f} FCFA/m")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la table: {e}")
        return False

def verify_fix():
    """V√©rifie que la correction a fonctionn√©."""
    
    print(f"\nüîç V√©rification de la correction...")
    
    db_path = Path("src/lcpi/db/aep_prices.db")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier que la table prices existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='prices'")
        if not cursor.fetchone():
            print("‚ùå Table 'prices' toujours manquante")
            return False
        
        # V√©rifier le contenu
        cursor.execute("SELECT COUNT(*) FROM prices")
        count = cursor.fetchone()[0]
        print(f"‚úÖ Table 'prices' contient {count} entr√©es")
        
        # V√©rifier les prix
        cursor.execute("SELECT diameter_mm, price_fcfa_per_m FROM prices ORDER BY diameter_mm")
        prices = cursor.fetchall()
        
        print(f"üí∞ V√©rification des prix:")
        total_cost = 0
        for diameter, price in prices:
            print(f"   {diameter} mm: {price:,.0f} FCFA/m")
            total_cost += price
        
        avg_price = total_cost / len(prices) if prices else 0
        print(f"üíµ Prix moyen: {avg_price:,.0f} FCFA/m")
        
        # V√©rifier la coh√©rence
        if avg_price < 10000:
            print(f"‚ö†Ô∏è Prix moyen encore trop faible: {avg_price:,.0f} FCFA/m")
            print(f"üí° Prix typique attendu: 20,000 - 40,000 FCFA/m")
        else:
            print(f"‚úÖ Prix moyen coh√©rent: {avg_price:,.0f} FCFA/m")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def estimate_realistic_cost():
    """Estime le co√ªt r√©aliste du r√©seau avec les nouveaux prix."""
    
    print(f"\nüí∞ Estimation du co√ªt r√©aliste du r√©seau...")
    
    # Lire le fichier de r√©sultats
    result_file = "test_lcpi_validation_final_v2"
    if not os.path.exists(result_file):
        print(f"‚ùå Fichier de r√©sultats non trouv√©: {result_file}")
        return
    
    try:
        import json
        with open(result_file, 'r', encoding='utf-8') as f:
            results = json.load(f)
        
        # Extraire les diam√®tres
        if 'proposals' in results and len(results['proposals']) > 0:
            proposal = results['proposals'][0]
            if 'diameters_mm' in proposal:
                diameters = proposal['diameters_mm']
                
                # Calculer le co√ªt avec les nouveaux prix
                db_path = Path("src/lcpi/db/aep_prices.db")
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                
                total_cost = 0
                conduit_costs = {}
                
                for conduit_id, diameter in diameters.items():
                    cursor.execute("SELECT price_fcfa_per_m FROM prices WHERE diameter_mm = ?", (diameter,))
                    price_result = cursor.fetchone()
                    
                    if price_result:
                        price_per_m = price_result[0]
                        # Estimation: 100m par conduite
                        conduit_cost = price_per_m * 100
                        total_cost += conduit_cost
                        conduit_costs[conduit_id] = {
                            'diameter_mm': diameter,
                            'price_per_m': price_per_m,
                            'estimated_cost': conduit_cost
                        }
                    else:
                        print(f"‚ö†Ô∏è Prix non trouv√© pour diam√®tre {diameter} mm")
                
                conn.close()
                
                print(f"üìä Analyse des co√ªts:")
                print(f"   - Nombre de conduites: {len(diameters)}")
                print(f"   - Co√ªt total estim√©: {total_cost:,.0f} FCFA")
                print(f"   - Co√ªt par m√®tre moyen: {total_cost / (len(diameters) * 100):,.0f} FCFA/m")
                
                # Comparer avec l'ancien co√ªt
                old_cost = proposal.get('CAPEX', 0)
                ratio = total_cost / old_cost if old_cost > 0 else 0
                print(f"   - Ratio nouveau/ancien co√ªt: {ratio:.1f}x")
                
                if ratio > 10:
                    print(f"‚úÖ Correction r√©ussie: co√ªt {ratio:.1f}x plus r√©aliste!")
                else:
                    print(f"‚ö†Ô∏è Correction partielle: ratio {ratio:.1f}x")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'estimation: {e}")

if __name__ == "__main__":
    print("üîß CORRECTION DE LA BASE DE DONN√âES DES PRIX AEP")
    print("=" * 60)
    
    # √âtape 1: Cr√©er la table prices
    if create_prices_table():
        print("\n‚úÖ Table 'prices' cr√©√©e avec succ√®s")
        
        # √âtape 2: V√©rifier la correction
        if verify_fix():
            print("\n‚úÖ Correction v√©rifi√©e avec succ√®s")
            
            # √âtape 3: Estimer le nouveau co√ªt
            estimate_realistic_cost()
        else:
            print("\n‚ùå √âchec de la v√©rification")
    else:
        print("\n‚ùå √âchec de la cr√©ation de la table")
    
    print(f"\nüéØ PROCHAINES √âTAPES:")
    print(f"   1. Relancer l'optimisation pour v√©rifier le nouveau co√ªt")
    print(f"   2. Ajuster les prix si n√©cessaire")
    print(f"   3. Valider la coh√©rence avec le march√© local")
