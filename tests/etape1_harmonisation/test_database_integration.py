#!/usr/bin/env python3
"""
Test d'int√©gration compl√®te avec la base de donn√©es aep_prices.db.
V√©rifie que tous les composants utilisent les m√™mes donn√©es de diam√®tres et prix.
"""

import sys
import os
from pathlib import Path
import json

# Ajouter le chemin du projet
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_database_connection():
    """Test de la connexion directe √† la base de donn√©es."""
    print("üîç Test de la connexion directe √† la base de donn√©es...")
    
    try:
        from src.lcpi.aep.optimizer.db_dao import get_candidate_diameters
        
        # Test direct de la base
        diam_rows = get_candidate_diameters("PVC-U")
        print(f"‚úÖ Connexion directe √† la base: {len(diam_rows)} diam√®tres PVC-U")
        
        # Afficher quelques exemples
        if diam_rows:
            print("üìä Exemples de diam√®tres et prix:")
            for i, row in enumerate(diam_rows[:5]):
                print(f"   {i+1}. {row.get('d_mm')}mm -> {row.get('cost_per_m', 'N/A')} FCFA/m")
        
        return True, diam_rows
    except Exception as e:
        print(f"‚ùå Erreur de connexion directe: {e}")
        return False, []

def test_diameter_manager_integration():
    """Test de l'int√©gration via le gestionnaire centralis√©."""
    print("\nüîç Test de l'int√©gration via le gestionnaire centralis√©...")
    
    try:
        from src.lcpi.aep.optimizer.diameter_manager import get_standard_diameters_with_prices, get_diameter_manager
        
        # Test via la fonction de compatibilit√©
        diam_rows = get_standard_diameters_with_prices("PVC-U")
        print(f"‚úÖ get_standard_diameters_with_prices: {len(diam_rows)} diam√®tres")
        
        # Test via le gestionnaire complet
        manager = get_diameter_manager()
        candidates = manager.get_candidate_diameters("PVC-U")
        print(f"‚úÖ get_diameter_manager: {len(candidates)} candidats")
        
        return True, diam_rows, candidates
    except Exception as e:
        print(f"‚ùå Erreur dans le gestionnaire centralis√©: {e}")
        return False, [], []

def test_controller_integration():
    """Test de l'int√©gration dans le contr√¥leur d'optimisation."""
    print("\nüîç Test de l'int√©gration dans le contr√¥leur...")
    
    try:
        from src.lcpi.aep.optimizer.controllers import OptimizationController
        
        controller = OptimizationController()
        print("‚úÖ OptimizationController cr√©√© avec succ√®s")
        
        # V√©rifier que le contr√¥leur peut charger les diam√®tres
        try:
            from src.lcpi.aep.optimizer.diameter_manager import get_standard_diameters_with_prices
            diam_rows = get_standard_diameters_with_prices("PVC-U")
            print(f"‚úÖ Contr√¥leur peut acc√©der aux diam√®tres: {len(diam_rows)} disponibles")
            
            # V√©rifier la coh√©rence des donn√©es
            if diam_rows:
                first_diam = diam_rows[0]
                print(f"üìä Premier diam√®tre: {first_diam.get('d_mm')}mm -> {first_diam.get('cost_per_m')} FCFA/m")
            
            return True, diam_rows
        except Exception as e:
            print(f"‚ö†Ô∏è Contr√¥leur: Erreur lors du chargement des diam√®tres: {e}")
            return False, []
        
    except Exception as e:
        print(f"‚ùå Erreur dans le contr√¥leur: {e}")
        return False, []

def test_algorithm_consistency():
    """Test de la coh√©rence entre tous les algorithmes."""
    print("\nüîç Test de la coh√©rence entre tous les algorithmes...")
    
    try:
        from src.lcpi.aep.optimizer.diameter_manager import get_standard_diameters_with_prices
        
        # Charger les diam√®tres une seule fois
        reference_diams = get_standard_diameters_with_prices("PVC-U")
        print(f"‚úÖ Diam√®tres de r√©f√©rence: {len(reference_diams)} disponibles")
        
        # V√©rifier que tous les algorithmes peuvent acc√©der aux m√™mes donn√©es
        algorithms = [
            ("NestedGreedyOptimizer", "src.lcpi.aep.optimizer.algorithms.nested"),
            ("GlobalOptimizer", "src.lcpi.aep.optimizer.algorithms.global_opt"),
            ("GeneticOptimizerV2", "src.lcpi.aep.optimization.genetic_algorithm"),
            ("SurrogateOptimizer", "src.lcpi.aep.optimizer.algorithms.surrogate"),
            ("MultiTankOptimizer", "src.lcpi.aep.optimizer.algorithms.multi_tank"),
            ("BinarySearchOptimizer", "src.lcpi.aep.optimizer.algorithms.binary"),
            ("ParallelMonteCarloAnalyzer", "src.lcpi.aep.optimization.parallel_monte_carlo"),
        ]
        
        consistency_results = []
        for name, module_path in algorithms:
            try:
                # Simuler l'import et l'acc√®s aux diam√®tres
                exec(f"import {module_path}")
                consistency_results.append((name, True))
                print(f"‚úÖ {name}: Acc√®s aux diam√®tres OK")
            except Exception as e:
                consistency_results.append((name, False))
                print(f"‚ùå {name}: Erreur d'acc√®s - {e}")
        
        return True, consistency_results, reference_diams
    except Exception as e:
        print(f"‚ùå Erreur lors du test de coh√©rence: {e}")
        return False, [], []

def test_price_realism():
    """Test du r√©alisme des prix g√©n√©r√©s."""
    print("\nüîç Test du r√©alisme des prix...")
    
    try:
        from src.lcpi.aep.optimizer.diameter_manager import get_standard_diameters_with_prices
        
        diam_rows = get_standard_diameters_with_prices("PVC-U")
        
        if not diam_rows:
            print("‚ö†Ô∏è Aucun diam√®tre disponible pour tester les prix")
            return False, []
        
        # Analyser la distribution des prix
        prices = [float(row.get('cost_per_m', 0)) for row in diam_rows if row.get('cost_per_m')]
        diameters = [int(row.get('d_mm', 0)) for row in diam_rows if row.get('d_mm')]
        
        if not prices or not diameters:
            print("‚ö†Ô∏è Donn√©es de prix ou diam√®tres manquantes")
            return False, []
        
        min_price = min(prices)
        max_price = max(prices)
        avg_price = sum(prices) / len(prices)
        
        print(f"üìä Analyse des prix:")
        print(f"   Prix min: {min_price:.2f} FCFA/m")
        print(f"   Prix max: {max_price:.2f} FCFA/m")
        print(f"   Prix moyen: {avg_price:.2f} FCFA/m")
        print(f"   Nombre de diam√®tres: {len(diameters)}")
        
        # V√©rifier que les prix sont r√©alistes (pas tous identiques)
        if len(set(prices)) < 2:
            print("‚ö†Ô∏è Tous les prix sont identiques - probl√®me de fallback")
            return False, diam_rows
        
        # V√©rifier que les prix augmentent avec le diam√®tre
        price_diameter_pairs = list(zip(diameters, prices))
        price_diameter_pairs.sort(key=lambda x: x[0])
        
        increasing_prices = all(price_diameter_pairs[i][1] <= price_diameter_pairs[i+1][1] 
                               for i in range(len(price_diameter_pairs)-1))
        
        if increasing_prices:
            print("‚úÖ Les prix augmentent logiquement avec le diam√®tre")
        else:
            print("‚ö†Ô∏è Les prix ne suivent pas une progression logique")
        
        return True, diam_rows
    except Exception as e:
        print(f"‚ùå Erreur lors du test de r√©alisme des prix: {e}")
        return False, []

def test_fallback_mechanism():
    """Test du m√©canisme de fallback."""
    print("\nüîç Test du m√©canisme de fallback...")
    
    try:
        from src.lcpi.aep.optimizer.diameter_manager import get_standard_diameters_with_prices
        
        # Tester avec un mat√©riau inexistant pour d√©clencher le fallback
        fallback_diams = get_standard_diameters_with_prices("MATERIAU_INEXISTANT")
        
        if fallback_diams:
            print(f"‚úÖ M√©canisme de fallback actif: {len(fallback_diams)} diam√®tres")
            
            # V√©rifier que les prix de fallback sont r√©alistes
            prices = [float(row.get('cost_per_m', 0)) for row in fallback_diams if row.get('cost_per_m')]
            if prices:
                min_price = min(prices)
                max_price = max(prices)
                print(f"üìä Prix de fallback: {min_price:.2f} - {max_price:.2f} FCFA/m")
                
                # V√©rifier que ce ne sont pas tous des prix uniformes √† 1000
                if len(set(prices)) > 1:
                    print("‚úÖ Prix de fallback diff√©renci√©s (pas de prix uniforme)")
                else:
                    print("‚ö†Ô∏è Prix de fallback uniformes - probl√®me potentiel")
            
            return True, fallback_diams
        else:
            print("‚ùå M√©canisme de fallback non fonctionnel")
            return False, []
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test du fallback: {e}")
        return False, []

def main():
    """Test principal d'int√©gration."""
    print("üöÄ TEST D'INT√âGRATION COMPL√àTE AVEC LA BASE DE DONN√âES")
    print("=" * 70)
    
    # Tests principaux
    db_ok, db_data = test_database_connection()
    manager_ok, manager_data, manager_candidates = test_diameter_manager_integration()
    controller_ok, controller_data = test_controller_integration()
    consistency_ok, consistency_results, reference_data = test_algorithm_consistency()
    price_ok, price_data = test_price_realism()
    fallback_ok, fallback_data = test_fallback_mechanism()
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 70)
    print("üìä R√âSUM√â DES TESTS D'INT√âGRATION")
    print("=" * 70)
    
    tests = [
        ("Connexion directe √† la base", db_ok),
        ("Gestionnaire centralis√©", manager_ok),
        ("Contr√¥leur d'optimisation", controller_ok),
        ("Coh√©rence des algorithmes", consistency_ok),
        ("R√©alisme des prix", price_ok),
        ("M√©canisme de fallback", fallback_ok),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, success in tests:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if success:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    # V√©rifications suppl√©mentaires
    if passed == total:
        print("\nüéâ INT√âGRATION COMPL√àTE R√âUSSIE !")
        print("‚úÖ La base aep_prices.db est parfaitement int√©gr√©e")
        print("‚úÖ Tous les algorithmes utilisent les m√™mes donn√©es")
        print("‚úÖ Le m√©canisme de fallback fonctionne correctement")
        print("‚úÖ Les prix sont r√©alistes et diff√©renci√©s")
        
        # Afficher un r√©sum√© des donn√©es
        if db_data:
            print(f"\nüìä Donn√©es de la base: {len(db_data)} diam√®tres disponibles")
            if len(db_data) > 0:
                sample = db_data[0]
                print(f"   Exemple: {sample.get('d_mm')}mm -> {sample.get('cost_per_m')} FCFA/m")
        
        return True
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("üîß Des corrections sont n√©cessaires pour l'int√©gration compl√®te")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
