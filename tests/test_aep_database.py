#!/usr/bin/env python3
"""
Script de test pour la base de donn√©es AEP

Ce script teste la base de donn√©es AEP et ses fonctionnalit√©s
de requ√™tage et d'utilisation par le programme.
"""

import sys
import os
import json
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn

console = Console()

def test_database_loading():
    """Teste le chargement de la base de donn√©es AEP"""
    console.print(Panel(
        "[bold blue]üóÑÔ∏è TEST DU CHARGEMENT DE LA BASE DE DONN√âES AEP[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Charger la base de donn√©es
        db_path = Path("src/lcpi/db/aep_database.json")
        if not db_path.exists():
            console.print("‚ùå [red]Base de donn√©es AEP non trouv√©e[/red]")
            return False
        
        with open(db_path, 'r', encoding='utf-8') as f:
            db_data = json.load(f)
        
        console.print("‚úÖ [green]Base de donn√©es AEP charg√©e avec succ√®s[/green]")
        
        # V√©rifier la structure
        required_sections = ["metadata", "population", "demande_eau", "reseau", "reservoir", "pompage", "protection", "traitement"]
        for section in required_sections:
            if section in db_data:
                console.print(f"‚úÖ [green]Section '{section}' pr√©sente[/green]")
            else:
                console.print(f"‚ùå [red]Section '{section}' manquante[/red]")
                return False
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du chargement: {e}[/red]")
        return False

def test_database_queries():
    """Teste les requ√™tes sur la base de donn√©es AEP"""
    console.print(Panel(
        "[bold blue]üîç TEST DES REQU√äTES SUR LA BASE DE DONN√âES[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Charger la base de donn√©es
        db_path = Path("src/lcpi/db/aep_database.json")
        with open(db_path, 'r', encoding='utf-8') as f:
            db_data = json.load(f)
        
        # Test 1: R√©cup√©ration des donn√©es de population
        population_data = db_data.get("population", {})
        if "fidokpui_2024" in population_data:
            console.print(f"‚úÖ [green]Population 2024: {population_data['fidokpui_2024']:,} habitants[/green]")
        
        # Test 2: R√©cup√©ration des dotations
        demande_data = db_data.get("demande_eau", {})
        if "dotation_bp" in demande_data:
            console.print(f"‚úÖ [green]Dotation BP: {demande_data['dotation_bp']} L/j/hab[/green]")
        
        # Test 3: R√©cup√©ration des diam√®tres commerciaux
        reseau_data = db_data.get("reseau", {})
        if "diametres_pvc" in reseau_data:
            diametres = reseau_data["diametres_pvc"]
            console.print(f"‚úÖ [green]Diam√®tres PVC disponibles: {len(diametres)} tailles[/green]")
        
        # Test 4: R√©cup√©ration des donn√©es de protection
        protection_data = db_data.get("protection", {})
        if "k_pvc" in protection_data:
            console.print(f"‚úÖ [green]Coefficient K PVC: {protection_data['k_pvc']}[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors des requ√™tes: {e}[/red]")
        return False

def test_database_integration():
    """Teste l'int√©gration de la base de donn√©es avec les calculs AEP"""
    console.print(Panel(
        "[bold blue]üîó TEST DE L'INT√âGRATION AVEC LES CALCULS AEP[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Charger la base de donn√©es
        db_path = Path("src/lcpi/db/aep_database.json")
        with open(db_path, 'r', encoding='utf-8') as f:
            db_data = json.load(f)
        
        # Test avec les donn√©es de la base
        population_base = db_data["population"]["fidokpui_2024"]
        taux_croissance = db_data["population"]["taux_croissance"]
        dotation = db_data["demande_eau"]["dotation_bp"]
        coefficient_pointe = db_data["demande_eau"]["coefficient_pointe_j"]
        
        # Import des fonctions AEP
        from lcpi.aep.calculations.population import calculate_population_projection
        from lcpi.aep.calculations.demand import calculate_water_demand
        
        # Test projection d√©mographique
        resultat_pop = calculate_population_projection(
            population_base=population_base,
            taux_croissance=taux_croissance,
            annees=20,
            verbose=False
        )
        
        if resultat_pop["statut"] == "SUCCES":
            population_projetee = resultat_pop["population_projetee"]
            console.print(f"‚úÖ [green]Projection avec donn√©es DB: {population_projetee:,.0f} habitants[/green]")
        
        # Test calcul demande
        resultat_demande = calculate_water_demand(
            population=population_projetee,
            dotation_l_j_hab=dotation,
            coefficient_pointe=coefficient_pointe,
            verbose=False
        )
        
        if resultat_demande["statut"] == "SUCCES":
            besoin_brut = resultat_demande["besoins_calcules"]["besoin_brut_m3_jour"]
            console.print(f"‚úÖ [green]Demande avec donn√©es DB: {besoin_brut:.1f} m¬≥/jour[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors de l'int√©gration: {e}[/red]")
        return False

def test_database_search():
    """Teste la recherche dans la base de donn√©es AEP"""
    console.print(Panel(
        "[bold blue]üîé TEST DE LA RECHERCHE DANS LA BASE DE DONN√âES[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Charger la base de donn√©es
        db_path = Path("src/lcpi/db/aep_database.json")
        with open(db_path, 'r', encoding='utf-8') as f:
            db_data = json.load(f)
        
        def search_in_data(data, keywords):
            """Recherche r√©cursive dans les donn√©es"""
            results = []
            
            def search_recursive(obj, path=""):
                if isinstance(obj, dict):
                    for key, value in obj.items():
                        current_path = f"{path}.{key}" if path else key
                        search_recursive(value, current_path)
                elif isinstance(obj, list):
                    for i, item in enumerate(obj):
                        current_path = f"{path}[{i}]"
                        search_recursive(item, current_path)
                else:
                    # Recherche dans les valeurs
                    if any(keyword.lower() in str(obj).lower() for keyword in keywords):
                        results.append({
                            "path": path,
                            "value": obj
                        })
            
            search_recursive(data)
            return results
        
        # Test de recherche
        keywords = ["population", "60"]
        results = search_in_data(db_data, keywords)
        
        console.print(f"‚úÖ [green]Recherche trouv√©e: {len(results)} r√©sultats[/green]")
        for result in results[:3]:  # Afficher les 3 premiers r√©sultats
            console.print(f"   ‚Ä¢ {result['path']}: {result['value']}")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors de la recherche: {e}[/red]")
        return False

def test_database_export():
    """Teste l'export de donn√©es de la base AEP"""
    console.print(Panel(
        "[bold blue]üì§ TEST DE L'EXPORT DE DONN√âES[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Charger la base de donn√©es
        db_path = Path("src/lcpi/db/aep_database.json")
        with open(db_path, 'r', encoding='utf-8') as f:
            db_data = json.load(f)
        
        # Export en CSV (simulation)
        import csv
        
        # Cr√©er un fichier CSV temporaire avec les donn√©es de population
        csv_path = "temp_population_aep.csv"
        population_data = db_data["population"]["projections"]
        
        with open(csv_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(["Ann√©e", "Population"])
            for annee, population in population_data.items():
                writer.writerow([annee, population])
        
        console.print(f"‚úÖ [green]Export CSV cr√©√©: {csv_path}[/green]")
        
        # Nettoyer le fichier temporaire
        os.remove(csv_path)
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors de l'export: {e}[/red]")
        return False

def main():
    """Fonction principale de test"""
    console.print(Panel(
        "[bold blue]üöÄ D√âMARRAGE DES TESTS DE LA BASE DE DONN√âES AEP[/bold blue]\n\n"
        "Ce script teste la base de donn√©es AEP et ses fonctionnalit√©s\n"
        "de requ√™tage, int√©gration et export.",
        border_style="blue"
    ))
    
    tests = [
        ("Chargement DB", test_database_loading),
        ("Requ√™tes DB", test_database_queries),
        ("Int√©gration DB", test_database_integration),
        ("Recherche DB", test_database_search),
        ("Export DB", test_database_export)
    ]
    
    results = []
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        
        for test_name, test_func in tests:
            task = progress.add_task(f"Test {test_name}...", total=None)
            
            try:
                result = test_func()
                results.append((test_name, result))
                progress.update(task, description=f"‚úÖ {test_name} termin√©")
            except Exception as e:
                results.append((test_name, False))
                progress.update(task, description=f"‚ùå {test_name} √©chou√©")
    
    # Affichage des r√©sultats
    console.print("\n" + "="*60)
    console.print(Panel(
        "[bold blue]üìä R√âSULTATS DES TESTS BASE DE DONN√âES AEP[/bold blue]",
        border_style="blue"
    ))
    
    table = Table(title="R√©sultats des Tests Base de Donn√©es AEP")
    table.add_column("Test", style="cyan")
    table.add_column("Statut", style="green")
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        table.add_row(test_name, status)
    
    console.print(table)
    
    # R√©sum√©
    nb_reussis = sum(1 for _, result in results if result)
    nb_total = len(results)
    
    console.print(f"\n[bold]R√©sum√©:[/bold] {nb_reussis}/{nb_total} tests r√©ussis")
    
    if nb_reussis == nb_total:
        console.print(Panel(
            "[bold green]üéâ TOUS LES TESTS SONT R√âUSSIS ![/bold green]\n\n"
            "La base de donn√©es AEP est pr√™te √† √™tre utilis√©e.",
            border_style="green"
        ))
    else:
        console.print(Panel(
            f"[bold red]‚ö†Ô∏è {nb_total - nb_reussis} TEST(S) ONT √âCHOU√â[/bold red]\n\n"
            "V√©rifiez les erreurs ci-dessus.",
            border_style="red"
        ))

if __name__ == "__main__":
    main() 