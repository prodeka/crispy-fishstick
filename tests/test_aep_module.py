#!/usr/bin/env python3
"""
Script de test pour le module AEP (Alimentation en Eau Potable)

Ce script teste toutes les fonctionnalit√©s du module AEP en r√©utilisant
les fonctions existantes d'hydrodrain et en ajoutant les nouvelles
fonctionnalit√©s sp√©cifiques √† l'AEP.
"""

import sys
import os
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn

console = Console()

# Imports au niveau module pour √©viter les erreurs de syntaxe
try:
    from lcpi.aep.core.constants import *
    from lcpi.aep.core.formulas import *
    from lcpi.aep.core.validators import *
    from lcpi.aep.calculations.population import calculate_population_projection
    from lcpi.aep.calculations.demand import calculate_water_demand
    # Import sp√©cifique des fonctions utilis√©es dans les tests
    from lcpi.aep.core.formulas import (
        formule_malthus, calculer_besoin_domestique, calculer_besoin_annexe,
        calculer_besoin_global, calculer_besoin_pointe, calculer_besoin_brut
    )
    from lcpi.aep.core.validators import validate_population_data, validate_demand_data
    IMPORTS_OK = True
except ImportError as e:
    IMPORTS_OK = False
    IMPORT_ERROR = str(e)

def test_imports():
    """Teste les imports du module AEP"""
    console.print(Panel(
        "[bold blue]üîç TEST DES IMPORTS DU MODULE AEP[/bold blue]",
        border_style="blue"
    ))
    
    if IMPORTS_OK:
        console.print("‚úÖ [green]Imports core AEP r√©ussis[/green]")
        console.print("‚úÖ [green]Imports formules AEP r√©ussis[/green]")
        console.print("‚úÖ [green]Imports validateurs AEP r√©ussis[/green]")
        console.print("‚úÖ [green]Import population AEP r√©ussi[/green]")
        console.print("‚úÖ [green]Import demande AEP r√©ussi[/green]")
        return True
    else:
        console.print(f"‚ùå [red]Erreur d'import: {IMPORT_ERROR}[/red]")
        return False

def test_population_calculations():
    """Teste les calculs de projection d√©mographique"""
    console.print(Panel(
        "[bold blue]üìä TEST DES CALCULS DE PROJECTION D√âMOGRAPHIQUE[/bold blue]",
        border_style="blue"
    ))
    
    try:
        from lcpi.aep.calculations.population import calculate_population_projection
        
        # Test avec les donn√©es du document AEP
        resultat = calculate_population_projection(
            population_base=9967,
            taux_croissance=0.037,
            annees=20,
            verbose=True
        )
        
        if resultat.get("statut") == "SUCCES":
            console.print("‚úÖ [green]Calcul de projection d√©mographique r√©ussi[/green]")
            console.print(f"   Population projet√©e: {resultat.get('population_projetee', 'N/A'):,} habitants")
            return True
        else:
            console.print(f"‚ùå [red]Erreur dans le calcul: {resultat.get('message', 'Erreur inconnue')}[/red]")
            return False
            
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du test: {e}[/red]")
        return False

def test_demand_calculations():
    """Teste les calculs de demande en eau"""
    console.print(Panel(
        "[bold blue]üíß TEST DES CALCULS DE DEMANDE EN EAU[/bold blue]",
        border_style="blue"
    ))
    
    try:
        from lcpi.aep.calculations.demand import calculate_water_demand
        
        # Test avec les donn√©es du document AEP
        resultat = calculate_water_demand(
            population=20847,
            dotation_l_j_hab=60,
            coefficient_pointe=1.5,
            verbose=True
        )
        
        if resultat.get("statut") == "SUCCES":
            console.print("‚úÖ [green]Calcul de demande en eau r√©ussi[/green]")
            besoins = resultat.get("besoins_calcules", {})
            console.print(f"   Besoin brut journalier: {besoins.get('besoin_brut_m3_jour', 'N/A'):.1f} m¬≥/jour")
            return True
        else:
            console.print(f"‚ùå [red]Erreur dans le calcul: {resultat.get('message', 'Erreur inconnue')}[/red]")
            return False
            
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du test: {e}[/red]")
        return False

def test_formulas():
    """Teste les formules math√©matiques"""
    console.print(Panel(
        "[bold blue]üßÆ TEST DES FORMULES MATH√âMATIQUES[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Test formule de Malthus
        population_projetee = formule_malthus(9967, 0.037, 20)
        console.print(f"‚úÖ [green]Formule Malthus: {population_projetee:.0f} habitants[/green]")
        
        # Test calcul besoin domestique
        besoin_dom = calculer_besoin_domestique(20847, 60)
        console.print(f"‚úÖ [green]Besoin domestique: {besoin_dom:.1f} m¬≥/jour[/green]")
        
        # Test calcul besoin annexe
        besoin_annexe = calculer_besoin_annexe(besoin_dom, 0.10)
        console.print(f"‚úÖ [green]Besoin annexe: {besoin_annexe:.1f} m¬≥/jour[/green]")
        
        # Test calcul besoin global
        besoin_global = calculer_besoin_global(besoin_dom, besoin_annexe)
        console.print(f"‚úÖ [green]Besoin global: {besoin_global:.1f} m¬≥/jour[/green]")
        
        # Test calcul besoin pointe
        besoin_pointe = calculer_besoin_pointe(besoin_global, 1.5)
        console.print(f"‚úÖ [green]Besoin pointe: {besoin_pointe:.1f} m¬≥/jour[/green]")
        
        # Test calcul besoin brut
        besoin_brut = calculer_besoin_brut(besoin_pointe, 0.95)
        console.print(f"‚úÖ [green]Besoin brut: {besoin_brut:.1f} m¬≥/jour[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du test des formules: {e}[/red]")
        return False

def test_constants():
    """Teste les constantes du module AEP"""
    console.print(Panel(
        "[bold blue]üìè TEST DES CONSTANTES AEP[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Test des constantes physiques
        console.print(f"‚úÖ [green]Acc√©l√©ration pesanteur: {G} m/s¬≤[/green]")
        console.print(f"‚úÖ [green]Masse volumique eau: {RHO_EAU} kg/m¬≥[/green]")
        
        # Test des coefficients de rugosit√©
        console.print(f"‚úÖ [green]KS PVC: {KS_PVC}[/green]")
        console.print(f"‚úÖ [green]KS B√©ton liss√©: {KS_BETON_LISSE}[/green]")
        
        # Test des coefficients de pointe
        console.print(f"‚úÖ [green]Coefficient pointe journali√®re: {COEFF_POINTE_JOURNALIERE}[/green]")
        
        # Test des rendements
        console.print(f"‚úÖ [green]Rendement technique: {RENDEMENT_TECHNIQUE}[/green]")
        console.print(f"‚úÖ [green]Rendement pompe: {RENDEMENT_POMPE}[/green]")
        
        # Test des vitesses
        console.print(f"‚úÖ [green]Vitesse min: {VITESSE_MIN} m/s[/green]")
        console.print(f"‚úÖ [green]Vitesse max: {VITESSE_MAX} m/s[/green]")
        
        # Test des dotations
        console.print(f"‚úÖ [green]Dotation branchement priv√©: {DOTATIONS_EAU['branchement_prive']} L/j/hab[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du test des constantes: {e}[/red]")
        return False

def test_validation():
    """Teste les fonctions de validation"""
    console.print(Panel(
        "[bold blue]‚úÖ TEST DES FONCTIONS DE VALIDATION[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # Test validation donn√©es population
        donnees_pop = {
            "methode": "malthus",
            "annee_projet": 2045,
            "pop_annee_1": [9967, 2025],
            "pop_annee_2": [10340, 2026]
        }
        
        donnees_validees = validate_population_data(donnees_pop)
        console.print("‚úÖ [green]Validation donn√©es population r√©ussie[/green]")
        
        # Test validation donn√©es demande
        donnees_demande = {
            "population": 20847,
            "dotation_domestique_l_j_hab": 60,
            "rendement_reseau": 0.95
        }
        
        donnees_validees = validate_demand_data(donnees_demande)
        console.print("‚úÖ [green]Validation donn√©es demande r√©ussie[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du test de validation: {e}[/red]")
        return False

def test_cli_interface():
    """Teste l'interface CLI"""
    console.print(Panel(
        "[bold blue]üñ•Ô∏è TEST DE L'INTERFACE CLI[/bold blue]",
        border_style="blue"
    ))
    
    try:
        from lcpi.aep.cli import app
        
        console.print("‚úÖ [green]Interface CLI AEP charg√©e avec succ√®s[/green]")
        
        # Test de l'aide
        from lcpi.aep.calculations.population import get_population_help
        from lcpi.aep.calculations.demand import get_demand_help
        
        help_pop = get_population_help()
        help_demande = get_demand_help()
        
        console.print("‚úÖ [green]Fonctions d'aide disponibles[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du test CLI: {e}[/red]")
        return False

def test_templates():
    """Teste les templates YAML"""
    console.print(Panel(
        "[bold blue]üìÑ TEST DES TEMPLATES YAML[/bold blue]",
        border_style="blue"
    ))
    
    try:
        import yaml
        
        # Test template population
        template_pop_path = Path("src/lcpi/templates_project/aep/population_exemple.yml")
        if template_pop_path.exists():
            with open(template_pop_path, 'r', encoding='utf-8') as f:
                donnees_pop = yaml.safe_load(f)
            console.print("‚úÖ [green]Template population charg√© avec succ√®s[/green]")
        else:
            console.print("‚ö†Ô∏è [yellow]Template population non trouv√©[/yellow]")
        
        # Test template demande
        template_demande_path = Path("src/lcpi/templates_project/aep/demande_exemple.yml")
        if template_demande_path.exists():
            with open(template_demande_path, 'r', encoding='utf-8') as f:
                donnees_demande = yaml.safe_load(f)
            console.print("‚úÖ [green]Template demande charg√© avec succ√®s[/green]")
        else:
            console.print("‚ö†Ô∏è [yellow]Template demande non trouv√©[/yellow]")
        
        # Test template projet complet
        template_projet_path = Path("src/lcpi/templates_project/aep/projet_complet_exemple.yml")
        if template_projet_path.exists():
            with open(template_projet_path, 'r', encoding='utf-8') as f:
                donnees_projet = yaml.safe_load(f)
            console.print("‚úÖ [green]Template projet complet charg√© avec succ√®s[/green]")
        else:
            console.print("‚ö†Ô∏è [yellow]Template projet complet non trouv√©[/yellow]")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå [red]Erreur lors du test des templates: {e}[/red]")
        return False

def main():
    """Fonction principale de test"""
    console.print(Panel(
        "[bold blue]üöÄ D√âMARRAGE DES TESTS DU MODULE AEP[/bold blue]\n\n"
        "Ce script teste toutes les fonctionnalit√©s du module AEP\n"
        "en r√©utilisant les fonctions existantes d'hydrodrain.",
        border_style="blue"
    ))
    
    tests = [
        ("Imports", test_imports),
        ("Constantes", test_constants),
        ("Formules", test_formulas),
        ("Validation", test_validation),
        ("Calculs Population", test_population_calculations),
        ("Calculs Demande", test_demand_calculations),
        ("Interface CLI", test_cli_interface),
        ("Templates YAML", test_templates)
    ]
    
    results = []
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        
        for test_name, test_func in tests:
            task = progress.add_task(f"Test {test_name}...", total=None)
            
            try:
                result = test_func()
                results.append((test_name, result))
                progress.update(task, description=f"‚úÖ {test_name} termin√©")
            except Exception as e:
                results.append((test_name, False))
                progress.update(task, description=f"‚ùå {test_name} √©chou√©")
    
    # Affichage des r√©sultats
    console.print("\n" + "="*60)
    console.print(Panel(
        "[bold blue]üìä R√âSULTATS DES TESTS[/bold blue]",
        border_style="blue"
    ))
    
    table = Table(title="R√©sultats des Tests AEP")
    table.add_column("Test", style="cyan")
    table.add_column("Statut", style="green")
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        table.add_row(test_name, status)
    
    console.print(table)
    
    # R√©sum√©
    nb_reussis = sum(1 for _, result in results if result)
    nb_total = len(results)
    
    console.print(f"\n[bold]R√©sum√©:[/bold] {nb_reussis}/{nb_total} tests r√©ussis")
    
    if nb_reussis == nb_total:
        console.print(Panel(
            "[bold green]üéâ TOUS LES TESTS SONT R√âUSSIS ![/bold green]\n\n"
            "Le module AEP est pr√™t √† √™tre utilis√©.",
            border_style="green"
        ))
    else:
        console.print(Panel(
            f"[bold red]‚ö†Ô∏è {nb_total - nb_reussis} TEST(S) ONT √âCHOU√â[/bold red]\n\n"
            "V√©rifiez les erreurs ci-dessus.",
            border_style="red"
        ))

if __name__ == "__main__":
    main() 