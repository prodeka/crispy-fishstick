#!/usr/bin/env python3
"""
Assistant d'Installation LCPI-CLI - Interface Utilisateur Am√©lior√©e
Guide interactif pour l'installation et la configuration initiale
"""

import os
import sys
import subprocess
import json
import pathlib
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.layout import Layout
from rich.text import Text
from rich.align import Align

console = Console()

class LCPIInstallWizard:
    def __init__(self):
        self.project_root = pathlib.Path(__file__).parent.parent
        self.installation_log = []
        
    def print_welcome(self):
        """Affiche l'√©cran de bienvenue"""
        welcome_text = """
[bold blue]LCPI-CLI - Assistant d'Installation[/bold blue]

[bold]Plateforme de Calcul Polyvalent pour l'Ing√©nierie[/bold]

Ce guide vous accompagnera dans l'installation et la configuration 
de LCPI-CLI sur votre syst√®me.

[dim]Version 2.0.0 - Support: Windows, macOS, Linux[/dim]
        """
        
        console.print(Panel(welcome_text, title="üéâ Bienvenue", border_style="blue"))
        
    def check_system_requirements(self):
        """V√©rifie les pr√©requis syst√®me"""
        console.print("\n[bold]üîç V√©rification des Pr√©requis Syst√®me[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            # V√©rifier Python
            task = progress.add_task("V√©rification de Python...", total=None)
            try:
                python_version = subprocess.check_output([sys.executable, "--version"], 
                                                      text=True, stderr=subprocess.STDOUT)
                progress.update(task, description=f"‚úÖ Python d√©tect√©: {python_version.strip()}")
            except:
                progress.update(task, description="‚ùå Python non trouv√©")
                console.print("[red]ERREUR: Python 3.8+ est requis[/red]")
                return False
            
            # V√©rifier pip
            task = progress.add_task("V√©rification de pip...", total=None)
            try:
                pip_version = subprocess.check_output([sys.executable, "-m", "pip", "--version"], 
                                                   text=True, stderr=subprocess.STDOUT)
                progress.update(task, description=f"‚úÖ pip d√©tect√©: {pip_version.strip()}")
            except:
                progress.update(task, description="‚ùå pip non trouv√©")
                console.print("[red]ERREUR: pip est requis[/red]")
                return False
            
            # V√©rifier l'espace disque
            task = progress.add_task("V√©rification de l'espace disque...", total=None)
            try:
                import shutil
                total, used, free = shutil.disk_usage(self.project_root)
                free_gb = free // (1024**3)
                if free_gb > 1:
                    progress.update(task, description=f"‚úÖ Espace disponible: {free_gb} GB")
                else:
                    progress.update(task, description="‚ùå Espace insuffisant")
                    console.print("[red]ERREUR: Au moins 1 GB d'espace libre requis[/red]")
                    return False
            except:
                progress.update(task, description="‚ö†Ô∏è Impossible de v√©rifier l'espace")
        
        return True
    
    def check_network_connection(self):
        """V√©rifie la connexion r√©seau"""
        console.print("\n[bold]üåê V√©rification de la Connexion R√©seau[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Test de connexion...", total=None)
            try:
                import urllib.request
                urllib.request.urlopen('http://www.google.com', timeout=5)
                progress.update(task, description="‚úÖ Connexion Internet disponible")
                return True
            except:
                progress.update(task, description="‚ö†Ô∏è Pas de connexion Internet")
                return False
    
    def select_installation_mode(self):
        """Permet √† l'utilisateur de choisir le mode d'installation"""
        console.print("\n[bold]‚öôÔ∏è Mode d'Installation[/bold]")
        
        online_available = self.check_network_connection()
        
        if online_available:
            console.print("""
[green]‚úÖ Connexion Internet d√©tect√©e[/green]

Options disponibles:
1. [bold]Installation compl√®te[/bold] - T√©l√©charge toutes les d√©pendances
2. [bold]Installation minimale[/bold] - Installe seulement les composants essentiels
3. [bold]Installation hors ligne[/bold] - Utilise les paquets locaux
            """)
            
            choice = Prompt.ask(
                "Choisissez le mode d'installation",
                choices=["1", "2", "3"],
                default="1"
            )
            
            return {
                "1": "online_full",
                "2": "online_minimal", 
                "3": "offline"
            }[choice]
        else:
            console.print("""
[yellow]‚ö†Ô∏è Pas de connexion Internet d√©tect√©e[/yellow]

Installation en mode hors ligne avec les paquets locaux.
            """)
            return "offline"
    
    def configure_plugins(self):
        """Configure les plugins selon les besoins de l'utilisateur"""
        console.print("\n[bold]üîå Configuration des Plugins[/bold]")
        
        console.print("""
LCPI-CLI propose plusieurs plugins sp√©cialis√©s:

[bold]Plugins de Base (Recommand√©s):[/bold]
‚Ä¢ [cyan]shell[/cyan] - Interface interactive
‚Ä¢ [cyan]utils[/cyan] - Utilitaires g√©n√©raux

[bold]Plugins M√©tier:[/bold]
‚Ä¢ [cyan]beton[/cyan] - B√©ton arm√© (BAEL 91 / Eurocode 2)
‚Ä¢ [cyan]bois[/cyan] - Structures en bois (Eurocode 5)
‚Ä¢ [cyan]cm[/cyan] - Construction m√©tallique
‚Ä¢ [cyan]hydro[/cyan] - Hydrologie et hydraulique
        """)
        
        # Plugins de base (toujours activ√©s)
        base_plugins = ["shell", "utils"]
        
        # S√©lection des plugins m√©tier
        available_business_plugins = ["beton", "bois", "cm", "hydro"]
        selected_business_plugins = []
        
        for plugin in available_business_plugins:
            if Confirm.ask(f"Installer le plugin [cyan]{plugin}[/cyan] ?"):
                selected_business_plugins.append(plugin)
        
        all_plugins = base_plugins + selected_business_plugins
        
        console.print(f"\n[green]‚úÖ Plugins s√©lectionn√©s: {', '.join(all_plugins)}[/green]")
        
        return all_plugins
    
    def install_dependencies(self, mode):
        """Installe les d√©pendances selon le mode choisi"""
        console.print(f"\n[bold]üì¶ Installation des D√©pendances ({mode})[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Installation en cours...", total=None)
            
            try:
                if mode == "offline":
                    # Installation hors ligne
                    command = [
                        sys.executable, "-m", "pip", "install", 
                        "--no-index", "--find-links=offline_packages", 
                        "-r", "requirements.txt"
                    ]
                else:
                    # Installation en ligne
                    command = [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"]
                
                result = subprocess.run(command, cwd=self.project_root, 
                                      capture_output=True, text=True)
                
                if result.returncode == 0:
                    progress.update(task, description="‚úÖ D√©pendances install√©es")
                    return True
                else:
                    progress.update(task, description="‚ùå Erreur d'installation")
                    console.print(f"[red]Erreur: {result.stderr}[/red]")
                    return False
                    
            except Exception as e:
                progress.update(task, description="‚ùå Erreur d'installation")
                console.print(f"[red]Erreur: {e}[/red]")
                return False
    
    def install_lcpi_core(self):
        """Installe le noyau LCPI-CLI"""
        console.print("\n[bold]üîß Installation du Noyau LCPI-CLI[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Installation du noyau...", total=None)
            
            try:
                command = [sys.executable, "-m", "pip", "install", "-e", "."]
                result = subprocess.run(command, cwd=self.project_root, 
                                      capture_output=True, text=True)
                
                if result.returncode == 0:
                    progress.update(task, description="‚úÖ Noyau install√©")
                    return True
                else:
                    progress.update(task, description="‚ùå Erreur d'installation")
                    console.print(f"[red]Erreur: {result.stderr}[/red]")
                    return False
                    
            except Exception as e:
                progress.update(task, description="‚ùå Erreur d'installation")
                console.print(f"[red]Erreur: {e}[/red]")
                return False
    
    def setup_license_system(self):
        """Configure le syst√®me de licence"""
        console.print("\n[bold]üîê Configuration du Syst√®me de Licence[/bold]")
        
        # Cr√©er le dossier de licence
        license_dir = pathlib.Path.home() / ".lcpi"
        license_dir.mkdir(exist_ok=True)
        
        license_file = license_dir / "license.key"
        
        if license_file.exists():
            console.print("[green]‚úÖ Fichier de licence existant d√©tect√©[/green]")
        else:
            # Cr√©er un fichier avec des instructions
            with open(license_file, 'w', encoding='utf-8') as f:
                f.write("# LCPI-CLI License Key\n")
                f.write("# Remplacez ce contenu par votre cl√© de licence\n")
                f.write("# Contactez le support pour obtenir votre licence\n")
                f.write("# Email: support@lcpi-cli.com\n")
            
            console.print(f"[green]‚úÖ Fichier de licence cr√©√©: {license_file}[/green]")
        
        return True
    
    def configure_plugins_file(self, selected_plugins):
        """Configure le fichier de plugins"""
        plugins_config_path = self.project_root / "src" / "lcpi" / ".plugins.json"
        
        config = {
            "active_plugins": selected_plugins,
            "available_plugins": ["shell", "utils", "beton", "bois", "cm", "hydro"],
            "installation_date": datetime.now().isoformat(),
            "version": "2.0.0"
        }
        
        # Cr√©er le dossier si n√©cessaire
        plugins_config_path.parent.mkdir(exist_ok=True)
        
        # √âcrire la configuration
        with open(plugins_config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        console.print(f"[green]‚úÖ Configuration des plugins sauvegard√©e[/green]")
        return True
    
    def verify_installation(self):
        """V√©rifie que l'installation s'est bien pass√©e"""
        console.print("\n[bold]üîç V√©rification de l'Installation[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            # Test de l'import
            task = progress.add_task("Test d'import...", total=None)
            try:
                import sys
                src_path = str(self.project_root / "src")
                sys.path.insert(0, src_path)
                
                from lcpi.main import app
                progress.update(task, description="‚úÖ Import r√©ussi")
            except Exception as e:
                progress.update(task, description="‚ùå Erreur d'import")
                console.print(f"[red]Erreur: {e}[/red]")
                return False
            
            # Test de la commande
            task = progress.add_task("Test de la commande...", total=None)
            try:
                result = subprocess.run([
                    sys.executable, "-c", 
                    "import sys; sys.path.insert(0, 'src'); from lcpi.main import app; print('OK')"
                ], cwd=self.project_root, capture_output=True, text=True)
                
                if result.returncode == 0:
                    progress.update(task, description="‚úÖ Commande fonctionnelle")
                else:
                    progress.update(task, description="‚ùå Erreur de commande")
                    return False
            except Exception as e:
                progress.update(task, description="‚ùå Erreur de commande")
                console.print(f"[red]Erreur: {e}[/red]")
                return False
        
        return True
    
    def show_next_steps(self):
        """Affiche les prochaines √©tapes"""
        console.print("\n" + "="*60)
        console.print("[bold green]üéâ Installation Termin√©e avec Succ√®s ![/bold green]")
        console.print("="*60)
        
        next_steps = """
[bold]üìã Prochaines √âtapes :[/bold]

1. [bold]üöÄ Tester LCPI :[/bold]
   lcpi --help

2. [bold]üîå V√©rifier les plugins :[/bold]
   lcpi plugins list

3. [bold]üõ†Ô∏è Utiliser le shell interactif :[/bold]
   lcpi shell

4. [bold]üìö Consulter la documentation :[/bold]
   - docs/GUIDE_UTILISATION.md
   - docs/NOUVELLES_FONCTIONNALITES.md

5. [bold]üîê Gestion de la licence :[/bold]
   - V√©rifiez votre licence : ~/.lcpi/license.key
   - Contactez le support pour obtenir une licence

[dim]üí° Conseil : Utilisez 'lcpi doctor' pour v√©rifier l'installation[/dim]
        """
        
        console.print(Panel(next_steps, title="üìñ Guide de D√©marrage", border_style="green"))
    
    def run(self):
        """Lance l'assistant d'installation"""
        try:
            # √âcran de bienvenue
            self.print_welcome()
            
            # V√©rifications pr√©liminaires
            if not self.check_system_requirements():
                console.print("[red]‚ùå Pr√©requis non satisfaits. Installation annul√©e.[/red]")
                return False
            
            # S√©lection du mode d'installation
            mode = self.select_installation_mode()
            
            # Configuration des plugins
            selected_plugins = self.configure_plugins()
            
            # Installation des d√©pendances
            if not self.install_dependencies(mode):
                console.print("[red]‚ùå √âchec de l'installation des d√©pendances.[/red]")
                return False
            
            # Installation du noyau
            if not self.install_lcpi_core():
                console.print("[red]‚ùå √âchec de l'installation du noyau.[/red]")
                return False
            
            # Configuration du syst√®me de licence
            if not self.setup_license_system():
                console.print("[red]‚ùå √âchec de la configuration de la licence.[/red]")
                return False
            
            # Configuration des plugins
            if not self.configure_plugins_file(selected_plugins):
                console.print("[red]‚ùå √âchec de la configuration des plugins.[/red]")
                return False
            
            # V√©rification finale
            if not self.verify_installation():
                console.print("[red]‚ùå √âchec de la v√©rification.[/red]")
                return False
            
            # Affichage des prochaines √©tapes
            self.show_next_steps()
            
            return True
            
        except KeyboardInterrupt:
            console.print("\n[yellow]‚ö†Ô∏è Installation interrompue par l'utilisateur.[/yellow]")
            return False
        except Exception as e:
            console.print(f"\n[red]‚ùå Erreur inattendue: {e}[/red]")
            return False

def main():
    """Point d'entr√©e principal"""
    wizard = LCPIInstallWizard()
    success = wizard.run()
    
    if success:
        console.print("\n[green]‚úÖ Installation termin√©e avec succ√®s ![/green]")
    else:
        console.print("\n[red]‚ùå Installation √©chou√©e.[/red]")
    
    input("\nAppuyez sur Entr√©e pour quitter...")

if __name__ == "__main__":
    main() 