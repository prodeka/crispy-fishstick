#!/usr/bin/env python3
"""
D√©monstration de l'int√©gration EPANET avec diagnostics de connectivit√©

Ce script d√©montre comment utiliser la nouvelle fonctionnalit√© de diagnostic
automatique de connectivit√© r√©seau avant l'ex√©cution d'EPANET pour pr√©venir
l'erreur 110 "cannot solve network hydraulic equations".
"""

import sys
import os
import yaml
import json
from pathlib import Path

# Ajouter le r√©pertoire src au path pour importer les modules LCPI
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from lcpi.aep.core.epanet_integration import (
    run_epanet_with_diagnostics,
    quick_diagnostic,
    EpanetWithDiagnostics
)


def create_test_networks():
    """Cr√©e des r√©seaux de test avec diff√©rents sc√©narios"""
    
    # R√©seau 1: R√©seau valide (devrait fonctionner avec EPANET)
    valid_network = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "cote": 120, "demande": 0},
                "N1": {"type": "junction", "cote": 100, "demande": 10},
                "N2": {"type": "junction", "cote": 95, "demande": 15},
                "N3": {"type": "junction", "cote": 90, "demande": 8}
            },
            "pipes": {
                "P1": {"noeud_amont": "R1", "noeud_aval": "N1", "longueur": 1000, "diametre": 0.3, "coefficient_rugosite": 120},
                "P2": {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 800, "diametre": 0.25, "coefficient_rugosite": 120},
                "P3": {"noeud_amont": "N2", "noeud_aval": "N3", "longueur": 600, "diametre": 0.2, "coefficient_rugosite": 120}
            }
        }
    }
    
    # R√©seau 2: R√©seau avec composante orpheline (devrait √©chouer)
    orphaned_network = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "cote": 120, "demande": 0},
                "N1": {"type": "junction", "cote": 100, "demande": 10},
                "N2": {"type": "junction", "cote": 95, "demande": 15},
                "N3": {"type": "junction", "cote": 90, "demande": 8},
                "N4": {"type": "junction", "cote": 85, "demande": 12},
                "N5": {"type": "junction", "cote": 80, "demande": 6}
            },
            "pipes": {
                "P1": {"noeud_amont": "R1", "noeud_aval": "N1", "longueur": 1000, "diametre": 0.3, "coefficient_rugosite": 120},
                "P2": {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 800, "diametre": 0.25, "coefficient_rugosite": 120},
                "P3": {"noeud_amont": "N2", "noeud_aval": "N3", "longueur": 600, "diametre": 0.2, "coefficient_rugosite": 120},
                "P4": {"noeud_amont": "N4", "noeud_aval": "N5", "longueur": 500, "diametre": 0.15, "coefficient_rugosite": 120}
            }
        }
    }
    
    # R√©seau 3: R√©seau sans source d'eau (devrait √©chouer)
    no_source_network = {
        "network": {
            "nodes": {
                "N1": {"type": "junction", "cote": 100, "demande": 10},
                "N2": {"type": "junction", "cote": 95, "demande": 15},
                "N3": {"type": "junction", "cote": 90, "demande": 8}
            },
            "pipes": {
                "P1": {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 800, "diametre": 0.25, "coefficient_rugosite": 120},
                "P2": {"noeud_amont": "N2", "noeud_aval": "N3", "longueur": 600, "diametre": 0.2, "coefficient_rugosite": 120}
            }
        }
    }
    
    return {
        "valid": valid_network,
        "orphaned": orphaned_network,
        "no_source": no_source_network
    }


def demo_quick_diagnostic():
    """D√©monstration du diagnostic rapide"""
    
    print("üîç D√âMONSTRATION: DIAGNOSTIC RAPIDE")
    print("=" * 50)
    
    networks = create_test_networks()
    
    for network_name, network_data in networks.items():
        print(f"\nüìã Test du r√©seau '{network_name.upper()}':")
        print("-" * 40)
        
        try:
            # Diagnostic rapide
            results = quick_diagnostic(network_data)
            
            print(f"   ‚Ä¢ Connectivit√©: {'‚úÖ' if results['connectivity'] else '‚ùå'}")
            print(f"   ‚Ä¢ Compatible EPANET: {'‚úÖ' if results['epanet_compatible'] else '‚ùå'}")
            
            if results['errors']:
                print(f"   ‚Ä¢ Erreurs: {len(results['errors'])}")
                for error in results['errors']:
                    print(f"     - {error}")
            
            if results['warnings']:
                print(f"   ‚Ä¢ Avertissements: {len(results['warnings'])}")
                for warning in results['warnings']:
                    print(f"     - {warning}")
            
            if results['topology']:
                print(f"   ‚Ä¢ Densit√© r√©seau: {results['topology'].get('densite', 'N/A'):.4f}")
                print(f"   ‚Ä¢ Composantes connexes: {results['topology'].get('composantes_connexes', 'N/A')}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")


def demo_epanet_integration():
    """D√©monstration de l'int√©gration EPANET avec diagnostics"""
    
    print("\n‚ö° D√âMONSTRATION: INT√âGRATION EPANET AVEC DIAGNOSTICS")
    print("=" * 60)
    
    networks = create_test_networks()
    
    for network_name, network_data in networks.items():
        print(f"\n{'='*80}")
        print(f"üåê SIMULATION: R√©seau '{network_name.upper()}'")
        print(f"{'='*80}")
        
        try:
            # Simulation EPANET avec diagnostics
            results = run_epanet_with_diagnostics(network_data)
            
            # Affichage des r√©sultats
            print(f"\nüìä R√âSULTATS DE LA SIMULATION:")
            print(f"   ‚Ä¢ Succ√®s: {'‚úÖ' if results['success'] else '‚ùå'}")
            
            if results['success']:
                print(f"   ‚Ä¢ Statistiques EPANET:")
                stats = results['epanet_results'].get('statistics', {})
                print(f"     - It√©rations: {stats.get('iterations', 'N/A')}")
                print(f"     - Erreur relative: {stats.get('relative_error', 'N/A'):.2e}")
                print(f"     - Erreur max t√™te: {stats.get('max_head_error', 'N/A'):.2e}")
                print(f"     - Changement max d√©bit: {stats.get('max_flow_change', 'N/A'):.2e}")
                print(f"     - Bilan de masse: {stats.get('mass_balance', 'N/A'):.2e}")
                
                print(f"   ‚Ä¢ R√©sultats n≈ìuds: {len(results['epanet_results'].get('nodes', {}))}")
                print(f"   ‚Ä¢ R√©sultats conduites: {len(results['epanet_results'].get('pipes', {}))}")
            
            if results['errors']:
                print(f"   ‚Ä¢ Erreurs: {len(results['errors'])}")
                for error in results['errors']:
                    print(f"     - {error}")
            
            if results['warnings']:
                print(f"   ‚Ä¢ Avertissements: {len(results['warnings'])}")
                for warning in results['warnings']:
                    print(f"     - {warning}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la simulation: {e}")
        
        print(f"\n{'-'*80}")


def demo_with_real_file():
    """D√©monstration avec un fichier r√©seau r√©el"""
    
    print("\nüåê D√âMONSTRATION: FICHIER R√âSEAU R√âEL")
    print("=" * 50)
    
    # Chercher un fichier r√©seau valide
    test_file = "examples/reseau_test_avec_source.yml"
    
    if os.path.exists(test_file):
        print(f"üìÅ Test avec le fichier: {test_file}")
        
        try:
            with open(test_file, 'r', encoding='utf-8') as f:
                network_data = yaml.safe_load(f)
            
            print("‚úÖ Fichier charg√© avec succ√®s")
            
            # Diagnostic rapide
            print("\nüîç Diagnostic rapide:")
            results = quick_diagnostic(network_data)
            
            print(f"   ‚Ä¢ Connectivit√©: {'‚úÖ' if results['connectivity'] else '‚ùå'}")
            print(f"   ‚Ä¢ Compatible EPANET: {'‚úÖ' if results['epanet_compatible'] else '‚ùå'}")
            
            if results['connectivity'] and results['epanet_compatible']:
                print("\n‚ö° Simulation EPANET (optionnelle):")
                print("   ‚Ä¢ Pour lancer la simulation compl√®te, d√©commentez la ligne suivante:")
                print("   ‚Ä¢ run_epanet_with_diagnostics(network_data)")
                
                # D√©commentez la ligne suivante pour tester la simulation compl√®te
                # epanet_results = run_epanet_with_diagnostics(network_data)
                # print(f"   ‚Ä¢ R√©sultat: {'‚úÖ Succ√®s' if epanet_results['success'] else '‚ùå √âchec'}")
            
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    else:
        print(f"‚ö†Ô∏è  Fichier de test non trouv√©: {test_file}")


def main():
    """Fonction principale de d√©monstration"""
    
    print("üöÄ D√âMONSTRATION: DIAGNOSTIC DE CONNECTIVIT√â R√âSEAU")
    print("=" * 60)
    print("Ce script d√©montre l'utilisation des nouvelles fonctionnalit√©s de")
    print("diagnostic de connectivit√© r√©seau pour pr√©venir l'erreur EPANET 110.")
    print("=" * 60)
    
    # D√©monstration 1: Diagnostic rapide
    demo_quick_diagnostic()
    
    # D√©monstration 2: Int√©gration EPANET
    demo_epanet_integration()
    
    # D√©monstration 3: Fichier r√©el
    demo_with_real_file()
    
    print(f"\n{'='*60}")
    print("‚úÖ D√âMONSTRATION TERMIN√âE")
    print("=" * 60)
    
    print("\nüí° UTILISATION DANS VOTRE CODE:")
    print("   ‚Ä¢ Importez: from lcpi.aep.core.epanet_integration import run_epanet_with_diagnostics")
    print("   ‚Ä¢ Utilisez: results = run_epanet_with_diagnostics(network_data)")
    print("   ‚Ä¢ V√©rifiez: if results['success']: ...")
    
    print("\nüîß AVANTAGES:")
    print("   ‚Ä¢ Diagnostic automatique avant EPANET")
    print("   ‚Ä¢ Pr√©vention de l'erreur 110")
    print("   ‚Ä¢ Messages d'erreur clairs et actionables")
    print("   ‚Ä¢ Analyse topologique compl√®te")
    print("   ‚Ä¢ Validation de compatibilit√© EPANET")
    
    print("\nüìã PROCHAINES √âTAPES:")
    print("   ‚Ä¢ Int√©grez cette fonction dans votre workflow EPANET existant")
    print("   ‚Ä¢ Remplacez les appels directs √† EPANET par run_epanet_with_diagnostics")
    print("   ‚Ä¢ Utilisez les diagnostics pour corriger vos r√©seaux probl√©matiques")


if __name__ == "__main__":
    main() 