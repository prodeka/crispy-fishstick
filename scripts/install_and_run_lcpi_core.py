#!/usr/bin/env python3
"""
Script d'installation et de lancement LCPI-CLI Core (am√©lior√©)

Objectifs:
- Mode non interactif pour CI/automation (pas d'input bloquant)
- Installation des requirements (offline/online avec fallback)
- Installation en mode √©ditable (pip install -e .)
- Activation de plugins param√©trables (base et m√©tier)
- V√©rification de la CLI (lcpi --help) fiable

Usage rapide (non interactif):
  python scripts/install_and_run_lcpi_core.py --accept-license --install-editable --plugins aep,cm,bois,beton,hydro --offline

Remarques:
- Les prompts sont d√©sactivables via --accept-license / --no-input
- En offline, les paquets sont pris depuis vendor/packages si pr√©sent
"""

import os
import sys
import json
import pathlib
import traceback
import subprocess
import urllib.request
import argparse
import glob
import shutil
import site
import sysconfig
from datetime import datetime

# Configuration
PROJECT_NAME = "LCPI-CLI"
VERSION = "2.0.0"
LICENSE_FILE = "docs/LICENSE.md"
DISCLAIMER_FILE = "docs/DISCLAIMER.md"

# Plugins de base (activ√©s par d√©faut)
BASE_PLUGINS = ["shell", "utils"]
# Plugins m√©tier disponibles (liste indicative)
BUSINESS_PLUGINS = ["beton", "bois", "cm", "hydro", "aep"]

def get_project_root() -> str:
    return os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

def force_utf8():
    """Force l'encodage UTF-8 c√¥t√© terminal et Python (surtout sous Windows)."""
    # Variables d'environnement pour Python
    os.environ.setdefault('PYTHONUTF8', '1')
    os.environ.setdefault('PYTHONIOENCODING', 'utf-8')
    if os.name == 'nt':
        # Console en UTF-8
        try:
            os.system('chcp 65001 > NUL')
        except Exception:
            pass
        # Reconfigurer les flux Python
        for stream_name in ('stdout', 'stderr', 'stdin'):
            try:
                stream = getattr(sys, stream_name)
                stream.reconfigure(encoding='utf-8', errors='replace')  # type: ignore[attr-defined]
            except Exception:
                pass

def print_banner():
    """Affiche la banni√®re d'accueil"""
    print("=" * 60)
    print(f"    {PROJECT_NAME} v{VERSION} - Installation Core")
    print("=" * 60)
    print()

def cleanup_invalid_distributions():
    """Supprime les distributions cass√©es (ex. dossier '~ip') qui provoquent des warnings pip."""
    try:
        site_packages = None
        # Essayer via site
        try:
            for p in site.getsitepackages():
                if p.endswith('site-packages') and os.path.isdir(p):
                    site_packages = p
                    break
        except Exception:
            pass
        # Fallback via sysconfig
        if not site_packages:
            site_packages = sysconfig.get_paths().get('purelib')
        if not site_packages or not os.path.isdir(site_packages):
            return
        patterns = [os.path.join(site_packages, '~ip*')]
        removed = []
        for pattern in patterns:
            for path in glob.glob(pattern):
                try:
                    if os.path.isdir(path):
                        shutil.rmtree(path, ignore_errors=True)
                        removed.append(os.path.basename(path))
                    elif os.path.isfile(path):
                        os.remove(path)
                        removed.append(os.path.basename(path))
                except Exception:
                    pass
        if removed:
            print(f"üßπ Nettoyage des distributions invalides: {', '.join(sorted(set(removed)))})")
    except Exception:
        # Ne pas bloquer si le nettoyage √©choue
        pass

def parse_args():
    parser = argparse.ArgumentParser(description="Installateur LCPI-CLI Core")
    parser.add_argument("--accept-license", action="store_true", help="Accepter licence/disclaimer sans prompt")
    parser.add_argument("--offline", action="store_true", help="Installer les d√©pendances en mode hors-ligne")
    parser.add_argument("--plugins", type=str, default="aep", help="Plugins m√©tier √† activer, s√©par√©s par des virgules (ex: aep,cm)")
    parser.add_argument("--install-editable", action="store_true", help="Installer lcpi-cli en mode √©ditable (pip install -e .)")
    parser.add_argument("--no-input", action="store_true", help="D√©sactiver tous les prompts interactifs")
    parser.add_argument("--verbose", action="store_true", help="Sortie d√©taill√©e")
    return parser.parse_args()

def check_internet_connection(url='http://www.google.com', timeout=5):
    """V√©rifie la connexion Internet"""
    try:
        urllib.request.urlopen(url, timeout=timeout)
        print("‚úÖ Connexion Internet d√©tect√©e.")
        return True
    except (urllib.error.URLError, ConnectionResetError):
        print("‚ùå Pas de connexion Internet d√©tect√©e.")
        return False

def display_license_and_disclaimer(accept: bool = False, no_input: bool = False):
    """Affiche la licence et le disclaimer"""
    print("üìã ACCEPTATION DE LA LICENCE ET DU DISCLAIMER")
    print("-" * 50)
    
    # Afficher la licence
    if os.path.exists(LICENSE_FILE):
        print("üìÑ LICENCE:")
        try:
            with open(LICENSE_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
                # Afficher les sections importantes
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.startswith('#') or 'Tous Droits R√©serv√©s' in line or 'Utilisation Autoris√©e' in line:
                        print(line)
                    elif line.strip() and i < 50:  # Premi√®res lignes importantes
                        print(line)
                print("... (voir docs/LICENSE.md pour le texte complet)")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de la lecture de la licence: {e}")
    
    # Afficher le disclaimer
    if os.path.exists(DISCLAIMER_FILE):
        print("\nüìÑ DISCLAIMER:")
        try:
            with open(DISCLAIMER_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.startswith('#') or 'Objectif P√©dagogique' in line or 'Utilisation sous la Seule Responsabilit√©' in line:
                        print(line)
                    elif line.strip() and i < 30:  # Premi√®res lignes importantes
                        print(line)
                print("... (voir docs/DISCLAIMER.md pour le texte complet)")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de la lecture du disclaimer: {e}")
    
    print("\n" + "=" * 50)
    print("‚ö†Ô∏è  AVERTISSEMENT IMPORTANT:")
    print("Ce logiciel est fourni √† des fins p√©dagogiques et exp√©rimentales.")
    print("Toute utilisation professionnelle n√©cessite une validation externe.")
    print("=" * 50)
    
    # Mode silencieux
    if accept or no_input or os.getenv("LCPI_ACCEPT_LICENSE", "").lower() in ("1","true","yes","o","oui"):
        print("‚úÖ Licence et disclaimer accept√©s (mode non interactif).")
        return True

    # Demande interactive si autoris√©e
    if not no_input:
        while True:
            choice = input("\nAcceptez-vous la licence et le disclaimer ? (o/n): ").lower().strip()
            if choice in ['o', 'oui', 'y', 'yes']:
                print("‚úÖ Licence et disclaimer accept√©s.")
                return True
            elif choice in ['n', 'non', 'no']:
                print("‚ùå Installation annul√©e par l'utilisateur.")
                return False
            else:
                print("‚ùå Veuillez r√©pondre par 'o' (oui) ou 'n' (non).")
    print("‚ö†Ô∏è  Mode non interactif sans acceptation explicite: √©chec.")
    return False

def setup_license_system():
    """Configure le syst√®me de licence"""
    print("\nüîê Configuration du syst√®me de licence...")
    
    try:
        # Cr√©er le dossier .lcpi dans le r√©pertoire utilisateur
        license_dir = os.path.expanduser("~/.lcpi")
        os.makedirs(license_dir, exist_ok=True)
        
        license_file_path = os.path.join(license_dir, "license.key")
        
        if os.path.exists(license_file_path):
            print("‚úÖ Fichier de licence existant d√©tect√©.")
            return True
        else:
            print("üìù Cr√©ation du fichier de licence...")
            print(f"üìÅ Dossier cr√©√© : {license_dir}")
            print(f"üìÑ Fichier de licence : {license_file_path}")
            print("\nüìã INSTRUCTIONS POUR LA LICENCE :")
            print("1. Contactez le support pour obtenir votre cl√© de licence")
            print("2. Cr√©ez le fichier 'license.key' dans le dossier ci-dessus")
            print("3. Collez-y votre cl√© de licence")
            print("4. Relancez LCPI")
            
            # Cr√©er un fichier vide avec des instructions
            with open(license_file_path, 'w', encoding='utf-8') as f:
                f.write("# LCPI-CLI License Key\n")
                f.write("# Remplacez ce contenu par votre cl√© de licence\n")
                f.write("# Contactez le support pour obtenir votre licence\n")
                f.write("# Email: support@lcpi-cli.com\n")
            
            print("‚úÖ Fichier de licence cr√©√© avec instructions.")
            return True
            
    except Exception as e:
        print(f"‚ùå ERREUR lors de la configuration de la licence : {e}")
        return False

def test_license_system():
    """Teste le syst√®me de licence"""
    print("\nüîç Test du syst√®me de licence...")
    
    try:
        # Importer le syst√®me de licence
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
        src_path = os.path.join(project_root, 'src')
        sys.path.insert(0, src_path)
        
        from lcpi.license_validator import validate_license, get_license_info
        
        # Tester la validation
        is_valid, message = validate_license()
        
        if is_valid:
            # Message UX explicite
            try:
                from rich.panel import Panel
                from rich.console import Console
                console = Console()
                license_data = get_license_info()
                user = license_data.get('user_name', 'Utilisateur') if license_data else 'Utilisateur'
                exp = license_data.get('expiration_date', None) if license_data else None
                exp_str = f" (valide jusqu'au {exp[:10]})" if exp else ''
                console.print(Panel(f"‚úÖ Licence activ√©e avec succ√®s pour [bold]{user}[/bold]{exp_str}", style="green"))
            except Exception:
                print("‚úÖ Licence activ√©e avec succ√®s !")
            print(f"üìã {message}")
            return True
        else:
            print("‚ö†Ô∏è  Licence non valide ou absente.")
            print(f"üìã {message}")
            print("\nüí° Le syst√®me fonctionnera en mode d√©monstration.")
            return True  # On continue m√™me sans licence valide
            
    except ImportError:
        print("‚ö†Ô∏è  Module de licence non disponible.")
        print("üí° Le syst√®me fonctionnera sans v√©rification de licence.")
        return True
    except Exception as e:
        print(f"‚ùå ERREUR lors du test de licence : {e}")
        return False

def install_requirements(offline=False, verbose=False):
    """Installe les d√©pendances Python"""
    project_root = get_project_root()
    requirements_path = os.path.join(project_root, 'requirements.txt')

    if not os.path.exists(requirements_path):
        print("‚ùå ERREUR: Le fichier 'requirements.txt' est introuvable.", file=sys.stderr)
        return False

    vendor_dir = os.path.join(project_root, 'vendor', 'packages')
    if offline:
        print("\nüì¶ Installation des d√©pendances en mode hors ligne...")
        if not os.path.isdir(vendor_dir):
            print(f"‚ùå ERREUR: Le dossier des paquets hors ligne est introuvable.", file=sys.stderr)
            return False
        command = [sys.executable, "-m", "pip", "install", "--no-input", "--no-index", f"--find-links={vendor_dir}", "-r", requirements_path]
    else:
        print("\nüì¶ Installation des d√©pendances en ligne...")
        command = [sys.executable, "-m", "pip", "install", "--no-input", "-r", requirements_path]

    try:
        subprocess.check_call(command, cwd=project_root)
        print("‚úÖ D√©pendances install√©es avec succ√®s.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå ERREUR lors de l'installation des d√©pendances : {e}", file=sys.stderr)
        return False

def install_lcpi_core(editable=True, verbose=False):
    """Installe le noyau LCPI-CLI"""
    project_root = get_project_root()
    
    print("\nüîß Installation du noyau LCPI-CLI...")
    
    # V√©rifier que pyproject.toml existe
    pyproject_path = os.path.join(project_root, 'pyproject.toml')
    if not os.path.exists(pyproject_path):
        print("‚ùå ERREUR: Le fichier 'pyproject.toml' est introuvable.", file=sys.stderr)
        return False
    
    try:
        # Installer d'abord setuptools et wheel (offline si dispo, sinon online, sinon ignorer si d√©j√† pr√©sents)
        vendor_dir = os.path.join(project_root, 'vendor', 'packages')
        def tool_installed(mod_name: str) -> bool:
            try:
                __import__(mod_name)
                return True
            except Exception:
                return False

        # Setuptools
        try:
            if os.path.isdir(vendor_dir):
                print("üì¶ Installation des outils de build en mode hors ligne...")
                cmd_setuptools = [sys.executable, "-m", "pip", "install", "--no-index", f"--find-links={vendor_dir}", "setuptools"]
                subprocess.check_call(cmd_setuptools, cwd=project_root)
                print("‚úÖ setuptools install√© avec succ√®s.")
            else:
                # En ligne
                cmd_setuptools = [sys.executable, "-m", "pip", "install", "--upgrade", "setuptools"]
                subprocess.check_call(cmd_setuptools, cwd=project_root)
                print("‚úÖ setuptools install√©/mis √† jour.")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  setuptools d√©j√† install√© ou erreur: {e}")

        # wheel
        if not tool_installed('wheel'):
            try:
                if os.path.isdir(vendor_dir) and glob.glob(os.path.join(vendor_dir, 'wheel-*.whl')):
                    cmd_wheel = [sys.executable, "-m", "pip", "install", "--no-index", f"--find-links={vendor_dir}", "wheel"]
                    subprocess.check_call(cmd_wheel, cwd=project_root)
                    print("‚úÖ wheel install√© avec succ√®s (offline).")
                else:
                    cmd_wheel = [sys.executable, "-m", "pip", "install", "--upgrade", "wheel"]
                    subprocess.check_call(cmd_wheel, cwd=project_root)
                    print("‚úÖ wheel install√©/mis √† jour (online).")
            except subprocess.CalledProcessError as e:
                print(f"‚ö†Ô∏è  wheel non install√© (offline indisponible, online √©chou√©): {e}")
        else:
            print("‚úÖ wheel d√©j√† install√©.")
        
        # Installer en mode √©ditable ou standard
        print("üîß Installation du package LCPI-CLI...")
        if editable:
            command = [sys.executable, "-m", "pip", "install", "--no-input", "-e", "."]
        else:
            command = [sys.executable, "-m", "pip", "install", "--no-input", "."]
        subprocess.check_call(command, cwd=project_root)
        print("‚úÖ Noyau LCPI-CLI install√© avec succ√®s.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå ERREUR lors de l'installation du noyau : {e}", file=sys.stderr)
        return False

def configure_base_plugins(plugins_to_activate=None):
    """Configure les plugins de base uniquement"""
    print("\nüîå Configuration des plugins de base...")
    
    try:
        # Cr√©er le fichier de configuration des plugins
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
        plugins_config_path = os.path.join(project_root, 'src', 'lcpi', '.plugins.json')
        
        activate = list(BASE_PLUGINS)
        if plugins_to_activate:
            # Nettoyer et d√©dupliquer
            extra = [p.strip() for p in plugins_to_activate if p.strip()]
            for p in extra:
                if p not in activate:
                    activate.append(p)
        config = {
            "active_plugins": activate,
            "available_plugins": sorted(list(set(BASE_PLUGINS + BUSINESS_PLUGINS))),
            "installation_date": datetime.now().isoformat(),
            "version": VERSION
        }
        
        # Cr√©er le dossier si n√©cessaire
        os.makedirs(os.path.dirname(plugins_config_path), exist_ok=True)
        
        # √âcrire la configuration
        with open(plugins_config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        print(f"‚úÖ Plugins activ√©s : {', '.join(config['active_plugins'])}")
        print(f"üìã Plugins disponibles : {', '.join(config['available_plugins'])}")
        return True
    except Exception as e:
        print(f"‚ùå ERREUR lors de la configuration des plugins : {e}", file=sys.stderr)
        return False

def verify_installation(verbose=False):
    """V√©rifie que l'installation s'est bien pass√©e"""
    print("\nüîç V√©rification de l'installation...")
    
    try:
        # Tester l'import de LCPI
        import sys
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
        src_path = os.path.join(project_root, 'src')
        sys.path.insert(0, src_path)
        
        from lcpi.main import app
        print("‚úÖ Import de LCPI r√©ussi.")
        
        # Essayer lcpi --help via entr√©e console
        lcpi_bin = os.path.join(project_root, 'venv', 'Scripts', 'lcpi.exe')
        cmd = [lcpi_bin, "--help"] if os.path.isfile(lcpi_bin) else [sys.executable, "-m", "lcpi.cli", "--help"]
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
        if result.returncode == 0:
            print("‚úÖ CLI 'lcpi' disponible.")
            return True
        # Fallback: import direct ok, consid√©rer r√©ussi
        print("‚ö†Ô∏è  CLI non d√©tect√©e mais import LCPI OK.")
        return True
            
    except Exception as e:
        print(f"‚ùå ERREUR lors de la v√©rification : {e}", file=sys.stderr)
        return False

def display_next_steps():
    """Affiche les prochaines √©tapes pour l'utilisateur"""
    print("\n" + "=" * 60)
    print("üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS !")
    print("=" * 60)
    print()
    print("üìã PROCHAINES √âTAPES :")
    print()
    print("1. üöÄ Lancer LCPI :")
    print("   lcpi --help   # ou venv\\Scripts\\lcpi.exe --help sous Windows")
    print()
    print("2. üîå Activer des plugins m√©tier suppl√©mentaires (si n√©cessaire) :")
    print(f"   lcpi plugins install cm | bois | beton | hydro | aep")
    print()
    print("3. üìö Consulter la documentation :")
    print("   - docs/GUIDE_UTILISATION.md")
    print("   - docs/NOUVELLES_FONCTIONNALITES.md")
    print()
    print("4. üõ†Ô∏è  Utiliser le shell interactif :")
    print("   lcpi shell")
    print()
    print("5. üîê Gestion de la licence :")
    print("   - V√©rifiez votre licence : ~/.lcpi/license.key")
    print("   - Contactez le support pour obtenir une licence")
    print()
    print("‚ö†Ô∏è  RAPPEL : Ce logiciel est √† usage p√©dagogique.")
    print("   Toute utilisation professionnelle n√©cessite une validation externe.")
    print("=" * 60)

def main():
    """Fonction principale"""
    args = parse_args()
    # Encodage UTF-8 en tout d√©but
    force_utf8()
    # Nettoyage des distributions invalides (√©vite les warnings pip)
    cleanup_invalid_distributions()
    print_banner()

    # √âtape 1: Licence & disclaimer
    if not display_license_and_disclaimer(accept=args.accept_license, no_input=args.no_input):
        sys.exit(1)

    # √âtape 2: Syst√®me de licence
    if not setup_license_system():
        print("\n‚ùå La configuration du syst√®me de licence a √©chou√©.")
        sys.exit(1)

    # √âtape 3: Requirements
    ok = install_requirements(offline=args.offline, verbose=args.verbose)
    if not ok and not args.offline:
        # Fallback offline si vendor pr√©sent
        print("\n‚ö†Ô∏è  √âchec online, tentative hors-ligne si paquets dispo...")
        ok = install_requirements(offline=True, verbose=args.verbose)
    if not ok:
        print("\n‚ùå Installation des d√©pendances √©chou√©e.")
        sys.exit(1)

    # √âtape 4: Installation du noyau (editable si demand√©)
    if not install_lcpi_core(editable=args.install_editable, verbose=args.verbose):
        print("\n‚ùå L'installation du noyau LCPI a √©chou√©.")
        sys.exit(1)

    # √âtape 5: Plugins
    plugins_list = [p.strip() for p in (args.plugins or '').split(',') if p.strip()]
    if not configure_base_plugins(plugins_to_activate=plugins_list):
        print("\n‚ùå La configuration des plugins a √©chou√©.")
        sys.exit(1)

    # √âtape 6: Licence runtime (facultatif, continue m√™me si invalide)
    test_license_system()

    # √âtape 7: V√©rification
    if not verify_installation(verbose=args.verbose):
        print("\n‚ùå La v√©rification de l'installation a √©chou√©.")
        sys.exit(1)

    # √âtape 8: Fin
    display_next_steps()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Installation interrompue par l'utilisateur.")
        sys.exit(130)
    except Exception as e:
        print("\n‚ùå ERREUR CRITIQUE INATTENDUE", file=sys.stderr)
        traceback.print_exc()
        sys.exit(1)
    finally:
        print("\nüìù Fin du script d'installation.")
