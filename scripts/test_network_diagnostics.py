#!/usr/bin/env python3
"""
Script de test pour le diagnostic de connectivit√© r√©seau

Ce script d√©montre l'utilisation des fonctions de diagnostic
pour identifier les probl√®mes de connectivit√© dans les r√©seaux hydrauliques.
"""

import sys
import os
import yaml
from pathlib import Path

# Ajouter le r√©pertoire src au path pour importer les modules LCPI
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from lcpi.aep.core.network_diagnostics import (
    diagnose_network_connectivity,
    analyze_network_topology,
    validate_epanet_compatibility
)


def create_test_networks():
    """Cr√©e des r√©seaux de test avec diff√©rents probl√®mes de connectivit√©"""
    
    # R√©seau 1: R√©seau valide avec une source d'eau
    valid_network = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "cote": 100, "demande": 0},
                "N1": {"type": "junction", "cote": 90, "demande": 10},
                "N2": {"type": "junction", "cote": 85, "demande": 15},
                "N3": {"type": "junction", "cote": 80, "demande": 8}
            },
            "pipes": {
                "P1": {"noeud_amont": "R1", "noeud_aval": "N1", "longueur": 1000, "diametre": 0.3},
                "P2": {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 800, "diametre": 0.25},
                "P3": {"noeud_amont": "N2", "noeud_aval": "N3", "longueur": 600, "diametre": 0.2}
            }
        }
    }
    
    # R√©seau 2: R√©seau avec composante orpheline (pas de source d'eau)
    orphaned_network = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "cote": 100, "demande": 0},
                "N1": {"type": "junction", "cote": 90, "demande": 10},
                "N2": {"type": "junction", "cote": 85, "demande": 15},
                "N3": {"type": "junction", "cote": 80, "demande": 8},
                "N4": {"type": "junction", "cote": 75, "demande": 12},
                "N5": {"type": "junction", "cote": 70, "demande": 6}
            },
            "pipes": {
                "P1": {"noeud_amont": "R1", "noeud_aval": "N1", "longueur": 1000, "diametre": 0.3},
                "P2": {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 800, "diametre": 0.25},
                "P3": {"noeud_amont": "N2", "noeud_aval": "N3", "longueur": 600, "diametre": 0.2},
                "P4": {"noeud_amont": "N4", "noeud_aval": "N5", "longueur": 500, "diametre": 0.15}
            }
        }
    }
    
    # R√©seau 3: R√©seau sans source d'eau
    no_source_network = {
        "network": {
            "nodes": {
                "N1": {"type": "junction", "cote": 90, "demande": 10},
                "N2": {"type": "junction", "cote": 85, "demande": 15},
                "N3": {"type": "junction", "cote": 80, "demande": 8}
            },
            "pipes": {
                "P1": {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 800, "diametre": 0.25},
                "P2": {"noeud_amont": "N2", "noeud_aval": "N3", "longueur": 600, "diametre": 0.2}
            }
        }
    }
    
    return {
        "valid": valid_network,
        "orphaned": orphaned_network,
        "no_source": no_source_network
    }


def test_network_diagnostics():
    """Teste les fonctions de diagnostic sur diff√©rents r√©seaux"""
    
    print("üß™ TEST DES FONCTIONS DE DIAGNOSTIC R√âSEAU")
    print("=" * 50)
    
    networks = create_test_networks()
    
    for network_name, network_data in networks.items():
        print(f"\n{'='*60}")
        print(f"üìã TEST: R√©seau '{network_name.upper()}'")
        print(f"{'='*60}")
        
        try:
            # Test 1: Diagnostic de connectivit√©
            print(f"\nüîç 1. DIAGNOSTIC DE CONNECTIVIT√â")
            is_connected = diagnose_network_connectivity(network_data)
            print(f"R√©sultat: {'‚úÖ CONNECT√â' if is_connected else '‚ùå NON CONNECT√â'}")
            
            # Test 2: Analyse topologique
            print(f"\nüî¨ 2. ANALYSE TOPOLOGIQUE")
            topology = analyze_network_topology(network_data)
            
            # Test 3: Validation EPANET
            print(f"\nüîß 3. VALIDATION EPANET")
            validation = validate_epanet_compatibility(network_data)
            
            # R√©sum√©
            print(f"\nüìä R√âSUM√â DU TEST '{network_name.upper()}':")
            print(f"   ‚Ä¢ Connectivit√©: {'‚úÖ' if is_connected else '‚ùå'}")
            print(f"   ‚Ä¢ Compatibilit√© EPANET: {'‚úÖ' if validation['compatible'] else '‚ùå'}")
            print(f"   ‚Ä¢ Erreurs d√©tect√©es: {len(validation['erreurs'])}")
            print(f"   ‚Ä¢ Avertissements: {len(validation['avertissements'])}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test du r√©seau '{network_name}': {e}")
        
        print(f"\n{'-'*60}")


def test_with_real_network():
    """Test avec un r√©seau r√©el (si disponible)"""
    
    print(f"\n{'='*60}")
    print(f"üåê TEST AVEC R√âSEAU R√âEL")
    print(f"{'='*60}")
    
    # Chercher un fichier r√©seau dans les exemples
    example_files = [
        "examples/hardy_cross_test.yml",
        "examples/canal_exemple.yml",
        "data/canaux_a_dimensionner.csv"
    ]
    
    for file_path in example_files:
        if os.path.exists(file_path):
            print(f"\nüìÅ Test avec le fichier: {file_path}")
            
            try:
                if file_path.endswith('.yml'):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        network_data = yaml.safe_load(f)
                    
                    # Adapter la structure si n√©cessaire
                    if "network" not in network_data:
                        print("   ‚ö†Ô∏è  Structure de donn√©es non standard, adaptation...")
                        # Cr√©er une structure compatible
                        if "canal" in network_data:
                            # C'est un fichier canal, pas un r√©seau
                            print("   ‚ÑπÔ∏è  Fichier canal d√©tect√©, ignor√©")
                            continue
                    
                    print("   ‚úÖ Fichier charg√© avec succ√®s")
                    
                    # Test rapide de connectivit√©
                    try:
                        is_connected = diagnose_network_connectivity(network_data)
                        print(f"   ‚Ä¢ Connectivit√©: {'‚úÖ' if is_connected else '‚ùå'}")
                    except Exception as e:
                        print(f"   ‚Ä¢ Erreur diagnostic: {e}")
                
                elif file_path.endswith('.csv'):
                    print("   ‚ÑπÔ∏è  Fichier CSV d√©tect√©, conversion n√©cessaire")
                    # Ici on pourrait ajouter la conversion CSV vers le format r√©seau
                    continue
                    
            except Exception as e:
                print(f"   ‚ùå Erreur lors du chargement: {e}")
            
            break
    else:
        print("   ‚ÑπÔ∏è  Aucun fichier r√©seau de test trouv√©")


def main():
    """Fonction principale"""
    
    print("üöÄ D√âMARRAGE DES TESTS DE DIAGNOSTIC R√âSEAU")
    print("=" * 60)
    
    # Test 1: R√©seaux de test
    test_network_diagnostics()
    
    # Test 2: R√©seau r√©el
    test_with_real_network()
    
    print(f"\n{'='*60}")
    print("‚úÖ TESTS TERMIN√âS")
    print("=" * 60)
    print("\nüí° UTILISATION:")
    print("   ‚Ä¢ Importez le module: from lcpi.aep.core.network_diagnostics import diagnose_network_connectivity")
    print("   ‚Ä¢ Appelez la fonction: diagnose_network_connectivity(network_data)")
    print("   ‚Ä¢ La fonction retourne True si le r√©seau est enti√®rement aliment√©")
    print("\nüîß INT√âGRATION:")
    print("   ‚Ä¢ Ajoutez cette fonction avant l'appel √† EPANET")
    print("   ‚Ä¢ Utilisez-la pour diagnostiquer l'erreur 110")
    print("   ‚Ä¢ Corrigez les probl√®mes de connectivit√© identifi√©s")


if __name__ == "__main__":
    main() 