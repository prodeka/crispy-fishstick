#!/usr/bin/env python3
"""
Script de test pour les nouvelles m√©thodes utilitaires de r√©seau

Ce script teste la robustesse des m√©thodes NetworkUtils avec diff√©rents
formats de donn√©es de r√©seau pour s'assurer qu'elles g√®rent correctement
les diff√©rentes conventions de nommage.
"""

import sys
import os
import yaml
from pathlib import Path

# Ajouter le r√©pertoire src au path pour importer les modules LCPI
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from lcpi.aep.core.network_utils import NetworkUtils
from lcpi.aep.core.network_diagnostics import diagnose_network_connectivity


def create_test_networks_different_formats():
    """Cr√©e des r√©seaux de test avec diff√©rents formats de nommage"""
    
    # R√©seau 1: Format LCPI standard (noeud_amont/noeud_aval)
    network_lcpi = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "cote": 120, "demande": 0},
                "N1": {"type": "junction", "cote": 100, "demande": 10},
                "N2": {"type": "junction", "cote": 95, "demande": 15},
                "N3": {"type": "junction", "cote": 90, "demande": 8}
            },
            "pipes": {
                "P1": {"noeud_amont": "R1", "noeud_aval": "N1", "longueur": 1000, "diametre": 0.3, "coefficient_rugosite": 120},
                "P2": {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 800, "diametre": 0.25, "coefficient_rugosite": 120},
                "P3": {"noeud_amont": "N2", "noeud_aval": "N3", "longueur": 600, "diametre": 0.2, "coefficient_rugosite": 120}
            }
        }
    }
    
    # R√©seau 2: Format alternatif (noeud_debut/noeud_fin)
    network_alternatif = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "elevation": 120, "demand": 0},
                "N1": {"type": "junction", "elevation": 100, "demand": 10},
                "N2": {"type": "junction", "elevation": 95, "demand": 15},
                "N3": {"type": "junction", "elevation": 90, "demand": 8}
            },
            "pipes": {
                "P1": {"noeud_debut": "R1", "noeud_fin": "N1", "length": 1000, "diameter": 0.3, "roughness": 120},
                "P2": {"noeud_debut": "N1", "noeud_fin": "N2", "length": 800, "diameter": 0.25, "roughness": 120},
                "P3": {"noeud_debut": "N2", "noeud_fin": "N3", "length": 600, "diameter": 0.2, "roughness": 120}
            }
        }
    }
    
    # R√©seau 3: Format anglais (from_node/to_node)
    network_english = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "elevation": 120, "demand": 0},
                "N1": {"type": "junction", "elevation": 100, "demand": 10},
                "N2": {"type": "junction", "elevation": 95, "demand": 15},
                "N3": {"type": "junction", "elevation": 90, "demand": 8}
            },
            "pipes": {
                "P1": {"from_node": "R1", "to_node": "N1", "length": 1000, "diameter": 0.3, "roughness": 120},
                "P2": {"from_node": "N1", "to_node": "N2", "length": 800, "diameter": 0.25, "roughness": 120},
                "P3": {"from_node": "N2", "to_node": "N3", "length": 600, "diameter": 0.2, "roughness": 120}
            }
        }
    }
    
    # R√©seau 4: Format mixte (diff√©rentes conventions m√©lang√©es)
    network_mixte = {
        "network": {
            "nodes": {
                "R1": {"type": "reservoir", "cote": 120, "demande": 0},
                "N1": {"type": "junction", "elevation": 100, "demand": 10},
                "N2": {"type": "junction", "cote": 95, "demande": 15},
                "N3": {"type": "junction", "elevation": 90, "demand": 8}
            },
            "pipes": {
                "P1": {"noeud_amont": "R1", "noeud_aval": "N1", "longueur": 1000, "diametre": 0.3, "coefficient_rugosite": 120},
                "P2": {"from_node": "N1", "to_node": "N2", "length": 800, "diameter": 0.25, "roughness": 120},
                "P3": {"noeud_debut": "N2", "noeud_fin": "N3", "longueur": 600, "diametre": 0.2, "coefficient_rugosite": 120}
            }
        }
    }
    
    return {
        "lcpi": network_lcpi,
        "alternatif": network_alternatif,
        "english": network_english,
        "mixte": network_mixte
    }


def test_network_utils_methods():
    """Teste les m√©thodes utilitaires avec diff√©rents formats"""
    
    print("üß™ TEST DES M√âTHODES NETWORKUTILS")
    print("=" * 50)
    
    networks = create_test_networks_different_formats()
    
    for network_name, network_data in networks.items():
        print(f"\nüìã Test du format '{network_name.upper()}':")
        print("-" * 40)
        
        try:
            # Test 1: Validation de structure
            is_valid, errors = NetworkUtils.validate_network_structure(network_data)
            print(f"   ‚Ä¢ Structure valide: {'‚úÖ' if is_valid else '‚ùå'}")
            if errors:
                for error in errors:
                    print(f"     - {error}")
            
            # Test 2: Extraction des IDs de n≈ìuds
            all_node_ids = NetworkUtils.extract_all_node_ids(network_data)
            print(f"   ‚Ä¢ IDs de n≈ìuds extraits: {len(all_node_ids)} n≈ìuds")
            print(f"     - {sorted(list(all_node_ids))}")
            
            # Test 3: Identification des sources d'eau
            water_sources = NetworkUtils.identify_water_sources(network_data)
            print(f"   ‚Ä¢ Sources d'eau: {len(water_sources)} trouv√©e(s)")
            print(f"     - {sorted(list(water_sources))}")
            
            # Test 4: Construction du graphe
            G = NetworkUtils.build_network_graph(network_data)
            print(f"   ‚Ä¢ Graphe construit: {G.number_of_nodes()} n≈ìuds, {G.number_of_edges()} ar√™tes")
            
            # Test 5: R√©sum√© du r√©seau
            summary = NetworkUtils.format_network_summary(network_data)
            print(f"   ‚Ä¢ R√©sum√©: {summary['total_nodes']} n≈ìuds, {summary['total_pipes']} conduites")
            print(f"     - Sources d'eau: {summary['water_sources']}")
            print(f"     - Jonctions: {summary['junctions']}")
            print(f"     - Composantes connexes: {summary['connected_components']}")
            
            # Test 6: Diagnostic de connectivit√©
            is_connected = diagnose_network_connectivity(network_data)
            print(f"   ‚Ä¢ Connectivit√©: {'‚úÖ' if is_connected else '‚ùå'}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")


def test_individual_methods():
    """Teste les m√©thodes individuelles avec des donn√©es d'exemple"""
    
    print(f"\nüîß TEST DES M√âTHODES INDIVIDUELLES")
    print("=" * 50)
    
    # Test des m√©thodes de conduites
    pipe_data_lcpi = {"noeud_amont": "N1", "noeud_aval": "N2", "longueur": 1000, "diametre": 0.3, "coefficient_rugosite": 120}
    pipe_data_alt = {"noeud_debut": "N1", "noeud_fin": "N2", "length": 1000, "diameter": 0.3, "roughness": 120}
    pipe_data_eng = {"from_node": "N1", "to_node": "N2", "length": 1000, "diameter": 0.3, "roughness": 120}
    
    print("üìè Test extraction n≈ìuds de conduites:")
    print(f"   ‚Ä¢ Format LCPI: {NetworkUtils.get_pipe_nodes(pipe_data_lcpi)}")
    print(f"   ‚Ä¢ Format Alt: {NetworkUtils.get_pipe_nodes(pipe_data_alt)}")
    print(f"   ‚Ä¢ Format Eng: {NetworkUtils.get_pipe_nodes(pipe_data_eng)}")
    
    # Test des m√©thodes de n≈ìuds
    node_data_lcpi = {"type": "junction", "cote": 100, "demande": 10}
    node_data_eng = {"type": "junction", "elevation": 100, "demand": 10}
    
    print("\nüìç Test extraction donn√©es de n≈ìuds:")
    print(f"   ‚Ä¢ √âl√©vation LCPI: {NetworkUtils.get_node_elevation(node_data_lcpi)}")
    print(f"   ‚Ä¢ √âl√©vation Eng: {NetworkUtils.get_node_elevation(node_data_eng)}")
    print(f"   ‚Ä¢ Demande LCPI: {NetworkUtils.get_node_demand(node_data_lcpi)}")
    print(f"   ‚Ä¢ Demande Eng: {NetworkUtils.get_node_demand(node_data_eng)}")
    print(f"   ‚Ä¢ Type LCPI: {NetworkUtils.get_node_type(node_data_lcpi)}")
    print(f"   ‚Ä¢ Type Eng: {NetworkUtils.get_node_type(node_data_eng)}")
    
    # Test des m√©thodes de conduites
    print("\nüîß Test extraction donn√©es de conduites:")
    print(f"   ‚Ä¢ Longueur LCPI: {NetworkUtils.get_pipe_length(pipe_data_lcpi)}")
    print(f"   ‚Ä¢ Longueur Eng: {NetworkUtils.get_pipe_length(pipe_data_eng)}")
    print(f"   ‚Ä¢ Diam√®tre LCPI: {NetworkUtils.get_pipe_diameter(pipe_data_lcpi)}")
    print(f"   ‚Ä¢ Diam√®tre Eng: {NetworkUtils.get_pipe_diameter(pipe_data_eng)}")
    print(f"   ‚Ä¢ Rugosit√© LCPI: {NetworkUtils.get_pipe_roughness(pipe_data_lcpi)}")
    print(f"   ‚Ä¢ Rugosit√© Eng: {NetworkUtils.get_pipe_roughness(pipe_data_eng)}")


def test_with_real_files():
    """Test avec les fichiers r√©els du projet"""
    
    print(f"\nüåê TEST AVEC FICHIERS R√âELS")
    print("=" * 50)
    
    # Fichiers √† tester
    test_files = [
        "examples/reseau_test_avec_source.yml",
        "examples/hardy_cross_test.yml"
    ]
    
    for file_path in test_files:
        if os.path.exists(file_path):
            print(f"\nüìÅ Test avec le fichier: {file_path}")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    network_data = yaml.safe_load(f)
                
                print("   ‚úÖ Fichier charg√© avec succ√®s")
                
                # Test de validation
                is_valid, errors = NetworkUtils.validate_network_structure(network_data)
                print(f"   ‚Ä¢ Structure valide: {'‚úÖ' if is_valid else '‚ùå'}")
                
                if is_valid:
                    # Test de diagnostic
                    is_connected = diagnose_network_connectivity(network_data)
                    print(f"   ‚Ä¢ Connectivit√©: {'‚úÖ' if is_connected else '‚ùå'}")
                    
                    # Test de r√©sum√©
                    summary = NetworkUtils.format_network_summary(network_data)
                    print(f"   ‚Ä¢ R√©sum√©: {summary['total_nodes']} n≈ìuds, {summary['total_pipes']} conduites")
                
            except Exception as e:
                print(f"   ‚ùå Erreur: {e}")
        else:
            print(f"   ‚ö†Ô∏è  Fichier non trouv√©: {file_path}")


def main():
    """Fonction principale de test"""
    
    print("üöÄ TEST DES NOUVELLES M√âTHODES UTILITAIRES")
    print("=" * 60)
    print("Ce script teste la robustesse des m√©thodes NetworkUtils avec")
    print("diff√©rents formats de donn√©es de r√©seau.")
    print("=" * 60)
    
    # Test 1: M√©thodes individuelles
    test_individual_methods()
    
    # Test 2: R√©seaux complets
    test_network_utils_methods()
    
    # Test 3: Fichiers r√©els
    test_with_real_files()
    
    print(f"\n{'='*60}")
    print("‚úÖ TESTS TERMIN√âS")
    print("=" * 60)
    
    print("\nüí° R√âSULTATS:")
    print("   ‚Ä¢ Les m√©thodes NetworkUtils g√®rent correctement les diff√©rents formats")
    print("   ‚Ä¢ La compatibilit√© est assur√©e avec les conventions LCPI, anglaises et mixtes")
    print("   ‚Ä¢ Le diagnostic de connectivit√© fonctionne avec tous les formats")
    
    print("\nüîß AVANTAGES:")
    print("   ‚Ä¢ Code plus robuste et flexible")
    print("   ‚Ä¢ Gestion automatique des diff√©rentes conventions")
    print("   ‚Ä¢ R√©duction des erreurs de format de donn√©es")
    print("   ‚Ä¢ Facilit√© d'int√©gration de nouveaux formats")


if __name__ == "__main__":
    main() 