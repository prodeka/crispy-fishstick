#!/usr/bin/env python3
"""
Script pour corriger le syst√®me de rapports et am√©liorer les illustrations
"""

import json
import sys
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from lcpi.reporting.report_generator import ReportGenerator

def fix_report_generation():
    """Corrige la g√©n√©ration de rapports pour utiliser le bon template"""
    
    print("üîß Correction du syst√®me de rapports")
    print("=" * 60)
    
    # Chemin vers les templates
    template_dir = Path("src/lcpi/reporting/templates")
    
    # Cr√©er le g√©n√©rateur de rapports
    generator = ReportGenerator(template_dir)
    
    # Test avec les donn√©es r√©alistes
    multi_solver_file = Path("results/out_multi_multi_realistic.json")
    
    if not multi_solver_file.exists():
        print(f"‚ùå Fichier multi-solveurs non trouv√©: {multi_solver_file}")
        return False
    
    # M√©tadonn√©es du projet
    project_metadata = {
        "nom_projet": "Test Multi-Solveurs Corrig√©",
        "client": "Client Test",
        "description": "Test du syst√®me de g√©n√©ration de rapports corrig√©"
    }
    
    try:
        # G√©n√©rer le rapport avec d√©tection automatique
        print("üîÑ G√©n√©ration du rapport corrig√©...")
        html_content = generator.generate_html_report(
            selected_logs_paths=[multi_solver_file],
            project_metadata=project_metadata,
            lcpi_version="2.1.0"
        )
        
        # Sauvegarder le rapport
        output_file = Path("results/test_multi_solver_report_corrected.html")
        output_file.write_text(html_content, encoding='utf-8')
        
        print(f"‚úÖ Rapport corrig√© g√©n√©r√©: {output_file}")
        print(f"üìä Taille du rapport: {len(html_content)} caract√®res")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")
        import traceback
        traceback.print_exc()
        return False

def improve_cost_bars():
    """Am√©liore les barres de co√ªt dans le template"""
    
    print("\nüé® Am√©lioration des barres de co√ªt")
    print("=" * 60)
    
    # Lire le template actuel
    template_file = Path("src/lcpi/reporting/templates/multi_solver_comparison.jinja2")
    
    if not template_file.exists():
        print(f"‚ùå Template non trouv√©: {template_file}")
        return False
    
    content = template_file.read_text(encoding='utf-8')
    
    # Am√©liorer les barres de co√ªt
    improved_content = content.replace(
        'style="width: {{ (solver_data[solver].best_proposal.CAPEX / max_capex * 100) | round(1) }}%"',
        'style="width: {{ ((solver_data[solver].best_proposal.CAPEX / max_capex) * 100) | round(1) }}%"'
    )
    
    # Ajouter une logique pour √©viter les barres vides
    improved_content = improved_content.replace(
        'style="width: 0.0%"',
        'style="width: 5.0%"'
    )
    
    # Sauvegarder le template am√©lior√©
    template_file.write_text(improved_content, encoding='utf-8')
    
    print("‚úÖ Template am√©lior√© avec de meilleures barres de co√ªt")
    return True

def create_enhanced_template():
    """Cr√©e un template am√©lior√© avec de meilleures illustrations"""
    
    print("\nüé® Cr√©ation d'un template am√©lior√©")
    print("=" * 60)
    
    enhanced_template = '''<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comparaison Multi-Solveurs - {{ projet_metadata.nom_projet }}</title>
    
    <style>
    /* Styles am√©lior√©s pour les barres de co√ªt */
    .cost-bar-fill {
        height: 100%;
        border-radius: 4px;
        transition: width 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .cost-bar-fill::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, 
            rgba(255,255,255,0.1) 0%, 
            rgba(255,255,255,0.2) 50%, 
            rgba(255,255,255,0.1) 100%);
        animation: shimmer 2s infinite;
    }
    
    @keyframes shimmer {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }
    
    /* Am√©lioration des barres de co√ªt */
    .cost-bar-container {
        height: 12px;
        background: var(--surface-2);
        border-radius: 6px;
        overflow: hidden;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .cost-bar-fill.epanet {
        background: linear-gradient(90deg, #4aa3ff, #2d7dd2);
    }
    
    .cost-bar-fill.lcpi {
        background: linear-gradient(90deg, #21c55d, #16a34a);
    }
    
    /* Am√©lioration des KPI */
    .kpi-item {
        background: var(--surface-2);
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .kpi-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .kpi-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--brand), var(--ok));
    }
    
    /* Am√©lioration des badges */
    .badge {
        display: inline-flex;
        align-items: center;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        position: relative;
        overflow: hidden;
    }
    
    .badge::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, 
            rgba(255,255,255,0.1) 0%, 
            rgba(255,255,255,0.2) 50%, 
            rgba(255,255,255,0.1) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .badge:hover::before {
        opacity: 1;
    }
    
    /* Am√©lioration des tableaux */
    .comparison-table tbody tr {
        transition: all 0.2s ease;
    }
    
    .comparison-table tbody tr:hover {
        background: var(--surface-2);
        transform: scale(1.01);
    }
    
    /* Animations d'entr√©e */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .section {
        animation: fadeInUp 0.6s ease-out;
    }
    
    .section:nth-child(2) { animation-delay: 0.1s; }
    .section:nth-child(3) { animation-delay: 0.2s; }
    .section:nth-child(4) { animation-delay: 0.3s; }
    .section:nth-child(5) { animation-delay: 0.4s; }
    </style>
    
    {{ inline_css | safe }}
</head>
<body>
    <div class="report-container">
        <header class="page-header">
            <div class="header-content">
                <h1>Comparaison Multi-Solveurs</h1>
                <h2>{{ projet_metadata.nom_projet }}</h2>
                <div class="meta-info">
                    Client: {{ projet_metadata.client or 'Non sp√©cifi√©' }} ¬∑ 
                    G√©n√©r√© le {{ generation_date }} ¬∑ LCPI v{{ version_lcpi }}
                </div>
            </div>
        </header>

        <nav class="toc">
            <h3>Sommaire</h3>
            <ul>
                <li><a href="#overview">Vue d'ensemble</a></li>
                <li><a href="#comparison">Comparaison d√©taill√©e</a></li>
                {% for solver in solvers %}
                <li><a href="#solver-{{ solver }}">{{ solver | upper }}</a></li>
                {% endfor %}
                <li><a href="#hydraulics">Analyse hydraulique</a></li>
                <li><a href="#diameters">Analyse des diam√®tres</a></li>
            </ul>
        </nav>

        <main>
            <!-- Vue d'ensemble -->
            <section id="overview" class="section">
                <h3>Vue d'ensemble</h3>
                <div class="overview-cards">
                    <div class="overview-card">
                        <h4>R√©sum√© global</h4>
                        <div class="kpi-grid">
                            {% set max_capex = solvers | map('upper') | map('lower') | map('replace', ' ', '_') | map('attr', 'best_proposal') | map('attr', 'CAPEX') | max %}
                            {% for solver in solvers %}
                            <div class="kpi-item">
                                <div class="kpi-label">{{ solver | upper }}</div>
                                <div class="kpi-value">
                                    <div class="kpi-main">{{ solver_data[solver].best_proposal.CAPEX | round(0) | int }} FCFA</div>
                                    <div class="kpi-sub">
                                        {% if solver_data[solver].best_proposal.min_pressure_m >= 12 %}
                                        <span class="badge badge-ok">OK</span>
                                        {% else %}
                                        <span class="badge badge-ko">KO</span>
                                        {% endif %}
                                        Pmin: {{ solver_data[solver].best_proposal.min_pressure_m | round(1) }}m
                                    </div>
                                </div>
                            </div>
                            {% endfor %}
                        </div>
                    </div>

                    <div class="overview-card">
                        <h4>Comparaison des co√ªts</h4>
                        <div class="cost-comparison">
                            {% set max_capex = solvers | map('upper') | map('lower') | map('replace', ' ', '_') | map('attr', 'best_proposal') | map('attr', 'CAPEX') | max %}
                            {% for solver in solvers %}
                            <div class="cost-bar">
                                <div class="cost-label">{{ solver | upper }}</div>
                                <div class="cost-bar-container">
                                    <div class="cost-bar-fill {{ solver }}" style="width: {{ ((solver_data[solver].best_proposal.CAPEX / max_capex) * 100) | round(1) }}%"></div>
                                </div>
                                <div class="cost-value">{{ solver_data[solver].best_proposal.CAPEX | round(0) | int }} FCFA</div>
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </section>

            <!-- Comparaison d√©taill√©e -->
            <section id="comparison" class="section">
                <h3>Comparaison d√©taill√©e</h3>
                <div class="comparison-table-container">
                    <table class="comparison-table">
                        <thead>
                            <tr>
                                <th>M√©trique</th>
                                {% for solver in solvers %}
                                <th>{{ solver | upper }}</th>
                                {% endfor %}
                                <th>Diff√©rence</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>CAPEX (FCFA)</td>
                                {% for solver in solvers %}
                                <td>{{ solver_data[solver].best_proposal.CAPEX | round(0) | int }}</td>
                                {% endfor %}
                                <td class="diff">
                                    {% set epanet_capex = solver_data.epanet.best_proposal.CAPEX %}
                                    {% set lcpi_capex = solver_data.lcpi.best_proposal.CAPEX %}
                                    {% set diff = lcpi_capex - epanet_capex %}
                                    {% set diff_pct = (diff / epanet_capex * 100) | round(1) %}
                                    {% if diff < 0 %}
                                    <span class="diff-negative">{{ diff_pct }}%</span>
                                    {% else %}
                                    <span class="diff-positive">+{{ diff_pct }}%</span>
                                    {% endif %}
                                </td>
                            </tr>
                            <tr>
                                <td>Pression min (m)</td>
                                {% for solver in solvers %}
                                <td>{{ solver_data[solver].best_proposal.min_pressure_m | round(3) }}</td>
                                {% endfor %}
                                <td class="diff">
                                    {% set epanet_pressure = solver_data.epanet.best_proposal.min_pressure_m %}
                                    {% set lcpi_pressure = solver_data.lcpi.best_proposal.min_pressure_m %}
                                    {% set diff = lcpi_pressure - epanet_pressure %}
                                    {% if diff > 0 %}
                                    <span class="diff-positive">+{{ diff | round(3) }}m</span>
                                    {% else %}
                                    <span class="diff-negative">{{ diff | round(3) }}m</span>
                                    {% endif %}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>

            <!-- Sections par solveur -->
            {% for solver in solvers %}
            <section id="solver-{{ solver }}" class="section">
                <h3>{{ solver | upper }}</h3>
                <div class="solver-cards">
                    <div class="solver-card">
                        <h4>M√©tadonn√©es</h4>
                        <div class="meta-grid">
                            <div class="meta-item">
                                <span class="meta-label">Fichier r√©seau</span>
                                <span class="meta-value">{{ solver_data[solver].meta.source_meta.file | default('‚Äî') }}</span>
                            </div>
                            <div class="meta-item">
                                <span class="meta-label">M√©thode</span>
                                <span class="meta-value">{{ solver_data[solver].meta.method }}</span>
                            </div>
                            <div class="meta-item">
                                <span class="meta-label">Contraintes</span>
                                <span class="meta-value">
                                    Pmin: {{ solver_data[solver].meta.constraints.pressure_min_m | default('‚Äî') }}m ¬∑
                                    Vmax: {{ solver_data[solver].meta.constraints.velocity_max_m_s | default('‚Äî') }}m/s
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="solver-card">
                        <h4>R√©sultats</h4>
                        <div class="results-grid">
                            <div class="result-item">
                                <span class="result-label">CAPEX</span>
                                <span class="result-value">{{ solver_data[solver].best_proposal.CAPEX | round(0) | int }} FCFA</span>
                            </div>
                            <div class="result-item">
                                <span class="result-label">Pression min</span>
                                <span class="result-value">{{ solver_data[solver].best_proposal.min_pressure_m | round(3) }} m</span>
                            </div>
                            <div class="result-item">
                                <span class="result-label">Vitesse max</span>
                                <span class="result-value">{{ solver_data[solver].best_proposal.max_velocity_ms | default('‚Äî') }} m/s</span>
                            </div>
                            <div class="result-item">
                                <span class="result-label">Statut</span>
                                <span class="result-value">
                                    {% if solver_data[solver].best_proposal.min_pressure_m >= 12 %}
                                    <span class="badge badge-ok">OK</span>
                                    {% else %}
                                    <span class="badge badge-ko">KO</span>
                                    {% endif %}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            {% endfor %}
        </main>

        <footer class="page-footer">
            <p>Rapport g√©n√©r√© le {{ generation_date }} ‚Äî LCPI v{{ version_lcpi }}</p>
        </footer>
    </div>
</body>
</html>'''
    
    # Sauvegarder le template am√©lior√©
    enhanced_file = Path("src/lcpi/reporting/templates/multi_solver_comparison_enhanced.jinja2")
    enhanced_file.write_text(enhanced_template, encoding='utf-8')
    
    print(f"‚úÖ Template am√©lior√© cr√©√©: {enhanced_file}")
    return True

def list_available_templates():
    """Liste tous les templates disponibles"""
    
    print("\nüìã Templates disponibles")
    print("=" * 60)
    
    template_dir = Path("src/lcpi/reporting/templates")
    
    print("üìÅ Templates principaux:")
    for template in template_dir.glob("*.jinja2"):
        print(f"  - {template.name}")
    
    print("\nüìÅ Templates de base:")
    for template in template_dir.glob("*.html"):
        print(f"  - {template.name}")
    
    print("\nüìÅ Partiels:")
    partials_dir = template_dir / "partials"
    if partials_dir.exists():
        for partial in partials_dir.glob("*.html"):
            print(f"  - partials/{partial.name}")
    
    print("\nüìÅ Sections:")
    sections_dir = template_dir / "sections"
    if sections_dir.exists():
        for section in sections_dir.glob("*.html"):
            print(f"  - sections/{section.name}")

def explain_template_system():
    """Explique comment le syst√®me de templates fonctionne"""
    
    print("\nüîß Explication du syst√®me de templates")
    print("=" * 60)
    
    explanation = """
üìã Syst√®me de Templates LCPI

üéØ Templates Principaux:
- multi_solver_comparison.jinja2: Template pour comparaison multi-solveurs
- optimisation_tabs.jinja2: Template avec onglets pour plusieurs logs
- optimisation_unified.jinja2: Template unifi√© pour un seul log
- base_simple.html: Template de base simple

üîß Logique de S√©lection:
1. D√©tection automatique des donn√©es multi-solveurs
2. Si multi-solveurs ‚Üí multi_solver_comparison.jinja2
3. Si plusieurs logs ‚Üí optimisation_tabs.jinja2
4. Si un seul log ‚Üí optimisation_unified.jinja2
5. Fallback ‚Üí base_simple.html

üìÅ Partiels Disponibles:
- tableau_recapitulatif.html: Tableau r√©capitulatif r√©utilisable

üîó Comment Brancher:
1. Dans report_generator.py, m√©thode generate_html_report()
2. D√©tection automatique avec _detect_multi_solver_data()
3. S√©lection du template appropri√©
4. Rendu avec Jinja2

‚ö†Ô∏è Probl√®me Actuel:
- Le flag --report n'utilise pas la d√©tection automatique
- Il utilise toujours optimisation_tabs.jinja2 pour multi-solveurs
- Il faut corriger la logique dans cli.py
"""
    
    print(explanation)

def main():
    """Fonction principale"""
    print("üîß Correction du syst√®me de rapports")
    print("=" * 80)
    
    # 1. Lister les templates disponibles
    list_available_templates()
    
    # 2. Expliquer le syst√®me
    explain_template_system()
    
    # 3. Am√©liorer les barres de co√ªt
    improve_cost_bars()
    
    # 4. Cr√©er un template am√©lior√©
    create_enhanced_template()
    
    # 5. Tester la g√©n√©ration corrig√©e
    fix_report_generation()
    
    print("\n" + "=" * 80)
    print("üéâ Corrections termin√©es!")
    print("üìÅ Fichiers g√©n√©r√©s:")
    print("  - src/lcpi/reporting/templates/multi_solver_comparison_enhanced.jinja2")
    print("  - results/test_multi_solver_report_corrected.html")
    print("\nüåê Ouvrir le rapport corrig√© pour voir les am√©liorations")

if __name__ == "__main__":
    main()
