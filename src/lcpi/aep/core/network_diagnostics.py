"""
Module de diagnostic de connectivit√© r√©seau pour LCPI AEP

Ce module fournit des outils pour diagnostiquer les probl√®mes de connectivit√©
dans les r√©seaux hydrauliques, notamment pour r√©soudre l'erreur EPANET 110.
"""

import networkx as nx
from typing import Dict, List, Any, Set, Tuple
import logging

try:
    from .network_utils import NetworkUtils
except ImportError:
    # Fallback pour les imports dynamiques
    import sys
    import os
    current_dir = os.path.dirname(os.path.abspath(__file__))
    network_utils_path = os.path.join(current_dir, "network_utils.py")
    
    import importlib.util
    spec = importlib.util.spec_from_file_location("network_utils", network_utils_path)
    network_utils_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(network_utils_module)
    NetworkUtils = network_utils_module.NetworkUtils

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def diagnose_network_connectivity(network_data: Dict[str, Any]) -> bool:
    """
    Diagnostique la connectivit√© d'un r√©seau hydraulique.
    
    Cette fonction analyse la structure du r√©seau pour identifier les probl√®mes
    de connectivit√© qui peuvent causer l'erreur EPANET 110 "cannot solve network 
    hydraulic equations".
    
    Args:
        network_data: Donn√©es du r√©seau au format LCPI
            {
                "network": {
                    "nodes": {
                        "node_id": {
                            "type": "reservoir" | "junction" | "tank",
                            "cote": elevation,
                            "demande": demand,
                            ...
                        }
                    },
                    "pipes": {
                        "pipe_id": {
                            "noeud_amont": "from_node_id",
                            "noeud_aval": "to_node_id",
                            ...
                        }
                    }
                }
            }
    
    Returns:
        bool: True si le r√©seau est enti√®rement aliment√©, False sinon
        
    Raises:
        ValueError: Si les donn√©es r√©seau sont invalides
    """
    
    print("üîç DIAGNOSTIC DE CONNECTIVIT√â R√âSEAU")
    print("=" * 50)
    
    try:
        # Validation des donn√©es d'entr√©e
        if not network_data or "network" not in network_data:
            raise ValueError("Donn√©es r√©seau invalides: cl√© 'network' manquante")
        
        network = network_data["network"]
        nodes_data = network.get("nodes", {})
        pipes_data = network.get("pipes", {})
        
        if not nodes_data:
            raise ValueError("Aucun n≈ìud trouv√© dans les donn√©es r√©seau")
        
        if not pipes_data:
            raise ValueError("Aucune conduite trouv√©e dans les donn√©es r√©seau")
        
        print(f"üìä Statistiques du r√©seau:")
        print(f"   ‚Ä¢ N≈ìuds: {len(nodes_data)}")
        print(f"   ‚Ä¢ Conduites: {len(pipes_data)}")
        
        # 1. Construction du graphe NetworkX
        print("\nüîß Construction du graphe r√©seau...")
        G = nx.Graph()
        
        # Ajouter tous les n≈ìuds
        for node_id, node_data in nodes_data.items():
            G.add_node(node_id, **node_data)
        
        # Ajouter toutes les conduites
        for pipe_id, pipe_data in pipes_data.items():
            node1, node2 = NetworkUtils.get_pipe_nodes(pipe_data)
            
            if node1 and node2 and node1 != node2:
                G.add_edge(node1, node2, pipe_id=pipe_id, **pipe_data)
            else:
                print(f"‚ö†Ô∏è  Conduite '{pipe_id}' ignor√©e: n≈ìuds invalides ({node1} -> {node2})")
        
        print(f"   ‚Ä¢ N≈ìuds dans le graphe: {G.number_of_nodes()}")
        print(f"   ‚Ä¢ Conduites dans le graphe: {G.number_of_edges()}")
        
        # 2. Identification des sources d'eau
        print("\nüíß Identification des sources d'eau...")
        water_sources = NetworkUtils.identify_water_sources(network_data)
        
        for node_id in water_sources:
            node_type = NetworkUtils.get_node_type(nodes_data[node_id])
            print(f"   ‚Ä¢ Source d'eau trouv√©e: {node_id} (type: {node_type})")
        
        if not water_sources:
            print("‚ùå ERREUR CRITIQUE: Aucune source d'eau (r√©servoir/tank) trouv√©e dans le r√©seau!")
            print("   EPANET n√©cessite au moins une source d'eau pour r√©soudre les √©quations hydrauliques.")
            return False
        
        print(f"   ‚Ä¢ Total sources d'eau: {len(water_sources)}")
        
        # 3. Analyse des composantes connexes
        print("\nüîó Analyse des composantes connexes...")
        connected_components = list(nx.connected_components(G))
        
        print(f"   ‚Ä¢ Nombre de composantes connexes: {len(connected_components)}")
        
        # 4. V√©rification de l'alimentation de chaque composante
        orphaned_components = []
        fed_components = []
        
        for i, component in enumerate(connected_components):
            component_sources = component.intersection(water_sources)
            
            if component_sources:
                fed_components.append({
                    "id": i + 1,
                    "nodes": component,
                    "sources": component_sources,
                    "size": len(component)
                })
                print(f"   ‚úÖ Composante {i+1}: {len(component)} n≈ìuds, aliment√©e par {len(component_sources)} source(s)")
            else:
                orphaned_components.append({
                    "id": i + 1,
                    "nodes": component,
                    "size": len(component)
                })
                print(f"   ‚ùå Composante {i+1}: {len(component)} n≈ìuds, AUCUNE SOURCE D'EAU")
        
        # 5. Rapport d√©taill√© des composantes orphelines
        if orphaned_components:
            print(f"\nüö® PROBL√àME D√âTECT√â: {len(orphaned_components)} composante(s) orpheline(s)")
            print("=" * 50)
            
            for orphan in orphaned_components:
                print(f"\nüìã Composante orpheline #{orphan['id']}:")
                print(f"   ‚Ä¢ Taille: {orphan['size']} n≈ìuds")
                print(f"   ‚Ä¢ N≈ìuds: {sorted(list(orphan['nodes']))[:10]}{'...' if len(orphan['nodes']) > 10 else ''}")
                
                # Identifier les n≈ìuds les plus proches des sources
                if water_sources:
                    closest_sources = _find_closest_sources(G, orphan['nodes'], water_sources)
                    print(f"   ‚Ä¢ Sources les plus proches: {closest_sources[:5]}")
        
        # 6. Statistiques finales
        print(f"\nüìà R√âSUM√â DU DIAGNOSTIC")
        print("=" * 30)
        print(f"   ‚Ä¢ Composantes aliment√©es: {len(fed_components)}")
        print(f"   ‚Ä¢ Composantes orphelines: {len(orphaned_components)}")
        print(f"   ‚Ä¢ N≈ìuds aliment√©s: {sum(c['size'] for c in fed_components)}")
        print(f"   ‚Ä¢ N≈ìuds orphelins: {sum(c['size'] for c in orphaned_components)}")
        
        # 7. Recommandations
        if orphaned_components:
            print(f"\nüí° RECOMMANDATIONS:")
            print("   ‚Ä¢ Ajouter des r√©servoirs ou tanks dans les composantes orphelines")
            print("   ‚Ä¢ V√©rifier la connectivit√© des conduites")
            print("   ‚Ä¢ S'assurer que toutes les parties du r√©seau sont accessibles depuis une source")
            print("   ‚Ä¢ Consid√©rer l'ajout de conduites de connexion si n√©cessaire")
            
            return False
        else:
            print(f"\n‚úÖ R√âSEAU ENTI√àREMENT ALIMENT√â")
            print("   ‚Ä¢ Toutes les composantes contiennent au moins une source d'eau")
            print("   ‚Ä¢ Le r√©seau devrait √™tre r√©solvable par EPANET")
            
            return True
            
    except Exception as e:
        print(f"‚ùå ERREUR LORS DU DIAGNOSTIC: {e}")
        logger.error(f"Erreur dans diagnose_network_connectivity: {e}", exc_info=True)
        raise


def _find_closest_sources(G: nx.Graph, orphan_nodes: Set[str], water_sources: Set[str]) -> List[Tuple[str, int]]:
    """
    Trouve les sources d'eau les plus proches d'un ensemble de n≈ìuds orphelins.
    
    Args:
        G: Graphe NetworkX du r√©seau
        orphan_nodes: Ensemble des n≈ìuds orphelins
        water_sources: Ensemble des sources d'eau
        
    Returns:
        Liste des (source_id, distance_minimale) tri√©e par distance
    """
    closest_sources = []
    
    for source in water_sources:
        if source in G:
            min_distance = float('inf')
            
            for orphan in orphan_nodes:
                if orphan in G:
                    try:
                        distance = nx.shortest_path_length(G, source, orphan)
                        min_distance = min(min_distance, distance)
                    except nx.NetworkXNoPath:
                        continue
            
            if min_distance != float('inf'):
                closest_sources.append((source, min_distance))
    
    # Trier par distance croissante
    closest_sources.sort(key=lambda x: x[1])
    return closest_sources


def analyze_network_topology(network_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Analyse approfondie de la topologie du r√©seau.
    
    Args:
        network_data: Donn√©es du r√©seau au format LCPI
        
    Returns:
        Dict contenant les analyses de topologie
    """
    print("\nüî¨ ANALYSE TOPOLOGIQUE APPROFONDIE")
    print("=" * 40)
    
    try:
        network = network_data["network"]
        nodes_data = network.get("nodes", {})
        pipes_data = network.get("pipes", {})
        
        # Construction du graphe
        G = nx.Graph()
        
        for node_id, node_data in nodes_data.items():
            G.add_node(node_id, **node_data)
        
        for pipe_id, pipe_data in pipes_data.items():
            node1, node2 = NetworkUtils.get_pipe_nodes(pipe_data)
            if node1 and node2 and node1 != node2:
                G.add_edge(node1, node2, pipe_id=pipe_id, **pipe_data)
            else:
                print(f"‚ö†Ô∏è  Conduite '{pipe_id}' ignor√©e dans analyze_network_topology: n≈ìuds invalides ({node1} -> {node2})")
        
        # Analyses topologiques
        analysis = {
            "nombre_noeuds": G.number_of_nodes(),
            "nombre_conduites": G.number_of_edges(),
            "composantes_connexes": len(list(nx.connected_components(G))),
            "densite": nx.density(G),
            "diametre": nx.diameter(G) if nx.is_connected(G) else "Infini (r√©seau non connexe)",
            "rayon": nx.radius(G) if nx.is_connected(G) else "Infini (r√©seau non connexe)",
            "centre": list(nx.center(G)) if nx.is_connected(G) else [],
            "peripherie": list(nx.periphery(G)) if nx.is_connected(G) else [],
            "degre_moyen": sum(dict(G.degree()).values()) / G.number_of_nodes() if G.number_of_nodes() > 0 else 0,
            "degre_max": max(dict(G.degree()).values()) if G.number_of_nodes() > 0 else 0,
            "degre_min": min(dict(G.degree()).values()) if G.number_of_nodes() > 0 else 0
        }
        
        # Affichage des r√©sultats
        print(f"   ‚Ä¢ Densit√© du r√©seau: {analysis['densite']:.4f}")
        print(f"   ‚Ä¢ Degr√© moyen: {analysis['degre_moyen']:.2f}")
        print(f"   ‚Ä¢ Degr√© min/max: {analysis['degre_min']}/{analysis['degre_max']}")
        
        if nx.is_connected(G):
            print(f"   ‚Ä¢ Diam√®tre: {analysis['diametre']}")
            print(f"   ‚Ä¢ Rayon: {analysis['rayon']}")
            print(f"   ‚Ä¢ Centre: {analysis['centre']}")
        else:
            print(f"   ‚Ä¢ ‚ö†Ô∏è  R√©seau non connexe: {analysis['composantes_connexes']} composantes")
        
        # Identification des n≈ìuds critiques
        if nx.is_connected(G):
            articulation_points = list(nx.articulation_points(G))
            bridges = list(nx.bridges(G))
            
            analysis["points_articulation"] = articulation_points
            analysis["ponts"] = bridges
            
            print(f"   ‚Ä¢ Points d'articulation: {len(articulation_points)}")
            print(f"   ‚Ä¢ Ponts (conduites critiques): {len(bridges)}")
            
            if articulation_points:
                print(f"     - Points critiques: {articulation_points[:5]}{'...' if len(articulation_points) > 5 else ''}")
        
        return analysis
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse topologique: {e}")
        return {}


def validate_epanet_compatibility(network_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Valide la compatibilit√© du r√©seau avec EPANET.
    
    Args:
        network_data: Donn√©es du r√©seau au format LCPI
        
    Returns:
        Dict contenant les validations EPANET
    """
    print("\nüîß VALIDATION COMPATIBILIT√â EPANET")
    print("=" * 35)
    
    validation = {
        "compatible": True,
        "erreurs": [],
        "avertissements": [],
        "recommandations": []
    }
    
    try:
        network = network_data["network"]
        nodes_data = network.get("nodes", {})
        pipes_data = network.get("pipes", {})
        
        # 1. V√©rification des sources d'eau
        water_sources = [nid for nid, ndata in nodes_data.items() 
                        if ndata.get("type", "").lower() in ["reservoir", "tank"]]
        
        if not water_sources:
            validation["compatible"] = False
            validation["erreurs"].append("Aucune source d'eau (r√©servoir/tank) trouv√©e")
        else:
            print(f"‚úÖ Sources d'eau: {len(water_sources)} trouv√©e(s)")
        
        # 2. V√©rification de la connectivit√©
        G = nx.Graph()
        for node_id in nodes_data:
            G.add_node(node_id)
        
        for pipe_id, pipe_data in pipes_data.items():
            node1, node2 = NetworkUtils.get_pipe_nodes(pipe_data)
            if node1 and node2 and node1 != node2:
                G.add_edge(node1, node2)
            else:
                print(f"‚ö†Ô∏è  Conduite '{pipe_id}' ignor√©e dans validate_epanet_compatibility: n≈ìuds invalides ({node1} -> {node2})")
        
        if not nx.is_connected(G):
            validation["compatible"] = False
            validation["erreurs"].append("R√©seau non connexe - composantes isol√©es d√©tect√©es")
        else:
            print("‚úÖ R√©seau connexe")
        
        # 3. V√©rification des donn√©es de conduites
        invalid_pipes = []
        for pipe_id, pipe_data in pipes_data.items():
            diameter = NetworkUtils.get_pipe_diameter(pipe_data)
            length = NetworkUtils.get_pipe_length(pipe_data)
            if not diameter > 0:
                invalid_pipes.append(pipe_id)
            if not length > 0:
                invalid_pipes.append(pipe_id)
        
        if invalid_pipes:
            validation["avertissements"].append(f"Conduites avec dimensions invalides: {invalid_pipes[:5]}")
        
        # 4. V√©rification des demandes
        negative_demands = [nid for nid, ndata in nodes_data.items() 
                           if NetworkUtils.get_node_demand(ndata) < 0]
        
        if negative_demands:
            validation["avertissements"].append(f"N≈ìuds avec demandes n√©gatives: {negative_demands[:5]}")
        
        # 5. Recommandations g√©n√©rales
        if len(nodes_data) > 1000:
            validation["recommandations"].append("R√©seau de grande taille - consid√©rer l'optimisation")
        
        if len(pipes_data) > 2000:
            validation["recommandations"].append("Nombre √©lev√© de conduites - v√©rifier la convergence")
        
        # Affichage des r√©sultats
        if validation["erreurs"]:
            print("‚ùå Erreurs critiques:")
            for error in validation["erreurs"]:
                print(f"   ‚Ä¢ {error}")
        
        if validation["avertissements"]:
            print("‚ö†Ô∏è  Avertissements:")
            for warning in validation["avertissements"]:
                print(f"   ‚Ä¢ {warning}")
        
        if validation["recommandations"]:
            print("üí° Recommandations:")
            for rec in validation["recommandations"]:
                print(f"   ‚Ä¢ {rec}")
        
        if validation["compatible"]:
            print("‚úÖ R√©seau compatible avec EPANET")
        else:
            print("‚ùå R√©seau incompatible avec EPANET")
        
        return validation
        
    except Exception as e:
        validation["compatible"] = False
        validation["erreurs"].append(f"Erreur lors de la validation: {e}")
        print(f"‚ùå Erreur lors de la validation: {e}")
        return validation 