"""
Commandes CLI pour la gestion des projets (base de donn√©es, requ√™tes, validation).
"""

import typer
from datetime import datetime
from pathlib import Path
from typing import Optional, List
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

from ..core.database import AEPDatabase
from ..core.validators import validate_population_data, validate_population_unified_data
from ..core.dynamic_constants import AEPDynamicConstantsManager

app = typer.Typer(help="Gestion des projets AEP")
console = Console()

@app.command("init")
def init_project(
    project_name: str = typer.Argument(..., help="Nom du projet"),
    project_dir: Optional[Path] = typer.Option(None, "--dir", "-d", help="R√©pertoire du projet"),
    template: str = typer.Option("default", "--template", "-t", help="Template de projet √† utiliser")
):
    """Initialiser un nouveau projet AEP."""
    
    console.print(Panel.fit("üöÄ [bold blue]Initialisation de Projet[/bold blue]"))
    
    try:
        # 1. Cr√©ation du r√©pertoire du projet
        if not project_dir:
            project_dir = Path.cwd() / project_name
        
        project_dir.mkdir(parents=True, exist_ok=True)
        console.print(f"üìÅ R√©pertoire du projet: {project_dir}")
        
        # 2. Initialisation de la base de donn√©es
        with console.status("[bold green]Initialisation de la base de donn√©es..."):
            db_manager = DatabaseManager(project_dir)
            db_manager.initialize_project(project_name)
        
        # 3. Cr√©ation de la structure du projet
        with console.status("[bold blue]Cr√©ation de la structure..."):
            # Cr√©er les sous-r√©pertoires
            (project_dir / "data").mkdir(exist_ok=True)
            (project_dir / "config").mkdir(exist_ok=True)
            (project_dir / "results").mkdir(exist_ok=True)
            (project_dir / "reports").mkdir(exist_ok=True)
            
            # Cr√©er le fichier de configuration principal
            config_file = project_dir / "config" / "project.yml"
            config_content = f"""# Configuration du projet {project_name}
project:
  name: {project_name}
  version: "1.0.0"
  description: "Projet AEP {project_name}"
  created_date: "{datetime.now().strftime('%Y-%m-%d')}"

# Param√®tres par d√©faut
defaults:
  units:
    pressure: "mCE"
    flow: "m3/s"
    length: "m"
    diameter: "mm"
  
  materials:
    - name: "PVC"
      roughness: 120
      max_pressure: 6
    - name: "PE"
      roughness: 140
      max_pressure: 10
    - name: "Acier"
      roughness: 100
      max_pressure: 16

# Structure des donn√©es
data_structure:
  nodes: "data/nodes.yml"
  pipes: "data/pipes.yml"
  reservoirs: "data/reservoirs.yml"
  demands: "data/demands.yml"
"""
            
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(config_content)
        
        # 4. Cr√©ation des fichiers de donn√©es d'exemple
        with console.status("[bold yellow]Cr√©ation des fichiers d'exemple..."):
            # Fichier des n≈ìuds
            nodes_file = project_dir / "data" / "nodes.yml"
            nodes_content = """# Exemple de n≈ìuds
nodes:
  - id: "N1"
    name: "R√©servoir Principal"
    type: "reservoir"
    elevation: 100.0
    coordinates: [0, 0]
    
  - id: "N2"
    name: "N≈ìud de Distribution 1"
    type: "junction"
    elevation: 95.0
    coordinates: [100, 0]
    demand: 0.001
    
  - id: "N3"
    name: "N≈ìud de Distribution 2"
    type: "junction"
    elevation: 92.0
    coordinates: [200, 0]
    demand: 0.0008
"""
            
            with open(nodes_file, 'w', encoding='utf-8') as f:
                f.write(nodes_content)
            
            # Fichier des conduites
            pipes_file = project_dir / "data" / "pipes.yml"
            pipes_content = """# Exemple de conduites
pipes:
  - id: "P1"
    name: "Conduite principale"
    from_node: "N1"
    to_node: "N2"
    length: 100.0
    diameter: 150
    material: "PVC"
    roughness: 120
    
  - id: "P2"
    name: "Conduite secondaire"
    from_node: "N2"
    to_node: "N3"
    length: 100.0
    diameter: 110
    material: "PVC"
    roughness: 120
"""
            
            with open(pipes_file, 'w', encoding='utf-8') as f:
                f.write(pipes_content)
        
        console.print(f"‚úÖ Projet '{project_name}' initialis√© avec succ√®s")
        console.print(f"üìÅ R√©pertoire: {project_dir}")
        console.print(f"üóÑÔ∏è  Base de donn√©es: {project_dir / 'project.db'}")
        console.print(f"‚öôÔ∏è  Configuration: {config_file}")
        
        # 5. Instructions d'utilisation
        console.print("\nüìã [bold]Prochaines √©tapes:[/bold]")
        console.print("1. Modifier les fichiers de donn√©es dans le r√©pertoire 'data/'")
        console.print("2. Ajuster la configuration dans 'config/project.yml'")
        console.print("3. Lancer les calculs avec: lcpi network analyze --config config/project.yml")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'initialisation: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("validate")
def validate_project(
    project_dir: Path = typer.Argument(..., help="R√©pertoire du projet √† valider"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de rapport de validation")
):
    """Valider un projet AEP complet."""
    
    console.print(Panel.fit("üîç [bold blue]Validation de Projet[/bold blue]"))
    
    try:
        # 1. Chargement de la configuration du projet
        with console.status("[bold green]Chargement de la configuration..."):
            config_file = project_dir / "config" / "project.yml"
            if not config_file.exists():
                raise FileNotFoundError(f"Fichier de configuration non trouv√©: {config_file}")
            
            import yaml
            with open(config_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
        
        # 2. Validation du projet
        with console.status("[bold blue]Validation en cours..."):
            validator = ProjectValidator()
            validation_results = validator.validate_project(project_dir, config)
        
        # 3. Affichage des r√©sultats
        console.print(f"‚úÖ Validation termin√©e pour le projet: {config.get('project', {}).get('name', 'Inconnu')}")
        
        # R√©sum√© de validation
        summary_table = Table(title="R√©sum√© de Validation du Projet")
        summary_table.add_column("Composant", style="cyan")
        summary_table.add_column("Statut", style="bold")
        summary_table.add_column("D√©tails", style="white")
        
        for component, result in validation_results.items():
            if component == "global":
                continue
                
            status = "‚úÖ OK" if result["valide"] else "‚ùå Erreur"
            status_style = "green" if result["valide"] else "red"
            
            details = result.get("message", "")
            if result.get("erreurs"):
                details += f" ({len(result['erreurs'])} erreurs)"
            if result.get("avertissements"):
                details += f" ({len(result['avertissements'])} avertissements)"
            
            summary_table.add_row(
                component,
                f"[{status_style}]{status}[/{status_style}]",
                details
            )
        
        console.print(summary_table)
        
        # 4. Statut global
        global_status = validation_results.get("global", {})
        if global_status.get("valide", False):
            console.print("üéâ [bold green]Projet valid√© avec succ√®s ![/bold green]")
        else:
            console.print("‚ö†Ô∏è  [bold yellow]Projet pr√©sente des probl√®mes √† corriger[/bold yellow]")
        
        # 5. Sauvegarde du rapport si demand√©
        if output:
            import json
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(validation_results, f, indent=2, ensure_ascii=False)
            console.print(f"üíæ Rapport de validation sauvegard√© dans: {output}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de la validation: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("info")
def project_info(
    project_dir: Path = typer.Argument(..., help="R√©pertoire du projet")
):
    """Afficher les informations d'un projet AEP."""
    
    console.print(Panel.fit("‚ÑπÔ∏è [bold blue]Informations du Projet[/bold blue]"))
    
    try:
        # 1. Chargement de la configuration
        config_file = project_dir / "config" / "project.yml"
        if not config_file.exists():
            raise FileNotFoundError(f"Fichier de configuration non trouv√©: {config_file}")
        
        import yaml
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # 2. Informations du projet
        project_info = config.get("project", {})
        
        info_table = Table(title="Informations du Projet")
        info_table.add_column("Propri√©t√©", style="cyan")
        info_table.add_column("Valeur", style="white")
        
        info_table.add_row("Nom", project_info.get("name", "N/A"))
        info_table.add_row("Version", project_info.get("version", "N/A"))
        info_table.add_row("Description", project_info.get("description", "N/A"))
        info_table.add_row("Date de cr√©ation", project_info.get("created_date", "N/A"))
        info_table.add_row("R√©pertoire", str(project_dir))
        
        console.print(info_table)
        
        # 3. Structure des donn√©es
        data_structure = config.get("data_structure", {})
        if data_structure:
            console.print("\nüìÅ [bold]Structure des Donn√©es:[/bold]")
            structure_table = Table()
            structure_table.add_column("Type", style="cyan")
            structure_table.add_column("Fichier", style="white")
            structure_table.add_column("Statut", style="bold")
            
            for data_type, file_path in data_structure.items():
                full_path = project_dir / file_path
                if full_path.exists():
                    status = "‚úÖ Pr√©sent"
                    status_style = "green"
                else:
                    status = "‚ùå Manquant"
                    status_style = "red"
                
                structure_table.add_row(
                    data_type.title(),
                    file_path,
                    f"[{status_style}]{status}[/{status_style}]"
                )
            
            console.print(structure_table)
        
        # 4. Param√®tres par d√©faut
        defaults = config.get("defaults", {})
        if defaults:
            console.print("\n‚öôÔ∏è [bold]Param√®tres par D√©faut:[/bold]")
            
            if "units" in defaults:
                units_table = Table(title="Unit√©s")
                units_table.add_column("Mesure", style="cyan")
                units_table.add_column("Unit√©", style="white")
                
                for measure, unit in defaults["units"].items():
                    units_table.add_row(measure.title(), unit)
                
                console.print(units_table)
            
            if "materials" in defaults:
                materials_table = Table(title="Mat√©riaux")
                materials_table.add_column("Nom", style="cyan")
                materials_table.add_column("Rugosit√©", style="white")
                materials_table.add_column("Pression Max (bar)", style="white")
                
                for material in defaults["materials"]:
                    materials_table.add_row(
                        material.get("name", "N/A"),
                        str(material.get("roughness", "N/A")),
                        str(material.get("max_pressure", "N/A"))
                    )
                
                console.print(materials_table)
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de la r√©cup√©ration des informations: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("query")
def query_project(
    project_dir: Path = typer.Argument(..., help="R√©pertoire du projet"),
    query: str = typer.Option(..., "--query", "-q", help="Requ√™te SQL √† ex√©cuter"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie pour les r√©sultats")
):
    """Ex√©cuter une requ√™te SQL sur la base de donn√©es du projet."""
    
    console.print(Panel.fit("üîç [bold blue]Requ√™te sur le Projet[/bold blue]"))
    
    try:
        # 1. Connexion √† la base de donn√©es
        with console.status("[bold green]Connexion √† la base de donn√©es..."):
            db_manager = DatabaseManager(project_dir)
            db_path = project_dir / "project.db"
            
            if not db_path.exists():
                raise FileNotFoundError(f"Base de donn√©es non trouv√©e: {db_path}")
        
        # 2. Ex√©cution de la requ√™te
        with console.status("[bold blue]Ex√©cution de la requ√™te..."):
            results = db_manager.execute_query(query)
        
        # 3. Affichage des r√©sultats
        if results:
            console.print(f"‚úÖ Requ√™te ex√©cut√©e avec succ√®s")
            console.print(f"üìä {len(results)} lignes retourn√©es")
            
            # Affichage des r√©sultats dans un tableau
            if results and len(results) > 0:
                result_table = Table(title="R√©sultats de la Requ√™te")
                
                # En-t√™tes des colonnes
                for column in results[0].keys():
                    result_table.add_column(column, style="cyan")
                
                # Donn√©es
                for row in results[:10]:  # Limiter √† 10 lignes pour l'affichage
                    result_table.add_row(*[str(value) for value in row.values()])
                
                if len(results) > 10:
                    result_table.add_row("...", "...", "...")
                
                console.print(result_table)
                
                if len(results) > 10:
                    console.print(f"‚ö†Ô∏è  Affichage limit√© √† 10 lignes sur {len(results)} totales")
            else:
                console.print("‚ÑπÔ∏è  Aucune donn√©e retourn√©e")
        else:
            console.print("‚ÑπÔ∏è  Requ√™te ex√©cut√©e sans retour de donn√©es")
        
        # 4. Sauvegarde des r√©sultats si demand√©
        if output and results:
            import json
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            console.print(f"üíæ R√©sultats sauvegard√©s dans: {output}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'ex√©cution de la requ√™te: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("constants")
def manage_constants(
    project_dir: Path = typer.Argument(..., help="R√©pertoire du projet"),
    action: str = typer.Option("list", "--action", "-a", help="Action √† effectuer (list, get, set, reset)"),
    constant_name: Optional[str] = typer.Option(None, "--name", "-n", help="Nom de la constante"),
    value: Optional[str] = typer.Option(None, "--value", "-v", help="Nouvelle valeur de la constante")
):
    """G√©rer les constantes dynamiques du projet."""
    
    console.print(Panel.fit("üîß [bold blue]Gestion des Constantes[/bold blue]"))
    
    try:
        # 1. Initialisation du gestionnaire de constantes
        constants_manager = DynamicConstants(project_dir)
        
        if action == "list":
            # Lister toutes les constantes
            constants = constants_manager.get_all_constants()
            
            if constants:
                constants_table = Table(title="Constantes du Projet")
                constants_table.add_column("Nom", style="cyan")
                constants_table.add_column("Valeur", style="white")
                constants_table.add_column("Description", style="white")
                constants_table.add_column("Modifiable", style="bold")
                
                for name, info in constants.items():
                    modifiable = "‚úÖ Oui" if info.get("modifiable", False) else "‚ùå Non"
                    constants_table.add_row(
                        name,
                        str(info.get("value", "N/A")),
                        info.get("description", "Aucune description"),
                        modifiable
                    )
                
                console.print(constants_table)
            else:
                console.print("‚ÑπÔ∏è  Aucune constante d√©finie")
        
        elif action == "get":
            # Obtenir la valeur d'une constante
            if not constant_name:
                raise ValueError("Nom de la constante requis pour l'action 'get'")
            
            constant_value = constants_manager.get_constant(constant_name)
            if constant_value is not None:
                console.print(f"üìä Constante '{constant_name}': {constant_value}")
            else:
                console.print(f"‚ùå Constante '{constant_name}' non trouv√©e")
        
        elif action == "set":
            # D√©finir la valeur d'une constante
            if not constant_name:
                raise ValueError("Nom de la constante requis pour l'action 'set'")
            if not value:
                raise ValueError("Nouvelle valeur requise pour l'action 'set'")
            
            success = constants_manager.set_constant(constant_name, value)
            if success:
                console.print(f"‚úÖ Constante '{constant_name}' mise √† jour: {value}")
            else:
                console.print(f"‚ùå Impossible de modifier la constante '{constant_name}'")
        
        elif action == "reset":
            # R√©initialiser les constantes
            if constant_name:
                # R√©initialiser une constante sp√©cifique
                success = constants_manager.reset_constant(constant_name)
                if success:
                    console.print(f"‚úÖ Constante '{constant_name}' r√©initialis√©e")
                else:
                    console.print(f"‚ùå Impossible de r√©initialiser la constante '{constant_name}'")
            else:
                # R√©initialiser toutes les constantes
                constants_manager.reset_all_constants()
                console.print("‚úÖ Toutes les constantes ont √©t√© r√©initialis√©es")
        
        else:
            raise ValueError(f"Action non support√©e: {action}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de la gestion des constantes: {e}", style="red")
        raise typer.Exit(code=1)

if __name__ == "__main__":
    app()
