"""
Commande CLI pour l'optimisation des r√©seaux AEP.
"""

import typer
import yaml
import json
from pathlib import Path
from typing import Dict, Any, Optional
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

# Import conditionnel des modules d'optimisation
try:
    from ..optimization.models import ConfigurationOptimisation
    from ..optimization.genetic_algorithm import GeneticOptimizer
    from ..optimization.constraints import ConstraintManager
    OPTIMIZATION_AVAILABLE = True
except ImportError:
    OPTIMIZATION_AVAILABLE = False

app = typer.Typer(help="Commandes d'analyse et d'optimisation de r√©seaux")
console = Console()

@app.command()
def optimize(
    input_file: Path = typer.Argument(..., help="Fichier YAML contenant la configuration d'optimisation"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie JSON"),
    mode: str = typer.Option("enhanced", "--mode", "-m", help="Mode d'ex√©cution (simple/enhanced)"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Affichage d√©taill√©"),
    iterations: int = typer.Option(50, "--iterations", "-i", help="Nombre de g√©n√©rations"),
    population: int = typer.Option(100, "--population", "-p", help="Taille de la population")
):
    """
    Optimise les diam√®tres de conduites d'un r√©seau AEP.
    
    INPUT_FILE: Fichier YAML contenant la configuration d'optimisation
    """
    if not OPTIMIZATION_AVAILABLE:
        console.print("‚ùå Module d'optimisation non disponible", style="red")
        console.print("üí° Installez les d√©pendances requises pour l'optimisation", style="yellow")
        raise typer.Exit(code=1)
    
    try:
        # Charger la configuration
        with open(input_file, 'r', encoding='utf-8') as f:
            config_data = yaml.safe_load(f)
        
        # Valider la configuration
        config = ConfigurationOptimisation(**config_data['optimisation'])
        
        # Ajuster les param√®tres si sp√©cifi√©s en ligne de commande
        config.algorithme.generations = iterations
        config.algorithme.population_size = population
        
        if verbose:
            console.print(Panel.fit("üîß Configuration charg√©e", style="blue"))
            console.print(f"   Crit√®re principal: {config.criteres.principal}")
            console.print(f"   Budget max: {config.contraintes_budget.cout_max_fcfa} FCFA")
            console.print(f"   Diam√®tres candidats: {len(config.diametres_candidats)}")
        
        # Cr√©er le gestionnaire de contraintes
        constraint_manager = ConstraintManager(
            config.contraintes_budget,
            config.contraintes_techniques
        )
        
        # Cr√©er l'optimiseur
        optimizer = GeneticOptimizer(config, constraint_manager)
        
        # Charger les donn√©es du r√©seau
        reseau_data = config_data.get('reseau_complet', {})
        nb_conduites = len(reseau_data.get('conduites', []))
        
        if nb_conduites == 0:
            console.print("‚ùå Aucune conduite trouv√©e dans le fichier de configuration", style="red")
            raise typer.Exit(code=1)
        
        # Lancer l'optimisation
        with console.status("[bold green]Optimisation en cours..."):
            resultats = optimizer.optimiser(reseau_data, nb_conduites)
        
        # Sauvegarder les r√©sultats
        if output:
            output_path = Path(output)
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(resultats, f, indent=2, ensure_ascii=False)
            console.print(f"üíæ R√©sultats sauvegard√©s dans: {output_path}", style="green")
        else:
            # Affichage des r√©sultats
            console.print(Panel.fit("üìä R√âSULTATS DE L'OPTIMISATION", style="green"))
            
            opt = resultats['optimisation']
            console.print(f"Algorithme: {opt['algorithme']}")
            console.print(f"Convergence: {opt['convergence']['iterations']} g√©n√©rations")
            console.print(f"Fitness finale: {opt['convergence']['fitness_finale']:.4f}")
            
            solution = opt['meilleure_solution']
            console.print(f"\nüèÜ MEILLEURE SOLUTION")
            console.print(f"Co√ªt total: {solution['performance']['cout_total_fcfa']:.0f} FCFA")
            console.print(f"Performance: {solution['performance']['performance_hydraulique']:.3f}")
            console.print(f"√ânergie: {solution['performance']['energie_totale_kwh']:.1f} kWh")
            
            console.print(f"\nüìè DIAM√àTRES OPTIMIS√âS")
            for conduite, diametre in solution['diametres'].items():
                console.print(f"  {conduite}: {diametre} mm")
        
        console.print("\n‚úÖ Optimisation termin√©e avec succ√®s!", style="green")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'optimisation: {e}", style="red")
        if verbose:
            import traceback
            console.print(traceback.format_exc(), style="red")
        raise typer.Exit(code=1)

@app.command()
def sensitivity(
    input_file: Path = typer.Argument(..., help="Fichier YAML r√©seau de base"),
    parametres: str = typer.Option("rugosite,demande", "--parametres", "-p", help="Param√®tres √† analyser"),
    iterations: int = typer.Option(1000, "--iterations", "-i", help="Nombre d'it√©rations Monte-Carlo"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie")
):
    """Analyse de sensibilit√© des param√®tres du r√©seau."""
    console.print("üîç Analyse de sensibilit√© - Fonctionnalit√© en cours de d√©veloppement", style="yellow")

@app.command()
def compare(
    variante1: Path = typer.Argument(..., help="Premi√®re variante de r√©seau"),
    variante2: Path = typer.Argument(..., help="Deuxi√®me variante de r√©seau"),
    criteres: str = typer.Option("cout,performance", "--criteres", "-c", help="Crit√®res de comparaison"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie")
):
    """Compare deux variantes de r√©seau."""
    console.print("‚öñÔ∏è Comparaison de variantes - Fonctionnalit√© en cours de d√©veloppement", style="yellow")

if __name__ == '__main__':
    app()
