"""
Commandes CLI pour la gestion des donn√©es (import/export/validation).
"""

import typer
from pathlib import Path
from typing import Optional, List
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

from ..core.import_automatique import AEPImportAutomatique
from ..core.validation_donnees import AEPDataValidator
from ..core.recalcul_automatique import AEPRecalculEngine
from ..utils.exporters import export_content

app = typer.Typer(help="Gestion des donn√©es (import/export/validation)")
console = Console()

@app.command("import")
def import_data(
    source: Path = typer.Argument(..., help="Fichier source √† importer"),
    format: str = typer.Option("auto", "--format", "-f", help="Format du fichier (auto, csv, yaml, json, excel)"),
    validate: bool = typer.Option(True, "--validate", help="Valider les donn√©es apr√®s import"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie pour les donn√©es valid√©es")
):
    """Importer des donn√©es depuis diff√©rents formats."""
    
    console.print(Panel.fit("üì• [bold blue]Import de Donn√©es[/bold blue]"))
    
    try:
        # 1. Import automatique
        with console.status("[bold green]Import des donn√©es..."):
            importer = ImportAutomatique()
            data = importer.importer_fichier(source, format_force=format if format != "auto" else None)
        
        console.print(f"‚úÖ Donn√©es import√©es avec succ√®s depuis {source}")
        console.print(f"üìä {len(data)} √©l√©ments import√©s")
        
        # 2. Validation des donn√©es si demand√©
        if validate:
            with console.status("[bold blue]Validation des donn√©es..."):
                validator = ValidationDonnees()
                validation_results = validator.valider_donnees(data)
            
            # Affichage des r√©sultats de validation
            validation_table = Table(title="R√©sultats de Validation")
            validation_table.add_column("Crit√®re", style="cyan")
            validation_table.add_column("Statut", style="bold")
            validation_table.add_column("D√©tails", style="white")
            
            for critere, result in validation_results.items():
                status = "‚úÖ OK" if result["valide"] else "‚ùå Erreur"
                status_style = "green" if result["valide"] else "red"
                
                validation_table.add_row(
                    critere,
                    f"[{status_style}]{status}[/{status_style}]",
                    result.get("message", "")
                )
            
            console.print(validation_table)
            
            # Sauvegarde des donn√©es valid√©es si demand√©
            if output and validation_results.get("global", {}).get("valide", False):
                exporter = DataExporter()
                exporter.exporter_json(data, output)
                console.print(f"üíæ Donn√©es valid√©es sauvegard√©es dans: {output}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'import: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("export")
def export_data(
    source: Path = typer.Argument(..., help="Fichier source √† exporter"),
    format: str = typer.Option("json", "--format", "-f", help="Format de sortie (json, yaml, csv, excel, html)"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie")
):
    """Exporter des donn√©es vers diff√©rents formats."""
    
    console.print(Panel.fit("üì§ [bold blue]Export de Donn√©es[/bold blue]"))
    
    try:
        # 1. Import des donn√©es source
        with console.status("[bold green]Chargement des donn√©es..."):
            importer = ImportAutomatique()
            data = importer.importer_fichier(source)
        
        # 2. Export vers le format demand√©
        with console.status(f"[bold blue]Export vers {format.upper()}..."):
            exporter = DataExporter()
            
            if not output:
                output = source.with_suffix(f".{format}")
            
            if format == "json":
                exporter.exporter_json(data, output)
            elif format == "yaml":
                exporter.exporter_yaml(data, output)
            elif format == "csv":
                exporter.exporter_csv(data, output)
            elif format == "excel":
                exporter.exporter_excel(data, output)
            elif format == "html":
                exporter.exporter_html(data, output)
            else:
                raise ValueError(f"Format non support√©: {format}")
        
        console.print(f"‚úÖ Donn√©es export√©es avec succ√®s vers {output}")
        console.print(f"üìä {len(data)} √©l√©ments export√©s")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'export: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("validate")
def validate_data(
    source: Path = typer.Argument(..., help="Fichier √† valider"),
    rules: Optional[Path] = typer.Option(None, "--rules", "-r", help="Fichier de r√®gles de validation"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Rapport de validation")
):
    """Valider des donn√©es selon des r√®gles d√©finies."""
    
    console.print(Panel.fit("üîç [bold blue]Validation de Donn√©es[/bold blue]"))
    
    try:
        # 1. Import des donn√©es
        with console.status("[bold green]Chargement des donn√©es..."):
            importer = ImportAutomatique()
            data = importer.importer_fichier(source)
        
        # 2. Validation
        with console.status("[bold blue]Validation en cours..."):
            validator = ValidationDonnees()
            
            if rules:
                # Charger des r√®gles personnalis√©es
                validation_results = validator.valider_avec_regles(data, rules)
            else:
                # Validation par d√©faut
                validation_results = validator.valider_donnees(data)
        
        # 3. Affichage des r√©sultats
        console.print(f"‚úÖ Validation termin√©e pour {len(data)} √©l√©ments")
        
        # R√©sum√© de validation
        summary_table = Table(title="R√©sum√© de Validation")
        summary_table.add_column("Crit√®re", style="cyan")
        summary_table.add_column("Statut", style="bold")
        summary_table.add_column("Erreurs", style="white")
        summary_table.add_column("Avertissements", style="yellow")
        
        for critere, result in validation_results.items():
            if critere == "global":
                continue
                
            status = "‚úÖ OK" if result["valide"] else "‚ùå Erreur"
            status_style = "green" if result["valide"] else "red"
            
            errors = len(result.get("erreurs", []))
            warnings = len(result.get("avertissements", []))
            
            summary_table.add_row(
                critere,
                f"[{status_style}]{status}[/{status_style}]",
                str(errors),
                str(warnings)
            )
        
        console.print(summary_table)
        
        # 4. Sauvegarde du rapport si demand√©
        if output:
            import json
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(validation_results, f, indent=2, ensure_ascii=False)
            console.print(f"üíæ Rapport de validation sauvegard√© dans: {output}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de la validation: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("recalculate")
def recalculate_data(
    source: Path = typer.Argument(..., help="Fichier source pour le recalcul"),
    mode: str = typer.Option("auto", "--mode", "-m", help="Mode de recalcul (auto, force, incremental)"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie pour les r√©sultats")
):
    """Recalculer automatiquement les donn√©es selon les d√©pendances."""
    
    console.print(Panel.fit("üîÑ [bold blue]Recalcul Automatique[/bold blue]"))
    
    try:
        # 1. Import des donn√©es
        with console.status("[bold green]Chargement des donn√©es..."):
            importer = ImportAutomatique()
            data = importer.importer_fichier(source)
        
        # 2. Recalcul automatique
        with console.status("[bold blue]Recalcul en cours..."):
            recalculator = RecalculAutomatique()
            
            if mode == "force":
                results = recalculator.recalcul_complet(data)
            elif mode == "incremental":
                results = recalculator.recalcul_incremental(data)
            else:  # auto
                results = recalculator.recalcul_intelligent(data)
        
        # 3. Affichage des r√©sultats
        console.print(f"‚úÖ Recalcul termin√©")
        
        # R√©sum√© du recalcul
        summary_table = Table(title="R√©sum√© du Recalcul")
        summary_table.add_column("M√©trique", style="cyan")
        summary_table.add_column("Valeur", style="white")
        
        summary_table.add_row("Mode", mode)
        summary_table.add_row("√âl√©ments trait√©s", str(len(results.get("traites", []))))
        summary_table.add_row("√âl√©ments mis √† jour", str(len(results.get("mis_a_jour", []))))
        summary_table.add_row("√âl√©ments inchang√©s", str(len(results.get("inchanges", []))))
        summary_table.add_row("Erreurs", str(len(results.get("erreurs", []))))
        
        console.print(summary_table)
        
        # 4. Sauvegarde des r√©sultats si demand√©
        if output:
            exporter = DataExporter()
            exporter.exporter_json(results, output)
            console.print(f"üíæ R√©sultats du recalcul sauvegard√©s dans: {output}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors du recalcul: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("convert")
def convert_format(
    source: Path = typer.Argument(..., help="Fichier source"),
    source_format: str = typer.Option("auto", "--source-format", "-sf", help="Format source (auto, csv, yaml, json, excel)"),
    target_format: str = typer.Option("json", "--target-format", "-tf", help="Format cible (json, yaml, csv, excel, html)"),
    output: Optional[Path] = typer.Option(None, "--output", "-o", help="Fichier de sortie")
):
    """Convertir des donn√©es d'un format vers un autre."""
    
    console.print(Panel.fit("üîÑ [bold blue]Conversion de Format[/bold blue]"))
    
    try:
        # 1. Import depuis le format source
        with console.status(f"[bold green]Import depuis {source_format.upper()}..."):
            importer = ImportAutomatique()
            data = importer.importer_fichier(source, format_force=source_format if source_format != "auto" else None)
        
        # 2. Export vers le format cible
        with console.status(f"[bold blue]Export vers {target_format.upper()}..."):
            exporter = DataExporter()
            
            if not output:
                output = source.with_suffix(f".{target_format}")
            
            if target_format == "json":
                exporter.exporter_json(data, output)
            elif target_format == "yaml":
                exporter.exporter_yaml(data, output)
            elif target_format == "csv":
                exporter.exporter_csv(data, output)
            elif target_format == "excel":
                exporter.exporter_excel(data, output)
            elif target_format == "html":
                exporter.exporter_html(data, output)
            else:
                raise ValueError(f"Format cible non support√©: {target_format}")
        
        console.print(f"‚úÖ Conversion r√©ussie: {source} ‚Üí {output}")
        console.print(f"üìä {len(data)} √©l√©ments convertis")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de la conversion: {e}", style="red")
        raise typer.Exit(code=1)

@app.command("batch")
def batch_process(
    input_dir: Path = typer.Argument(..., help="R√©pertoire contenant les fichiers √† traiter"),
    pattern: str = typer.Option("*.yml", "--pattern", "-p", help="Pattern de fichiers √† traiter"),
    operation: str = typer.Option("validate", "--operation", "-op", help="Op√©ration √† effectuer (validate, convert, recalculate)"),
    target_format: Optional[str] = typer.Option(None, "--target-format", "-tf", help="Format cible pour la conversion"),
    output_dir: Optional[Path] = typer.Option(None, "--output-dir", "-od", help="R√©pertoire de sortie")
):
    """Traiter un lot de fichiers en mode batch."""
    
    console.print(Panel.fit("üìÅ [bold blue]Traitement en Lot[/bold blue]"))
    
    try:
        # 1. Recherche des fichiers
        files = list(input_dir.glob(pattern))
        if not files:
            console.print(f"‚ùå Aucun fichier trouv√© avec le pattern: {pattern}")
            return
        
        console.print(f"üìã {len(files)} fichiers trouv√©s")
        
        # 2. Traitement en lot
        results = []
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            for file_path in files:
                task = progress.add_task(f"Traitement de {file_path.name}...", total=None)
                
                try:
                    if operation == "validate":
                        # Validation
                        importer = ImportAutomatique()
                        data = importer.importer_fichier(file_path)
                        validator = ValidationDonnees()
                        result = validator.valider_donnees(data)
                        result["fichier"] = file_path.name
                        result["statut"] = "valide" if result.get("global", {}).get("valide", False) else "invalide"
                        
                    elif operation == "convert":
                        # Conversion
                        if not target_format:
                            raise ValueError("Format cible requis pour la conversion")
                            
                        importer = ImportAutomatique()
                        data = importer.importer_fichier(file_path)
                        exporter = DataExporter()
                        
                        if output_dir:
                            output_file = output_dir / f"{file_path.stem}.{target_format}"
                        else:
                            output_file = file_path.with_suffix(f".{target_format}")
                        
                        if target_format == "json":
                            exporter.exporter_json(data, output_file)
                        elif target_format == "yaml":
                            exporter.exporter_yaml(data, output_file)
                        elif target_format == "csv":
                            exporter.exporter_csv(data, output_file)
                        elif target_format == "excel":
                            exporter.exporter_excel(data, output_file)
                        elif target_format == "html":
                            exporter.exporter_html(data, output_file)
                        
                        result = {
                            "fichier": file_path.name,
                            "statut": "converti",
                            "sortie": str(output_file)
                        }
                        
                    elif operation == "recalculate":
                        # Recalcul
                        importer = ImportAutomatique()
                        data = importer.importer_fichier(file_path)
                        recalculator = RecalculAutomatique()
                        result = recalculator.recalcul_intelligent(data)
                        result["fichier"] = file_path.name
                        result["statut"] = "recalcul√©"
                    
                    else:
                        raise ValueError(f"Op√©ration non support√©e: {operation}")
                    
                    results.append(result)
                    progress.update(task, description=f"‚úÖ {file_path.name} trait√©")
                    
                except Exception as e:
                    result = {
                        "fichier": file_path.name,
                        "statut": "erreur",
                        "erreur": str(e)
                    }
                    results.append(result)
                    progress.update(task, description=f"‚ùå {file_path.name} √©chou√©")
        
        # 3. R√©sum√© du traitement
        console.print(f"\n‚úÖ Traitement termin√©")
        
        summary_table = Table(title="R√©sum√© du Traitement en Lot")
        summary_table.add_column("Statut", style="bold")
        summary_table.add_column("Nombre", style="white")
        
        status_counts = {}
        for result in results:
            status = result["statut"]
            status_counts[status] = status_counts.get(status, 0) + 1
        
        for status, count in status_counts.items():
            status_emoji = "‚úÖ" if status in ["valide", "converti", "recalcul√©"] else "‚ùå"
            summary_table.add_row(f"{status_emoji} {status}", str(count))
        
        console.print(summary_table)
        
        # 4. Sauvegarde du rapport si demand√©
        if output_dir:
            import json
            report_file = output_dir / "rapport_traitement.json"
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            console.print(f"üíæ Rapport de traitement sauvegard√© dans: {report_file}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors du traitement en lot: {e}", style="red")
        raise typer.Exit(code=1)

if __name__ == "__main__":
    app()
