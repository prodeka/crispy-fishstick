"""
Commandes CLI pour la gestion des projets et du sandbox.
"""
import typer
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
import shutil
import zipfile
from datetime import datetime

from .core.global_config import global_config
from .core.context import get_project_context
from .core.template_manager import get_available_templates, get_template_description, get_template_type
from .core.example_manager import get_available_examples, get_example_description, get_example_files

console = Console()

app = typer.Typer(name="project", help="Gestion des projets et du contexte de travail")

def show_next_steps(template: str, project_path: Path):
    """Affiche les prochaines √©tapes apr√®s la cr√©ation d'un projet."""
    console.print("\nüéØ **Prochaines √©tapes :**")
    
    if template.startswith("aep"):
        console.print("1. üìä **Configurer votre r√©seau :**")
        console.print("   - Modifiez le fichier `data/network.yml`")
        console.print("   - Ajoutez vos n≈ìuds et tron√ßons")
        console.print("2. üöÄ **Ex√©cuter les calculs :**")
        console.print("   ```bash")
        console.print("   lcpi aep run data/network.yml")
        console.print("   ```")
        console.print("3. üìã **G√©n√©rer le rapport :**")
        console.print("   ```bash")
        console.print("   lcpi report generate")
        console.print("   ```")
    
    elif template in ["canal-simple", "dalot", "deversoir"]:
        console.print("1. üìè **Configurer vos param√®tres :**")
        console.print("   - Modifiez le fichier de configuration")
        console.print("   - Ajustez les dimensions et caract√©ristiques")
        console.print("2. üßÆ **Lancer le calcul :**")
        console.print("   ```bash")
        console.print("   lcpi hydro run data/canal.yml")
        console.print("   ```")
    
    elif template in ["beton-arme", "bois"]:
        console.print("1. üèóÔ∏è **Configurer vos √©l√©ments :**")
        console.print("   - Modifiez les fichiers dans `data/`")
        console.print("   - Ajustez les charges et mat√©riaux")
        console.print("2. üî® **Ex√©cuter les calculs :**")
        console.print("   ```bash")
        console.print("   lcpi beton run data/")
        console.print("   # ou")
        console.print("   lcpi bois run data/")
        console.print("   ```")
    
    else:
        console.print("1. üìÅ **Explorer la structure :**")
        console.print("   - V√©rifiez le fichier `lcpi.yml`")
        console.print("   - Consultez le `README.md`")
        console.print("2. üöÄ **Commencer √† travailler :**")
        console.print("   - Ajoutez vos donn√©es dans `data/`")
        console.print("   - Consultez la documentation LCPI")
    
    console.print(f"\nüìÅ **Projet cr√©√© dans :** {project_path.resolve()}")
    console.print("üí° **Aide :** Utilisez `lcpi --help` pour voir toutes les commandes disponibles")

@app.command("init")
def init_project(
    nom_projet: str = typer.Argument(..., help="Nom du projet √† cr√©er"),
    template: str = typer.Option(None, "--template", "-t", help="Template sp√©cifique (cm, bois, beton, hydro, complet)"),
    plugins: str = typer.Option(None, "--plugins", "-p", help="Plugins √† inclure (s√©par√©s par des virgules)"),
    force: bool = typer.Option(False, "--force", "-f", help="Forcer la cr√©ation m√™me si le dossier existe"),
    git_init: bool = typer.Option(False, "--git", "-g", help="Initialiser un d√©p√¥t Git"),
    remote_url: str = typer.Option(None, "--remote", "-r", help="URL du remote Git")
):
    """Initialise un nouveau projet LCPI dans le r√©pertoire actuel."""
    try:
        # Cr√©er l'arborescence du projet
        from .core.project_manager import create_project
        project_path = Path.cwd() / nom_projet
        
        if project_path.exists() and not force:
            typer.secho(f"‚ùå Le projet '{nom_projet}' existe d√©j√†. Utilisez --force pour √©craser.", fg=typer.colors.RED)
            raise typer.Exit(1)
        
        # Cr√©er le projet
        create_project(
            nom_projet=nom_projet,
            template=template,
            plugins=plugins,
            force=force,
            git_init=git_init,
            remote_url=remote_url
        )
        
        # Ajouter le projet √† la configuration globale
        global_config.add_project(nom_projet, str(project_path.resolve()))
        
        # D√©finir comme projet actif
        global_config.set_active_project(nom_projet)
        
        console.print(f"‚úÖ Projet '{nom_projet}' cr√©√© et activ√©.")
        console.print(f"üìÅ Chemin: {project_path.resolve()}")
        
    except Exception as e:
        typer.secho(f"‚ùå Erreur lors de la cr√©ation du projet: {e}", fg=typer.colors.RED)
        raise typer.Exit(1)

@app.command("create")
def create_project_from_template(
    nom_projet: str = typer.Argument(..., help="Nom du projet √† cr√©er"),
    template: str = typer.Option("aep-village", "--template", "-t", help="Template √† utiliser"),
    output_dir: str = typer.Option(".", "--output", "-o", help="R√©pertoire de sortie"),
    force: bool = typer.Option(False, "--force", "-f", help="Forcer la cr√©ation m√™me si le dossier existe"),
    git_init: bool = typer.Option(False, "--git", "-g", help="Initialiser un d√©p√¥t Git"),
    remote_url: str = typer.Option(None, "--remote", "-r", help="URL du remote Git")
):
    """Cr√©e un nouveau projet √† partir d'un template pr√©d√©fini."""
    try:
        from .core.project_manager import create_project_from_template
        
        # V√©rifier que le template existe
        available_templates = get_available_templates()
        if template not in available_templates:
            typer.secho(f"‚ùå Template '{template}' non trouv√©.", fg=typer.colors.RED)
            typer.secho(f"üìã Templates disponibles: {', '.join(available_templates)}", fg=typer.colors.YELLOW)
            raise typer.Exit(1)
        
        # Cr√©er le projet
        project_path = create_project_from_template(
            nom_projet=nom_projet,
            template=template,
            output_dir=output_dir,
            force=force,
            git_init=git_init,
            remote_url=remote_url
        )
        
        # Ajouter le projet √† la configuration globale
        global_config.add_project(nom_projet, str(project_path.resolve()))
        
        # D√©finir comme projet actif
        global_config.set_active_project(nom_projet)
        
        console.print(f"‚úÖ Projet '{nom_projet}' cr√©√© √† partir du template '{template}'.")
        console.print(f"üìÅ Chemin: {project_path.resolve()}")
        
        # Afficher les prochaines √©tapes
        show_next_steps(template, project_path)
        
    except Exception as e:
        typer.secho(f"‚ùå Erreur lors de la cr√©ation du projet: {e}", fg=typer.colors.RED)
        raise typer.Exit(1)

@app.command("templates")
def list_templates():
    """Affiche la liste des templates disponibles."""
    templates = get_available_templates()
    
    if not templates:
        console.print("üìã Aucun template disponible.")
        return
    
    # Cr√©er une table Rich
    table = Table(title="Templates LCPI Disponibles")
    table.add_column("Nom", style="cyan", no_wrap=True)
    table.add_column("Description", style="green")
    table.add_column("Type", style="yellow")
    
    for template in templates:
        description = get_template_description(template)
        template_type = get_template_type(template)
        table.add_row(template, description, template_type)
    
    console.print(table)
    console.print("\nüí° Utilisez 'lcpi project create <nom> --template <template>' pour cr√©er un projet.")

@app.command("examples")
def list_examples():
    """Affiche la liste des exemples disponibles."""
    examples = get_available_examples()
    
    if not examples:
        console.print("üìã Aucun exemple disponible.")
        return
    
    # Cr√©er une table Rich
    table = Table(title="Exemples LCPI Disponibles")
    table.add_column("Nom", style="cyan", no_wrap=True)
    table.add_column("Description", style="green")
    table.add_column("Fichiers", style="yellow")
    
    for example in examples:
        description = get_example_description(example)
        files = get_example_files(example)
        table.add_row(example, description, ", ".join(files))
    
    console.print(table)
    console.print("\nüí° Utilisez 'lcpi project create <nom> --template <template>' pour cr√©er un projet.")

@app.command("list")
def list_projects():
    """Affiche la liste des projets connus."""
    projects = global_config.list_projects()
    active_project = global_config.get_active_project()
    
    if not projects:
        console.print("üìã Aucun projet connu.")
        return
    
    # Cr√©er une table Rich
    table = Table(title="Projets LCPI Connus")
    table.add_column("Nom du Projet", style="cyan", no_wrap=True)
    table.add_column("Chemin", style="green")
    table.add_column("Statut", style="yellow")
    
    for name, path in projects.items():
        status = "üü¢ Actif" if active_project and active_project['name'] == name else ""
        table.add_row(name, str(Path(path)), status)
    
    console.print(table)
    
    # Afficher le contexte actuel
    context = get_project_context()
    if context['type'] == 'sandbox':
        console.print("üü° Mode sandbox actif")

@app.command("switch")
def switch_project(
    nom_projet: str = typer.Argument(None, help="Nom du projet √† activer")
):
    """Change le projet actif."""
    projects = global_config.list_projects()
    
    if not projects:
        typer.secho("‚ùå Aucun projet connu. Cr√©ez d'abord un projet avec 'lcpi project init'.", fg=typer.colors.RED)
        raise typer.Exit(1)
    
    if not nom_projet:
        # Mode interactif
        console.print("üìã Projets disponibles :")
        project_names = list(projects.keys())
        
        for i, name in enumerate(project_names, 1):
            active_marker = "üü¢ " if global_config.get_active_project() and global_config.get_active_project()['name'] == name else "  "
            console.print(f"  {i}. {active_marker}{name}")
        
        try:
            choice = typer.prompt("S√©lectionnez le num√©ro du projet", type=int)
            if 1 <= choice <= len(project_names):
                nom_projet = project_names[choice - 1]
            else:
                typer.secho("‚ùå S√©lection invalide", fg=typer.colors.RED)
                raise typer.Exit(1)
        except ValueError:
            typer.secho("‚ùå S√©lection invalide", fg=typer.colors.RED)
            raise typer.Exit(1)
    
    try:
        global_config.set_active_project(nom_projet)
        console.print(f"‚úÖ Projet '{nom_projet}' est maintenant actif.")
    except ValueError as e:
        typer.secho(f"‚ùå {e}", fg=typer.colors.RED)
        raise typer.Exit(1)

@app.command("cd")
def cd_project():
    """Change le r√©pertoire courant vers le projet actif."""
    active_project = global_config.get_active_project()
    
    if not active_project:
        typer.secho("‚ùå Aucun projet actif. Utilisez 'lcpi project switch' pour activer un projet.", fg=typer.colors.RED)
        raise typer.Exit(1)
    
    project_path = Path(active_project['path'])
    console.print(f"üìÅ Changement vers: {project_path}")
    
    # Note: Dans un vrai environnement, on changerait le r√©pertoire
    # Mais ici on affiche juste le chemin
    console.print(f"üí° Pour naviguer vers ce dossier, utilisez: cd {project_path}")

@app.command("remove")
def remove_project(
    nom_projet: str = typer.Argument(..., help="Nom du projet √† supprimer"),
    force: bool = typer.Option(False, "--force", "-f", help="Supprimer sans confirmation")
):
    """Supprime un projet de la liste des projets connus."""
    projects = global_config.list_projects()
    
    if nom_projet not in projects:
        typer.secho(f"‚ùå Projet '{nom_projet}' non trouv√©.", fg=typer.colors.RED)
        raise typer.Exit(1)
    
    if not force:
        confirm = typer.confirm(f"Voulez-vous vraiment supprimer le projet '{nom_projet}' de la liste ?")
        if not confirm:
            console.print("‚ùå Suppression annul√©e.")
            return
    
    global_config.remove_project(nom_projet)
    console.print(f"‚úÖ Projet '{nom_projet}' supprim√© de la liste.")

@app.command("archive")
def archive_project(
    nom_projet: str = typer.Argument(..., help="Nom du projet √† archiver"),
    output_dir: Path = typer.Option(Path.cwd(), "--output", "-o", help="R√©pertoire de sortie pour l'archive")
):
    """Cr√©e une archive zip du projet."""
    projects = global_config.list_projects()
    
    if nom_projet not in projects:
        typer.secho(f"‚ùå Projet '{nom_projet}' non trouv√©.", fg=typer.colors.RED)
        raise typer.Exit(1)
    
    project_path = Path(projects[nom_projet])
    if not project_path.exists():
        typer.secho(f"‚ùå Le dossier du projet '{nom_projet}' n'existe plus.", fg=typer.colors.RED)
        raise typer.Exit(1)
    
    # Cr√©er le nom de l'archive
    timestamp = datetime.now().strftime("%Y-%m-%d")
    archive_name = f"{nom_projet.replace(' ', '_')}_{timestamp}.zip"
    archive_path = output_dir / archive_name
    
    try:
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in project_path.rglob('*'):
                if file_path.is_file():
                    # Ajouter le fichier √† l'archive avec un chemin relatif
                    arcname = file_path.relative_to(project_path)
                    zipf.write(file_path, arcname)
        
        console.print(f"‚úÖ Archive cr√©√©e: {archive_path}")
        console.print(f"üì¶ Taille: {archive_path.stat().st_size / 1024 / 1024:.1f} MB")
        
    except Exception as e:
        typer.secho(f"‚ùå Erreur lors de la cr√©ation de l'archive: {e}", fg=typer.colors.RED)
        raise typer.Exit(1)

@app.command("sandbox")
def sandbox_commands(
    clean: bool = typer.Option(False, "--clean", help="Nettoyer le contenu du sandbox"),
    status: bool = typer.Option(False, "--status", help="Afficher le statut du sandbox")
):
    """Gestion du sandbox."""
    if status:
        if global_config.is_sandbox_active():
            console.print("üü° Sandbox actif")
            sandbox_path = global_config.get_sandbox_path()
            console.print(f"üìÅ Chemin: {sandbox_path}")
            
            # Afficher le contenu du sandbox
            if sandbox_path.exists():
                files = list(sandbox_path.iterdir())
                if files:
                    console.print("üìã Contenu du sandbox:")
                    for file in files:
                        if file.is_file():
                            console.print(f"  üìÑ {file.name}")
                        elif file.is_dir():
                            console.print(f"  üìÅ {file.name}/")
                else:
                    console.print("üìã Sandbox vide")
        else:
            console.print("‚ö™ Sandbox inactif")
    
    elif clean:
        if not global_config.is_sandbox_active():
            typer.secho("‚ùå Le sandbox n'est pas actif.", fg=typer.colors.RED)
            raise typer.Exit(1)
        
        confirm = typer.confirm(
            "Voulez-vous supprimer tout le contenu du sandbox ? Cette action est irr√©versible."
        )
        
        if confirm:
            global_config.clean_sandbox()
            console.print("‚úÖ Sandbox nettoy√©.")
        else:
            console.print("‚ùå Nettoyage annul√©.")
    
    else:
        # Afficher l'aide du sandbox
        console.print(Panel(
            "üü° **Gestion du Sandbox**\n\n"
            "Le sandbox est un environnement d'exp√©rimentation temporaire.\n\n"
            "**Commandes disponibles:**\n"
            "‚Ä¢ lcpi project sandbox --status    - Afficher le statut\n"
            "‚Ä¢ lcpi project sandbox --clean     - Nettoyer le contenu\n\n"
            "**Utilisation:**\n"
            "Le sandbox s'active automatiquement quand aucun projet n'est actif\n"
            "et que vous ex√©cutez une commande m√©tier.",
            title="Sandbox LCPI",
            border_style="yellow"
        ))

@app.command("status")
def project_status():
    """Affiche le statut du contexte actuel."""
    context = get_project_context()
    
    if context['type'] == 'project':
        console.print(Panel(
            f"üü¢ **Projet Actif: {context['name']}**\n\n"
            f"üìÅ Chemin: {context['path']}\n"
            f"üìä Type: Projet LCPI\n\n"
            f"**Commandes utiles:**\n"
            f"‚Ä¢ lcpi project cd              - Naviguer vers le projet\n"
            f"‚Ä¢ lcpi project archive {context['name']}  - Archiver le projet",
            title="Contexte Actuel",
            border_style="green"
        ))
    
    elif context['type'] == 'sandbox':
        console.print(Panel(
            "üü° **Mode Sandbox Actif**\n\n"
            f"üìÅ Chemin: {context['path']}\n"
            f"üìä Type: Environnement d'exp√©rimentation\n\n"
            f"**Commandes utiles:**\n"
            f"‚Ä¢ lcpi project sandbox --clean  - Nettoyer le sandbox\n"
            f"‚Ä¢ lcpi project switch           - Activer un projet",
            title="Contexte Actuel",
            border_style="yellow"
        ))
    
    else:
        console.print(Panel(
            "‚ö™ **Aucun Contexte Actif**\n\n"
            "Aucun projet n'est actuellement actif.\n\n"
            f"**Commandes utiles:**\n"
            f"‚Ä¢ lcpi project init <nom>       - Cr√©er un nouveau projet\n"
            f"‚Ä¢ lcpi project switch           - Activer un projet existant\n"
            f"‚Ä¢ lcpi project list             - Voir les projets disponibles",
            title="Contexte Actuel",
            border_style="white"
        ))


@app.command("export-repro")
def export_reproducible(
    output: str = typer.Option("repro.tar.gz", "--output", "-o", help="Chemin du fichier d'export"),
    include_logs: bool = typer.Option(True, "--logs/--no-logs", help="Inclure les logs de calcul"),
    include_results: bool = typer.Option(True, "--results/--no-results", help="Inclure les r√©sultats"),
    include_env: bool = typer.Option(True, "--env/--no-env", help="Inclure l'environnement Python"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Afficher les d√©tails de l'export")
):
    """Exporte un environnement reproductible complet du projet."""
    try:
        from .core.reproducible import export_reproducible
        
        console.print("üöÄ Export de l'environnement reproductible...")
        
        # V√©rifier qu'un projet est actif
        if not project_context.is_project_active():
            console.print("‚ùå Aucun projet actif. Utilisez 'lcpi project switch <nom>' ou 'lcpi project init'")
            raise typer.Exit(1)
        
        # Effectuer l'export
        export_info = export_reproducible(
            output_path=output,
            include_logs=include_logs,
            include_results=include_results,
            include_env=include_env
        )
        
        # Afficher le r√©sum√©
        console.print(Panel("‚úÖ Export r√©ussi !", style="green"))
        console.print(f"üìÅ Fichier cr√©√©: {output}")
        console.print(f"üìÖ Date d'export: {export_info['export_date']}")
        console.print(f"üèóÔ∏è  Projet: {export_info['project_name']}")
        
        if verbose:
            console.print("\nüìã D√©tails de l'export:")
            console.print(f"   ‚Ä¢ Logs inclus: {'‚úÖ' if include_logs else '‚ùå'}")
            console.print(f"   ‚Ä¢ R√©sultats inclus: {'‚úÖ' if include_results else '‚ùå'}")
            console.print(f"   ‚Ä¢ Environnement inclus: {'‚úÖ' if include_env else '‚ùå'}")
        
        console.print(f"\nüí° Pour reproduire l'environnement:")
        console.print(f"   tar -xzf {output}")
        console.print(f"   cd lcpi_reproducible/environment")
        console.print(f"   pip install -r requirements.txt")
        console.print(f"   docker build -t lcpi-repro .")
        
    except Exception as e:
        console.print(f"‚ùå Erreur lors de l'export: {e}")
        raise typer.Exit(1)
