#!/usr/bin/env python3
"""
G√©n√©rateur de Licences pour LCPI-CLI
Outil de g√©n√©ration de cl√©s de licence chiffr√©es et s√©curis√©es
"""

import uuid
import json
import base64
import os
from datetime import datetime, timedelta
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# --- CONFIGURATION SECR√àTE DU D√âVELOPPEUR ---
# ATTENTION : Gardez cette "master_password" secr√®te.
# Elle est utilis√©e pour d√©river la cl√© de chiffrement. Changez-la pour votre propre projet.
MASTER_PASSWORD = b"MaPhraseSecretePourLCPI-CLI-2025!"
SALT = b'\x9a\x8b\x01\xe0\x9c\x8a\x1e\x9f\x1d\x0c\x0b\x9d\x8e\x1f\x9a\x8b'  # Sel statique

def get_encryption_key():
    """D√©rive une cl√© de chiffrement stable √† partir du mot de passe ma√Ætre."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=SALT,
        iterations=480000,
    )
    key = base64.urlsafe_b64encode(kdf.derive(MASTER_PASSWORD))
    return key

def get_machine_fingerprint():
    """
    G√©n√®re un identifiant unique pour la machine bas√© sur l'adresse MAC.
    Retourne une cha√Æne de caract√®res.
    """
    # uuid.getnode() retourne l'adresse MAC sous forme d'un entier de 48 bits.
    # C'est une m√©thode simple et assez fiable pour lier la licence √† une machine.
    mac_address = uuid.getnode()
    return hex(mac_address)

def generate_license_key(user_name: str, days_valid: int, license_type: str = "standard"):
    """
    G√©n√®re une cl√© de licence chiffr√©e pour un utilisateur et une dur√©e donn√©es.
    
    Args:
        user_name: Nom de l'utilisateur
        days_valid: Nombre de jours de validit√©
        license_type: Type de licence (standard, premium, enterprise)
    """
    fingerprint = get_machine_fingerprint()
    expiration_date = datetime.now() + timedelta(days=days_valid)

    license_data = {
        "user_name": user_name,
        "fingerprint": fingerprint,
        "expiration_date": expiration_date.isoformat(),
        "generated_at": datetime.now().isoformat(),
        "license_type": license_type,
        "version": "1.0"
    }

    # S√©rialiser les donn√©es en JSON
    license_json = json.dumps(license_data, indent=2).encode('utf-8')

    # Chiffrer les donn√©es
    fernet = Fernet(get_encryption_key())
    encrypted_license = fernet.encrypt(license_json)

    print("\n" + "="*60)
    print("  üé´ G√âN√âRATION DE LA CL√â DE LICENCE R√âUSSIE")
    print("="*60)
    print(f"üë§ Utilisateur : {user_name}")
    print(f"üîß Empreinte machine : {fingerprint}")
    print(f"üìÖ Valide jusqu'au : {expiration_date.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üè∑Ô∏è  Type de licence : {license_type}")
    print(f"‚è±Ô∏è  Dur√©e : {days_valid} jours")
    
    print("\n" + "="*60)
    print("üîë CL√â DE LICENCE √Ä FOURNIR √Ä L'UTILISATEUR")
    print("="*60)
    print(encrypted_license.decode('utf-8'))
    print("="*60)
    
    # Sauvegarder dans un fichier pour le d√©veloppeur
    license_file = f"license_{user_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(license_file, 'w') as f:
        f.write(f"Licence g√©n√©r√©e pour : {user_name}\n")
        f.write(f"Type : {license_type}\n")
        f.write(f"Valide jusqu'au : {expiration_date.strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Empreinte machine : {fingerprint}\n")
        f.write("\n" + "="*60 + "\n")
        f.write("CL√â DE LICENCE :\n")
        f.write("="*60 + "\n")
        f.write(encrypted_license.decode('utf-8'))
        f.write("\n" + "="*60 + "\n")
    
    print(f"\nüíæ Licence sauvegard√©e dans : {license_file}")
    
    return encrypted_license.decode('utf-8')

def show_activation_instructions():
    """Affiche les instructions d'activation pour l'utilisateur."""
    print("\n" + "="*60)
    print("üìã INSTRUCTIONS D'ACTIVATION POUR L'UTILISATEUR")
    print("="*60)
    print("1. Cr√©ez un dossier cach√© nomm√© '.lcpi' dans votre r√©pertoire personnel :")
    print("   ‚Ä¢ Windows : C:\\Users\\VotreNom\\.lcpi")
    print("   ‚Ä¢ Linux/macOS : /home/votrenom/.lcpi")
    print()
    print("2. Dans ce dossier, cr√©ez un fichier nomm√© 'license.key'")
    print()
    print("3. Copiez-collez la cl√© de licence ci-dessus dans ce fichier")
    print("   (seulement la cl√©, sans espaces suppl√©mentaires)")
    print()
    print("4. Sauvegardez le fichier")
    print()
    print("5. Relancez LCPI-CLI - la licence sera automatiquement valid√©e")
    print("="*60)

def main():
    """Point d'entr√©e principal pour le d√©veloppeur."""
    print("üîê Outil de G√©n√©ration de Licence pour LCPI-CLI")
    print("="*60)
    
    # Demander au d√©veloppeur l'empreinte de la machine de l'utilisateur
    print("\n‚ö†Ô∏è  IMPORTANT : Ex√©cutez ce script sur la machine de l'utilisateur final")
    print("pour capturer automatiquement la bonne empreinte mat√©rielle.")
    
    confirm = input("\nAvez-vous bien ex√©cut√© ce script sur la machine de l'utilisateur final ? (o/n) : ")
    if confirm.lower() != 'o':
        print("‚ùå Op√©ration annul√©e. Veuillez relancer sur la machine cible.")
        return
    
    print("\n" + "="*60)
    print("üìù INFORMATIONS DE LA LICENCE")
    print("="*60)
    
    user_name = input("üë§ Nom de l'utilisateur : ")
    days_valid = int(input("‚è±Ô∏è  Nombre de jours de validit√© (ex: 365) : "))
    
    print("\nüè∑Ô∏è  Type de licence :")
    print("1. Standard (fonctionnalit√©s de base)")
    print("2. Premium (fonctionnalit√©s avanc√©es)")
    print("3. Enterprise (toutes les fonctionnalit√©s)")
    
    license_type_choice = input("Choisissez le type (1/2/3) [1] : ").strip()
    
    license_types = {
        "1": "standard",
        "2": "premium", 
        "3": "enterprise"
    }
    
    license_type = license_types.get(license_type_choice, "standard")
    
    # G√©n√©rer la licence
    license_key = generate_license_key(user_name, days_valid, license_type)
    
    # Afficher les instructions d'activation
    show_activation_instructions()
    
    print(f"\n‚úÖ Licence g√©n√©r√©e avec succ√®s pour {user_name} !")

if __name__ == "__main__":
    main() 